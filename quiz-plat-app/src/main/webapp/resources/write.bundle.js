/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/
/******/ 		return result;
/******/ 	}
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "428bb829b6472cea755a";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			for(var chunkId in installedChunks)
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted &&
/******/ 				// removed self-accepted modules should not be required
/******/ 				appliedUpdate[moduleId] !== warnUnexpectedRequire
/******/ 			) {
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"write": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/resources/";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push([1,"vendors"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/resources/styles/_reset.scss":
/*!*******************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src??ref--4-2!./node_modules/sass-loader/dist/cjs.js!./src/resources/styles/_reset.scss ***!
  \*******************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.i, \"@charset \\\"UTF-8\\\";\\n/* reset */\\n.blind {\\n  overflow: hidden;\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  margin: -1px;\\n  padding: 0;\\n  border: 0;\\n  line-height: 0;\\n  white-space: normal;\\n  word-wrap: break-word;\\n  word-break: break-all;\\n  clip: rect(0, 0, 0, 0); }\\n\\n.blind:before {\\n  display: block;\\n  width: 0;\\n  height: 0;\\n  font-size: 0;\\n  content: '\\\\00a0'; }\\n\\n/* focus 빠짐 방지와 영역 정확히 잡는 역할 */\\nhtml, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {\\n  border: 0;\\n  font-size: 100%;\\n  font: inherit;\\n  vertical-align: baseline;\\n  margin: 0;\\n  padding: 0;\\n  box-sizing: border-box; }\\n\\narticle, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {\\n  display: block; }\\n\\nbody {\\n  line-height: 1; }\\n\\nol, ul {\\n  list-style: none; }\\n\\nblockquote, q {\\n  quotes: none; }\\n\\nblockquote:before, blockquote:after {\\n  content: none; }\\n\\nq:before, q:after {\\n  content: none; }\\n\\ntable {\\n  border-collapse: collapse;\\n  border-spacing: 0; }\\n\\nhtml, body {\\n  font-family: 'Noto Sans KR', 'Roboto', sans-serif;\\n  min-height: 100%;\\n  box-sizing: border-box;\\n  color: black; }\\n\\na {\\n  color: inherit;\\n  text-decoration: inherit; }\\n\\ntextarea:focus, input:focus {\\n  outline: none; }\\n\\nbutton {\\n  padding: 0;\\n  outline: 0;\\n  background-color: inherit;\\n  border: 0; }\\n\\n/* input 기본 스타일 초기화 */\\ninput {\\n  -webkit-appearance: none;\\n  -moz-appearance: none;\\n  appearance: none;\\n  margin: 0;\\n  border: 0;\\n  padding: 0;\\n  display: inline-block;\\n  vertical-align: middle;\\n  white-space: normal;\\n  background: none;\\n  line-height: 1;\\n  /* Browsers have different default form fonts */\\n  font-size: 13px; }\\n  input:-webkit-autofill {\\n    -webkit-box-shadow: 0 0 0 30px white inset !important; }\\n    input:-webkit-autofill:hover, input:-webkit-autofill:focus, input:-webkit-autofill:active {\\n      -webkit-box-shadow: 0 0 0 30px white inset !important; }\\n\\nlabel, select, button, textarea {\\n  margin: 0;\\n  border: 0;\\n  padding: 0;\\n  display: inline-block;\\n  vertical-align: middle;\\n  white-space: normal;\\n  background: none;\\n  line-height: 1;\\n  /* Browsers have different default form fonts */\\n  font-size: 13px; }\\n\", \"\"]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzb3VyY2VzL3N0eWxlcy9fcmVzZXQuc2Nzcz9kMGNhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQixtQkFBTyxDQUFDLDJHQUFzRDtBQUN6RjtBQUNBLGNBQWMsUUFBUyxzQkFBc0IsdUJBQXVCLHFCQUFxQix1QkFBdUIsZUFBZSxnQkFBZ0IsaUJBQWlCLGVBQWUsY0FBYyxtQkFBbUIsd0JBQXdCLDBCQUEwQiwwQkFBMEIsMkJBQTJCLEVBQUUsbUJBQW1CLG1CQUFtQixhQUFhLGNBQWMsaUJBQWlCLHNCQUFzQixFQUFFLGloQkFBaWhCLGNBQWMsb0JBQW9CLGtCQUFrQiw2QkFBNkIsY0FBYyxlQUFlLDJCQUEyQixFQUFFLDZGQUE2RixtQkFBbUIsRUFBRSxVQUFVLG1CQUFtQixFQUFFLFlBQVkscUJBQXFCLEVBQUUsbUJBQW1CLGlCQUFpQixFQUFFLHlDQUF5QyxrQkFBa0IsRUFBRSx1QkFBdUIsa0JBQWtCLEVBQUUsV0FBVyw4QkFBOEIsc0JBQXNCLEVBQUUsZ0JBQWdCLHNEQUFzRCxxQkFBcUIsMkJBQTJCLGlCQUFpQixFQUFFLE9BQU8sbUJBQW1CLDZCQUE2QixFQUFFLGlDQUFpQyxrQkFBa0IsRUFBRSxZQUFZLGVBQWUsZUFBZSw4QkFBOEIsY0FBYyxFQUFFLG1DQUFtQyw2QkFBNkIsMEJBQTBCLHFCQUFxQixjQUFjLGNBQWMsZUFBZSwwQkFBMEIsMkJBQTJCLHdCQUF3QixxQkFBcUIsbUJBQW1CLHdFQUF3RSxFQUFFLDRCQUE0Qiw0REFBNEQsRUFBRSxpR0FBaUcsOERBQThELEVBQUUscUNBQXFDLGNBQWMsY0FBYyxlQUFlLDBCQUEwQiwyQkFBMkIsd0JBQXdCLHFCQUFxQixtQkFBbUIsd0VBQXdFLEVBQUUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/IS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3JjL3Jlc291cmNlcy9zdHlsZXMvX3Jlc2V0LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBjaGFyc2V0IFxcXCJVVEYtOFxcXCI7XFxuLyogcmVzZXQgKi9cXG4uYmxpbmQge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxcHg7XFxuICBoZWlnaHQ6IDFweDtcXG4gIG1hcmdpbjogLTFweDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3JkZXI6IDA7XFxuICBsaW5lLWhlaWdodDogMDtcXG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XFxuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XFxuICB3b3JkLWJyZWFrOiBicmVhay1hbGw7XFxuICBjbGlwOiByZWN0KDAsIDAsIDAsIDApOyB9XFxuXFxuLmJsaW5kOmJlZm9yZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAwO1xcbiAgZm9udC1zaXplOiAwO1xcbiAgY29udGVudDogJ1xcXFwwMGEwJzsgfVxcblxcbi8qIGZvY3VzIOu5oOynkCDrsKnsp4DsmYAg7JiB7JetIOygle2Zle2eiCDsnqHripQg7Jet7ZWgICovXFxuaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLCBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsIGEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSwgZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzLCBzYW1wLCBzbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLCBiLCB1LCBpLCBjZW50ZXIsIGRsLCBkdCwgZGQsIG9sLCB1bCwgbGksIGZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLCB0YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCwgYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZW1iZWQsIGZpZ3VyZSwgZmlnY2FwdGlvbiwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksIHRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxuICBib3JkZXI6IDA7XFxuICBmb250LXNpemU6IDEwMCU7XFxuICBmb250OiBpbmhlcml0O1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cXG5cXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xcbiAgZGlzcGxheTogYmxvY2s7IH1cXG5cXG5ib2R5IHtcXG4gIGxpbmUtaGVpZ2h0OiAxOyB9XFxuXFxub2wsIHVsIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7IH1cXG5cXG5ibG9ja3F1b3RlLCBxIHtcXG4gIHF1b3Rlczogbm9uZTsgfVxcblxcbmJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyIHtcXG4gIGNvbnRlbnQ6IG5vbmU7IH1cXG5cXG5xOmJlZm9yZSwgcTphZnRlciB7XFxuICBjb250ZW50OiBub25lOyB9XFxuXFxudGFibGUge1xcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XFxuXFxuaHRtbCwgYm9keSB7XFxuICBmb250LWZhbWlseTogJ05vdG8gU2FucyBLUicsICdSb2JvdG8nLCBzYW5zLXNlcmlmO1xcbiAgbWluLWhlaWdodDogMTAwJTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBjb2xvcjogYmxhY2s7IH1cXG5cXG5hIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0OyB9XFxuXFxudGV4dGFyZWE6Zm9jdXMsIGlucHV0OmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7IH1cXG5cXG5idXR0b24ge1xcbiAgcGFkZGluZzogMDtcXG4gIG91dGxpbmU6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBpbmhlcml0O1xcbiAgYm9yZGVyOiAwOyB9XFxuXFxuLyogaW5wdXQg6riw67O4IOyKpO2DgOydvCDstIjquLDtmZQgKi9cXG5pbnB1dCB7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgbWFyZ2luOiAwO1xcbiAgYm9yZGVyOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgLyogQnJvd3NlcnMgaGF2ZSBkaWZmZXJlbnQgZGVmYXVsdCBmb3JtIGZvbnRzICovXFxuICBmb250LXNpemU6IDEzcHg7IH1cXG4gIGlucHV0Oi13ZWJraXQtYXV0b2ZpbGwge1xcbiAgICAtd2Via2l0LWJveC1zaGFkb3c6IDAgMCAwIDMwcHggd2hpdGUgaW5zZXQgIWltcG9ydGFudDsgfVxcbiAgICBpbnB1dDotd2Via2l0LWF1dG9maWxsOmhvdmVyLCBpbnB1dDotd2Via2l0LWF1dG9maWxsOmZvY3VzLCBpbnB1dDotd2Via2l0LWF1dG9maWxsOmFjdGl2ZSB7XFxuICAgICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgMCAzMHB4IHdoaXRlIGluc2V0ICFpbXBvcnRhbnQ7IH1cXG5cXG5sYWJlbCwgc2VsZWN0LCBidXR0b24sIHRleHRhcmVhIHtcXG4gIG1hcmdpbjogMDtcXG4gIGJvcmRlcjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIC8qIEJyb3dzZXJzIGhhdmUgZGlmZmVyZW50IGRlZmF1bHQgZm9ybSBmb250cyAqL1xcbiAgZm9udC1zaXplOiAxM3B4OyB9XFxuXCIsIFwiXCJdKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/resources/styles/_reset.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/resources/write/jquery.minicolors.css":
/*!*****************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/resources/write/jquery.minicolors.css ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\")(false);\n// Imports\nvar getUrl = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/getUrl.js */ \"./node_modules/css-loader/dist/runtime/getUrl.js\");\nvar ___CSS_LOADER_URL___0___ = getUrl(__webpack_require__(/*! ./jquery.minicolors.png */ \"./src/resources/write/jquery.minicolors.png\"));\n// Module\nexports.push([module.i, \".minicolors {\\n  position: relative;\\n}\\n\\n.minicolors-sprite {\\n  background-image: url(\" + ___CSS_LOADER_URL___0___ + \");\\n}\\n\\n.minicolors-swatch {\\n  position: absolute;\\n  vertical-align: middle;\\n  background-position: -80px 0;\\n  border: solid 1px #ccc;\\n  cursor: text;\\n  padding: 0;\\n  margin: 0;\\n  display: inline-block;\\n}\\n\\n.minicolors-swatch-color {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n}\\n\\n.minicolors input[type=hidden] + .minicolors-swatch {\\n  width: 28px;\\n  position: static;\\n  cursor: pointer;\\n}\\n\\n.minicolors input[type=hidden][disabled] + .minicolors-swatch {\\n  cursor: default;\\n}\\n\\n/* Panel */\\n.minicolors-panel {\\n  position: fixed;\\n  width: 173px;\\n  background: white;\\n  border: solid 1px #CCC;\\n  box-shadow: 0 0 20px rgba(0, 0, 0, .2);\\n  z-index: 99999;\\n  box-sizing: content-box;\\n  display: none;\\n  top:50%;\\n  left:50%;\\n  transform:translateX(-50%);\\n}\\n\\n.minicolors-panel.minicolors-visible {\\n  display: block;\\n}\\n\\n/* Panel positioning */\\n.minicolors-position-top .minicolors-panel {\\n  top: -154px;\\n}\\n\\n.minicolors-position-right .minicolors-panel {\\n  right: 0;\\n}\\n\\n.minicolors-position-bottom .minicolors-panel {\\n  top: auto;\\n}\\n\\n.minicolors-position-left .minicolors-panel {\\n  left: 0;\\n}\\n\\n.minicolors-with-opacity .minicolors-panel {\\n  width: 194px;\\n}\\n\\n.minicolors .minicolors-grid {\\n  position: relative;\\n  top: 1px;\\n  left: 1px; /* LTR */\\n  width: 150px;\\n  height: 150px;\\n  margin-bottom: 2px;\\n  background-position: -120px 0;\\n  cursor: crosshair;\\n}\\n[dir=rtl] .minicolors .minicolors-grid {\\n  right: 1px;\\n}\\n\\n.minicolors .minicolors-grid-inner {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 150px;\\n  height: 150px;\\n}\\n\\n.minicolors-slider-saturation .minicolors-grid {\\n  background-position: -420px 0;\\n}\\n\\n.minicolors-slider-saturation .minicolors-grid-inner {\\n  background-position: -270px 0;\\n  background-image: inherit;\\n}\\n\\n.minicolors-slider-brightness .minicolors-grid {\\n  background-position: -570px 0;\\n}\\n\\n.minicolors-slider-brightness .minicolors-grid-inner {\\n  background-color: black;\\n}\\n\\n.minicolors-slider-wheel .minicolors-grid {\\n  background-position: -720px 0;\\n}\\n\\n.minicolors-slider,\\n.minicolors-opacity-slider {\\n  position: absolute;\\n  top: 1px;\\n  left: 152px; /* LTR */\\n  width: 20px;\\n  height: 150px;\\n  background-color: white;\\n  background-position: 0 0;\\n  cursor: row-resize;\\n}\\n[dir=rtl] .minicolors-slider,\\n[dir=rtl] .minicolors-opacity-slider {\\n  right: 152px;\\n}\\n\\n.minicolors-slider-saturation .minicolors-slider {\\n  background-position: -60px 0;\\n}\\n\\n.minicolors-slider-brightness .minicolors-slider {\\n  background-position: -20px 0;\\n}\\n\\n.minicolors-slider-wheel .minicolors-slider {\\n  background-position: -20px 0;\\n}\\n\\n.minicolors-opacity-slider {\\n  left: 173px; /* LTR */\\n  background-position: -40px 0;\\n  display: none;\\n}\\n[dir=rtl] .minicolors-opacity-slider {\\n  right: 173px;\\n}\\n\\n.minicolors-with-opacity .minicolors-opacity-slider {\\n  display: block;\\n}\\n\\n/* Pickers */\\n.minicolors-grid .minicolors-picker {\\n  position: absolute;\\n  top: 70px;\\n  left: 70px;\\n  width: 12px;\\n  height: 12px;\\n  border: solid 1px black;\\n  border-radius: 10px;\\n  margin-top: -6px;\\n  margin-left: -6px;\\n  background: none;\\n}\\n\\n.minicolors-grid .minicolors-picker > div {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 8px;\\n  height: 8px;\\n  border-radius: 8px;\\n  border: solid 2px white;\\n  box-sizing: content-box;\\n}\\n\\n.minicolors-picker {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 18px;\\n  height: 2px;\\n  background: white;\\n  border: solid 1px black;\\n  margin-top: -2px;\\n  box-sizing: content-box;\\n}\\n\\n/* Swatches */\\n.minicolors-swatches,\\n.minicolors-swatches li {\\n  margin: 5px 0 3px 5px; /* LTR */\\n  padding: 0;\\n  list-style: none;\\n  overflow: hidden;\\n}\\n[dir=rtl] .minicolors-swatches,\\n[dir=rtl] .minicolors-swatches li {\\n  margin: 5px 5px 3px 0;\\n}\\n\\n.minicolors-swatches .minicolors-swatch {\\n  position: relative;\\n  float: left; /* LTR */\\n  cursor: pointer;\\n  margin:0 4px 0 0; /* LTR */\\n}\\n[dir=rtl] .minicolors-swatches .minicolors-swatch {\\n  float: right;\\n  margin:0 0 0 4px;\\n}\\n\\n.minicolors-with-opacity .minicolors-swatches .minicolors-swatch {\\n  margin-right: 7px; /* LTR */\\n}\\n[dir=rtl] .minicolors-with-opacity .minicolors-swatches .minicolors-swatch {\\n  margin-right: 0;\\n  margin-left: 7px;\\n}\\n\\n.minicolors-swatch.selected {\\n  border-color: #000;\\n}\\n\\n/* Inline controls */\\n.minicolors-inline {\\n  display: inline-block;\\n}\\n\\n.minicolors-inline .minicolors-input {\\n  display: none !important;\\n}\\n\\n.minicolors-inline .minicolors-panel {\\n  position: relative;\\n  top: auto;\\n  left: auto; /* LTR */\\n  box-shadow: none;\\n  z-index: auto;\\n  display: inline-block;\\n}\\n[dir=rtl] .minicolors-inline .minicolors-panel {\\n  right: auto;\\n}\\n\\n/* Default theme */\\n.minicolors-theme-default .minicolors-swatch {\\n  top: 0;\\n  left: 0;\\n  width: 18px;\\n  height: 18px;\\n}\\n[dir=rtl] .minicolors-theme-default .minicolors-swatch {\\n  right: 5px;\\n}\\n.minicolors-theme-default .minicolors-swatches .minicolors-swatch {\\n  margin-bottom: 2px;\\n  top: 0;\\n  left: 0; /* LTR */\\n  width: 18px;\\n  height: 18px;\\n}\\n[dir=rtl] .minicolors-theme-default .minicolors-swatches .minicolors-swatch {\\n  right: 0;\\n}\\n.minicolors-theme-default.minicolors-position-right .minicolors-swatch {\\n  left: auto; /* LTR */\\n  right: 5px; /* LTR */\\n}\\n[dir=rtl] .minicolors-theme-default.minicolors-position-left .minicolors-swatch {\\n  right: auto;\\n  left: 5px;\\n}\\n.minicolors-theme-default.minicolors {\\n  width: auto;\\n  display: inline-block;\\n}\\n.minicolors-theme-default .minicolors-input {\\n  height: 20px;\\n  width: auto;\\n  display: inline-block;\\n  padding-left: 26px; /* LTR */\\n}\\n[dir=rtl] .minicolors-theme-default .minicolors-input {\\n  text-align: right;\\n  unicode-bidi: plaintext;\\n  padding-left: 1px;\\n  padding-right: 26px;\\n}\\n.minicolors-theme-default.minicolors-position-right .minicolors-input {\\n  padding-right: 26px; /* LTR */\\n  padding-left: inherit; /* LTR */\\n}\\n[dir=rtl] .minicolors-theme-default.minicolors-position-left .minicolors-input {\\n  padding-right: inherit;\\n  padding-left: 26px;\\n}\\n\\n/* Bootstrap theme */\\n.minicolors-theme-bootstrap .minicolors-swatch {\\n  z-index: 2;\\n  top: 3px;\\n  left: 3px; /* LTR */\\n  width: 28px;\\n  height: 28px;\\n  border-radius: 3px;\\n}\\n[dir=rtl] .minicolors-theme-bootstrap .minicolors-swatch {\\n  right: 3px;\\n}\\n.minicolors-theme-bootstrap .minicolors-swatches .minicolors-swatch {\\n  margin-bottom: 2px;\\n  top: 0;\\n  left: 0; /* LTR */\\n  width: 20px;\\n  height: 20px;\\n}\\n[dir=rtl] .minicolors-theme-bootstrap .minicolors-swatches .minicolors-swatch {\\n  right: 0;\\n}\\n.minicolors-theme-bootstrap .minicolors-swatch-color {\\n  border-radius: inherit;\\n}\\n.minicolors-theme-bootstrap.minicolors-position-right > .minicolors-swatch {\\n  left: auto; /* LTR */\\n  right: 3px; /* LTR */\\n}\\n[dir=rtl] .minicolors-theme-bootstrap.minicolors-position-left > .minicolors-swatch {\\n  right: auto;\\n  left: 3px;\\n}\\n.minicolors-theme-bootstrap .minicolors-input {\\n  float: none;\\n  padding-left: 44px; /* LTR */\\n}\\n[dir=rtl] .minicolors-theme-bootstrap .minicolors-input {\\n  text-align: right;\\n  unicode-bidi: plaintext;\\n  padding-left: 12px;\\n  padding-right: 44px;\\n}\\n.minicolors-theme-bootstrap.minicolors-position-right .minicolors-input {\\n  padding-right: 44px; /* LTR */\\n  padding-left: 12px; /* LTR */\\n}\\n[dir=rtl] .minicolors-theme-bootstrap.minicolors-position-left .minicolors-input {\\n  padding-right: 12px;\\n  padding-left: 44px;\\n}\\n.minicolors-theme-bootstrap .minicolors-input.input-lg + .minicolors-swatch {\\n  top: 4px;\\n  left: 4px; /* LTR */\\n  width: 37px;\\n  height: 37px;\\n  border-radius: 5px;\\n}\\n[dir=rtl] .minicolors-theme-bootstrap .minicolors-input.input-lg + .minicolors-swatch {\\n  right: 4px;\\n}\\n.minicolors-theme-bootstrap .minicolors-input.input-sm + .minicolors-swatch {\\n  width: 24px;\\n  height: 24px;\\n}\\n.minicolors-theme-bootstrap .minicolors-input.input-xs + .minicolors-swatch {\\n  width: 18px;\\n  height: 18px;\\n}\\n.input-group .minicolors-theme-bootstrap:not(:first-child) .minicolors-input {\\n  border-top-left-radius: 0; /* LTR */\\n  border-bottom-left-radius: 0; /* LTR */\\n}\\n[dir=rtl] .input-group .minicolors-theme-bootstrap .minicolors-input {\\n  border-radius: 4px;\\n}\\n[dir=rtl] .input-group .minicolors-theme-bootstrap:not(:first-child) .minicolors-input {\\n  border-top-right-radius: 0;\\n  border-bottom-right-radius: 0;\\n}\\n[dir=rtl] .input-group .minicolors-theme-bootstrap:not(:last-child) .minicolors-input {\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n}\\n/* bootstrap input-group rtl override */\\n[dir=rtl] .input-group .form-control,\\n[dir=rtl] .input-group-addon,\\n[dir=rtl] .input-group-btn > .btn,\\n[dir=rtl] .input-group-btn > .btn-group > .btn,\\n[dir=rtl] .input-group-btn > .dropdown-toggle {\\n  border: 1px solid #ccc;\\n  border-radius: 4px;\\n}\\n[dir=rtl] .input-group .form-control:first-child,\\n[dir=rtl] .input-group-addon:first-child,\\n[dir=rtl] .input-group-btn:first-child > .btn,\\n[dir=rtl] .input-group-btn:first-child > .btn-group > .btn,\\n[dir=rtl] .input-group-btn:first-child > .dropdown-toggle,\\n[dir=rtl] .input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle),\\n[dir=rtl] .input-group-btn:last-child > .btn-group:not(:last-child) > .btn {\\n  border-top-left-radius: 0;\\n  border-bottom-left-radius: 0;\\n  border-left: 0;\\n}\\n[dir=rtl] .input-group .form-control:last-child,\\n[dir=rtl] .input-group-addon:last-child,\\n[dir=rtl] .input-group-btn:last-child > .btn,\\n[dir=rtl] .input-group-btn:last-child > .btn-group > .btn,\\n[dir=rtl] .input-group-btn:last-child > .dropdown-toggle,\\n[dir=rtl] .input-group-btn:first-child > .btn:not(:first-child),\\n[dir=rtl] .input-group-btn:first-child > .btn-group:not(:first-child) > .btn {\\n  border-top-right-radius: 0;\\n  border-bottom-right-radius: 0;\\n}\\n\\n/* Semantic Ui theme */\\n.minicolors-theme-semanticui .minicolors-swatch {\\n  top: 0;\\n  left: 0; /* LTR */\\n  padding: 18px;\\n}\\n[dir=rtl] .minicolors-theme-semanticui .minicolors-swatch {\\n  right: 0;\\n}\\n.minicolors-theme-semanticui input {\\n  text-indent: 30px;\\n}\\n\", \"\"]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./src/resources/write/jquery.minicolors.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/resources/write/write.css":
/*!*****************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/resources/write/write.css ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.i, \".write_form{padding:10px 20px;}\\n.title{font-size:21px;margin:15px 0;}\\n\\n.write_tit{font-size:15px;}\\n.write_tit,\\n\\n.write_cont{display:block;width:100%;padding:10px;border:1px solid black;box-sizing:border-box;margin-top:20px;}\\n.write_cont{min-height:15vh;}\\n.write_cont.ty_summary{min-height:10vh;}\\n.write_cont b{font-weight:bold;}\\n.write_cont li{padding-left:5px;word-break:break-all;}\\n.write_cont ul li:before{content:\\\"\\\";display:inline-block;width:10px;height:10px;border-radius:50%;background:black;margin-right:5px;}\\n.write_cont ol{list-style:decimal;margin-left:15px;}\\n\\n.btnarea{display:flex;align-items:center;justify-content: space-evenly;padding:10px;border:1px solid black;}\\n.btnarea + .btnarea{margin-top:-1px;}\\n.btnarea .btn{display:block;line-height:1;font-size:21px;color:#ff5b59;font-weight:bold;}\\n\\n.inserted_image{width:100px;height:100px;}\\n.inserted_image.on{max-width:100%;max-height:100%;width:auto;height:auto;position:fixed;top:0;left:0;right:0;bottom:0;margin:auto;overflow:auto;}\\n\\n.fontsize input{border:1px solid black; width:30px; margin-left:5px;}\\n.submit{display:block;margin:auto;border:1px solid black; border-radius:20px; padding: 10px 80px; margin: 50px auto;}\\n\\n.fact_link{display: block; width: 100%; min-height: 15vh; border:1px solid black;}\", \"\"]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzb3VyY2VzL3dyaXRlL3dyaXRlLmNzcz9hNzI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQixtQkFBTyxDQUFDLDJHQUFzRDtBQUN6RjtBQUNBLGNBQWMsUUFBUyxlQUFlLG1CQUFtQixTQUFTLGVBQWUsZUFBZSxlQUFlLGdCQUFnQiw2QkFBNkIsY0FBYyxXQUFXLGFBQWEsdUJBQXVCLHNCQUFzQixpQkFBaUIsY0FBYyxpQkFBaUIseUJBQXlCLGlCQUFpQixnQkFBZ0Isa0JBQWtCLGlCQUFpQixpQkFBaUIsc0JBQXNCLDJCQUEyQixhQUFhLHFCQUFxQixXQUFXLFlBQVksa0JBQWtCLGlCQUFpQixrQkFBa0IsaUJBQWlCLG1CQUFtQixrQkFBa0IsYUFBYSxhQUFhLG1CQUFtQiw4QkFBOEIsYUFBYSx3QkFBd0Isc0JBQXNCLGlCQUFpQixnQkFBZ0IsY0FBYyxjQUFjLGVBQWUsY0FBYyxrQkFBa0Isb0JBQW9CLFlBQVksY0FBYyxxQkFBcUIsZUFBZSxnQkFBZ0IsV0FBVyxZQUFZLGVBQWUsTUFBTSxPQUFPLFFBQVEsU0FBUyxZQUFZLGVBQWUsb0JBQW9CLHVCQUF1QixZQUFZLGtCQUFrQixVQUFVLGNBQWMsWUFBWSx1QkFBdUIsb0JBQW9CLG9CQUFvQixvQkFBb0IsZUFBZSxlQUFlLGFBQWEsa0JBQWtCLHlCQUF5QiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3JjL3Jlc291cmNlcy93cml0ZS93cml0ZS5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi53cml0ZV9mb3Jte3BhZGRpbmc6MTBweCAyMHB4O31cXG4udGl0bGV7Zm9udC1zaXplOjIxcHg7bWFyZ2luOjE1cHggMDt9XFxuXFxuLndyaXRlX3RpdHtmb250LXNpemU6MTVweDt9XFxuLndyaXRlX3RpdCxcXG5cXG4ud3JpdGVfY29udHtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCU7cGFkZGluZzoxMHB4O2JvcmRlcjoxcHggc29saWQgYmxhY2s7Ym94LXNpemluZzpib3JkZXItYm94O21hcmdpbi10b3A6MjBweDt9XFxuLndyaXRlX2NvbnR7bWluLWhlaWdodDoxNXZoO31cXG4ud3JpdGVfY29udC50eV9zdW1tYXJ5e21pbi1oZWlnaHQ6MTB2aDt9XFxuLndyaXRlX2NvbnQgYntmb250LXdlaWdodDpib2xkO31cXG4ud3JpdGVfY29udCBsaXtwYWRkaW5nLWxlZnQ6NXB4O3dvcmQtYnJlYWs6YnJlYWstYWxsO31cXG4ud3JpdGVfY29udCB1bCBsaTpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDoxMHB4O2hlaWdodDoxMHB4O2JvcmRlci1yYWRpdXM6NTAlO2JhY2tncm91bmQ6YmxhY2s7bWFyZ2luLXJpZ2h0OjVweDt9XFxuLndyaXRlX2NvbnQgb2x7bGlzdC1zdHlsZTpkZWNpbWFsO21hcmdpbi1sZWZ0OjE1cHg7fVxcblxcbi5idG5hcmVhe2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7cGFkZGluZzoxMHB4O2JvcmRlcjoxcHggc29saWQgYmxhY2s7fVxcbi5idG5hcmVhICsgLmJ0bmFyZWF7bWFyZ2luLXRvcDotMXB4O31cXG4uYnRuYXJlYSAuYnRue2Rpc3BsYXk6YmxvY2s7bGluZS1oZWlnaHQ6MTtmb250LXNpemU6MjFweDtjb2xvcjojZmY1YjU5O2ZvbnQtd2VpZ2h0OmJvbGQ7fVxcblxcbi5pbnNlcnRlZF9pbWFnZXt3aWR0aDoxMDBweDtoZWlnaHQ6MTAwcHg7fVxcbi5pbnNlcnRlZF9pbWFnZS5vbnttYXgtd2lkdGg6MTAwJTttYXgtaGVpZ2h0OjEwMCU7d2lkdGg6YXV0bztoZWlnaHQ6YXV0bztwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDttYXJnaW46YXV0bztvdmVyZmxvdzphdXRvO31cXG5cXG4uZm9udHNpemUgaW5wdXR7Ym9yZGVyOjFweCBzb2xpZCBibGFjazsgd2lkdGg6MzBweDsgbWFyZ2luLWxlZnQ6NXB4O31cXG4uc3VibWl0e2Rpc3BsYXk6YmxvY2s7bWFyZ2luOmF1dG87Ym9yZGVyOjFweCBzb2xpZCBibGFjazsgYm9yZGVyLXJhZGl1czoyMHB4OyBwYWRkaW5nOiAxMHB4IDgwcHg7IG1hcmdpbjogNTBweCBhdXRvO31cXG5cXG4uZmFjdF9saW5re2Rpc3BsYXk6IGJsb2NrOyB3aWR0aDogMTAwJTsgbWluLWhlaWdodDogMTV2aDsgYm9yZGVyOjFweCBzb2xpZCBibGFjazt9XCIsIFwiXCJdKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./src/resources/write/write.css\n");

/***/ }),

/***/ "./src/resources/js/constant.js":
/*!**************************************!*\
  !*** ./src/resources/js/constant.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst Constants = {\n  ID_TMPL_SLIDE: \"#slideTmpl\",\n  ID_TMPL_REPLY: \"#replyTmpl\",\n  ID_TMPL_BEST_REPLY: \"#bestReplyTmpl\",\n  ID_TMPL_MAIN_CARD: \"#cardTmpl\",\n  ID_TMPL_SUBREPLY: \"#subReplyTmpl\",\n  ID_TMPL_RECOMCOUNTTX: \"#recomCountTx\",\n  ID_TMPL_DETAILPAGE: \"#page_detail\",\n  ID_TMPL_DETAILPAGE_AFTER: \"#page_detail-after\",\n  URL_CREATE_COMMENT: `${\"/\"}writeComment`,\n  URL_CREATE_COMPLAIN: `${\"/\"}reportWriting`,\n  URL_CREATE_MEMBER: `${\"/\"}enroll`,\n  URL_CREATE_SESSION: `${\"/\"}login`,\n  URL_CREATE_POST: `${\"/\"}writePost`,\n  URL_UPDATE_VOTECOUNT: `${\"/\"}vote`,\n  URL_UPDATE_RECOMCOUNT: `${\"/\"}commentPreferUpdate`,\n  URL_READ_SLIDE_DATA: `${\"/\"}getDetailDtoList`,\n  URL_READ_DETAIL_DATA: `${\"/\"}getWritingDtlDto`,\n  URL_READ_MAIN_CARD_DATA: `${\"/\"}getPagingList`,\n  URL_READ_SEARCH_CARD_DATA: `${\"/\"}searchWrtingList`,\n  URL_READ_NICKNAME: `${\"/\"} + 'getNickname'`,\n  URL_READ_USERINFO: `${\"/\"}getUserInfo`,\n  URL_READ_COMMENT_LIST: `${\"/\"}getCommentDtoList`,\n  URL_READ_BESTCOMMENT_LIST: `${\"/\"}getBestCommentList`,\n  URL_REMOVE_SESSION: `${\"/\"}logout`,\n  URL_REMOVE_COMMENT: `${\"/\"}deleteComment`,\n  PAGE_NAME_SWIPE: \"swipe\",\n  PAGE_NAME_SEARCH: \"search\",\n  TYPE_COMMENT: '000',\n  TYPE_LOWCOMMENT: '111'\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Constants);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzb3VyY2VzL2pzL2NvbnN0YW50LmpzPzhiMWEiXSwibmFtZXMiOlsiQ29uc3RhbnRzIiwiSURfVE1QTF9TTElERSIsIklEX1RNUExfUkVQTFkiLCJJRF9UTVBMX0JFU1RfUkVQTFkiLCJJRF9UTVBMX01BSU5fQ0FSRCIsIklEX1RNUExfU1VCUkVQTFkiLCJJRF9UTVBMX1JFQ09NQ09VTlRUWCIsIklEX1RNUExfREVUQUlMUEFHRSIsIklEX1RNUExfREVUQUlMUEFHRV9BRlRFUiIsIlVSTF9DUkVBVEVfQ09NTUVOVCIsIlVSTF9CQVNFIiwiVVJMX0NSRUFURV9DT01QTEFJTiIsIlVSTF9DUkVBVEVfTUVNQkVSIiwiVVJMX0NSRUFURV9TRVNTSU9OIiwiVVJMX0NSRUFURV9QT1NUIiwiVVJMX1VQREFURV9WT1RFQ09VTlQiLCJVUkxfVVBEQVRFX1JFQ09NQ09VTlQiLCJVUkxfUkVBRF9TTElERV9EQVRBIiwiVVJMX1JFQURfREVUQUlMX0RBVEEiLCJVUkxfUkVBRF9NQUlOX0NBUkRfREFUQSIsIlVSTF9SRUFEX1NFQVJDSF9DQVJEX0RBVEEiLCJVUkxfUkVBRF9OSUNLTkFNRSIsIlVSTF9SRUFEX1VTRVJJTkZPIiwiVVJMX1JFQURfQ09NTUVOVF9MSVNUIiwiVVJMX1JFQURfQkVTVENPTU1FTlRfTElTVCIsIlVSTF9SRU1PVkVfU0VTU0lPTiIsIlVSTF9SRU1PVkVfQ09NTUVOVCIsIlBBR0VfTkFNRV9TV0lQRSIsIlBBR0VfTkFNRV9TRUFSQ0giLCJUWVBFX0NPTU1FTlQiLCJUWVBFX0xPV0NPTU1FTlQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBTUEsU0FBUyxHQUFHO0FBQ2hCQyxlQUFhLEVBQUUsWUFEQztBQUVoQkMsZUFBYSxFQUFFLFlBRkM7QUFHaEJDLG9CQUFrQixFQUFFLGdCQUhKO0FBSWhCQyxtQkFBaUIsRUFBRSxXQUpIO0FBS2hCQyxrQkFBZ0IsRUFBRSxlQUxGO0FBTWhCQyxzQkFBb0IsRUFBRSxlQU5OO0FBT2hCQyxvQkFBa0IsRUFBRSxjQVBKO0FBUWhCQywwQkFBd0IsRUFBRSxvQkFSVjtBQVVoQkMsb0JBQWtCLEVBQUcsR0FBRUMsR0FBUyxjQVZoQjtBQVdoQkMscUJBQW1CLEVBQUcsR0FBRUQsR0FBUyxlQVhqQjtBQVloQkUsbUJBQWlCLEVBQUcsR0FBRUYsR0FBUyxRQVpmO0FBYWhCRyxvQkFBa0IsRUFBRyxHQUFFSCxHQUFTLE9BYmhCO0FBY2hCSSxpQkFBZSxFQUFHLEdBQUVKLEdBQVMsV0FkYjtBQWdCaEJLLHNCQUFvQixFQUFHLEdBQUVMLEdBQVMsTUFoQmxCO0FBaUJoQk0sdUJBQXFCLEVBQUcsR0FBRU4sR0FBUyxxQkFqQm5CO0FBbUJoQk8scUJBQW1CLEVBQUcsR0FBRVAsR0FBUyxrQkFuQmpCO0FBb0JoQlEsc0JBQW9CLEVBQUcsR0FBRVIsR0FBUyxrQkFwQmxCO0FBcUJoQlMseUJBQXVCLEVBQUcsR0FBRVQsR0FBUyxlQXJCckI7QUFzQmhCVSwyQkFBeUIsRUFBRyxHQUFFVixHQUFTLGtCQXRCdkI7QUF1QmhCVyxtQkFBaUIsRUFBRyxHQUFFWCxHQUFTLGtCQXZCZjtBQXdCaEJZLG1CQUFpQixFQUFHLEdBQUVaLEdBQVMsYUF4QmY7QUF5QmhCYSx1QkFBcUIsRUFBRyxHQUFFYixHQUFTLG1CQXpCbkI7QUEwQmhCYywyQkFBeUIsRUFBRyxHQUFFZCxHQUFTLG9CQTFCdkI7QUE0QmhCZSxvQkFBa0IsRUFBRyxHQUFFZixHQUFTLFFBNUJoQjtBQTZCaEJnQixvQkFBa0IsRUFBRyxHQUFFaEIsR0FBUyxlQTdCaEI7QUErQmhCaUIsaUJBQWUsRUFBRSxPQS9CRDtBQWdDaEJDLGtCQUFnQixFQUFFLFFBaENGO0FBa0NoQkMsY0FBWSxFQUFFLEtBbENFO0FBbUNoQkMsaUJBQWUsRUFBRTtBQW5DRCxDQUFsQjtBQXNDZTlCLHdFQUFmIiwiZmlsZSI6Ii4vc3JjL3Jlc291cmNlcy9qcy9jb25zdGFudC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENvbnN0YW50cyA9IHtcbiAgSURfVE1QTF9TTElERTogXCIjc2xpZGVUbXBsXCIsXG4gIElEX1RNUExfUkVQTFk6IFwiI3JlcGx5VG1wbFwiLFxuICBJRF9UTVBMX0JFU1RfUkVQTFk6IFwiI2Jlc3RSZXBseVRtcGxcIixcbiAgSURfVE1QTF9NQUlOX0NBUkQ6IFwiI2NhcmRUbXBsXCIsXG4gIElEX1RNUExfU1VCUkVQTFk6IFwiI3N1YlJlcGx5VG1wbFwiLFxuICBJRF9UTVBMX1JFQ09NQ09VTlRUWDogXCIjcmVjb21Db3VudFR4XCIsXG4gIElEX1RNUExfREVUQUlMUEFHRTogXCIjcGFnZV9kZXRhaWxcIixcbiAgSURfVE1QTF9ERVRBSUxQQUdFX0FGVEVSOiBcIiNwYWdlX2RldGFpbC1hZnRlclwiLFxuXG4gIFVSTF9DUkVBVEVfQ09NTUVOVDogYCR7VVJMX0JBU0V9d3JpdGVDb21tZW50YCxcbiAgVVJMX0NSRUFURV9DT01QTEFJTjogYCR7VVJMX0JBU0V9cmVwb3J0V3JpdGluZ2AsXG4gIFVSTF9DUkVBVEVfTUVNQkVSOiBgJHtVUkxfQkFTRX1lbnJvbGxgLFxuICBVUkxfQ1JFQVRFX1NFU1NJT046IGAke1VSTF9CQVNFfWxvZ2luYCxcbiAgVVJMX0NSRUFURV9QT1NUOiBgJHtVUkxfQkFTRX13cml0ZVBvc3RgLFxuXG4gIFVSTF9VUERBVEVfVk9URUNPVU5UOiBgJHtVUkxfQkFTRX12b3RlYCxcbiAgVVJMX1VQREFURV9SRUNPTUNPVU5UOiBgJHtVUkxfQkFTRX1jb21tZW50UHJlZmVyVXBkYXRlYCxcblxuICBVUkxfUkVBRF9TTElERV9EQVRBOiBgJHtVUkxfQkFTRX1nZXREZXRhaWxEdG9MaXN0YCxcbiAgVVJMX1JFQURfREVUQUlMX0RBVEE6IGAke1VSTF9CQVNFfWdldFdyaXRpbmdEdGxEdG9gLFxuICBVUkxfUkVBRF9NQUlOX0NBUkRfREFUQTogYCR7VVJMX0JBU0V9Z2V0UGFnaW5nTGlzdGAsXG4gIFVSTF9SRUFEX1NFQVJDSF9DQVJEX0RBVEE6IGAke1VSTF9CQVNFfXNlYXJjaFdydGluZ0xpc3RgLFxuICBVUkxfUkVBRF9OSUNLTkFNRTogYCR7VVJMX0JBU0V9ICsgJ2dldE5pY2tuYW1lJ2AsXG4gIFVSTF9SRUFEX1VTRVJJTkZPOiBgJHtVUkxfQkFTRX1nZXRVc2VySW5mb2AsXG4gIFVSTF9SRUFEX0NPTU1FTlRfTElTVDogYCR7VVJMX0JBU0V9Z2V0Q29tbWVudER0b0xpc3RgLFxuICBVUkxfUkVBRF9CRVNUQ09NTUVOVF9MSVNUOiBgJHtVUkxfQkFTRX1nZXRCZXN0Q29tbWVudExpc3RgLFxuXG4gIFVSTF9SRU1PVkVfU0VTU0lPTjogYCR7VVJMX0JBU0V9bG9nb3V0YCxcbiAgVVJMX1JFTU9WRV9DT01NRU5UOiBgJHtVUkxfQkFTRX1kZWxldGVDb21tZW50YCxcblxuICBQQUdFX05BTUVfU1dJUEU6IFwic3dpcGVcIixcbiAgUEFHRV9OQU1FX1NFQVJDSDogXCJzZWFyY2hcIixcblxuICBUWVBFX0NPTU1FTlQ6ICcwMDAnLFxuICBUWVBFX0xPV0NPTU1FTlQ6ICcxMTEnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29uc3RhbnRzOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/resources/js/constant.js\n");

/***/ }),

/***/ "./src/resources/styles/_reset.scss":
/*!******************************************!*\
  !*** ./src/resources/styles/_reset.scss ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/src??ref--4-2!../../../node_modules/sass-loader/dist/cjs.js!./_reset.scss */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/resources/styles/_reset.scss\");\n\nif (typeof content === 'string') {\n  content = [[module.i, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = __webpack_require__(/*! ../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n\nif (true) {\n  if (!content.locals) {\n    module.hot.accept(\n      /*! !../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/src??ref--4-2!../../../node_modules/sass-loader/dist/cjs.js!./_reset.scss */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/resources/styles/_reset.scss\",\n      function () {\n        var newContent = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/postcss-loader/src??ref--4-2!../../../node_modules/sass-loader/dist/cjs.js!./_reset.scss */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js!./src/resources/styles/_reset.scss\");\n\n        if (typeof newContent === 'string') {\n          newContent = [[module.i, newContent, '']];\n        }\n        \n        update(newContent);\n      }\n    )\n  }\n\n  module.hot.dispose(function() { \n    update();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzb3VyY2VzL3N0eWxlcy9fcmVzZXQuc2Nzcz9iNDA5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyxpVUFBd0s7O0FBRTlMO0FBQ0EsY0FBYyxRQUFTO0FBQ3ZCOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLHlKQUE4RTs7QUFFbkc7QUFDQTtBQUNBOztBQUVBLElBQUksSUFBVTtBQUNkO0FBQ0E7QUFDQSxNQUFNLGlVQUF3SztBQUM5SztBQUNBLHlCQUF5QixtQkFBTyxDQUFDLGlVQUF3Szs7QUFFek07QUFDQSx5QkFBeUIsUUFBUztBQUNsQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQztBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6Ii4vc3JjL3Jlc291cmNlcy9zdHlsZXMvX3Jlc2V0LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL19yZXNldC5zY3NzXCIpO1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgaWYgKCFjb250ZW50LmxvY2Fscykge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFxuICAgICAgXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNC0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL19yZXNldC5zY3NzXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS00LTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vX3Jlc2V0LnNjc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgXG4gICAgdXBkYXRlKCk7XG4gIH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/resources/styles/_reset.scss\n");

/***/ }),

/***/ "./src/resources/write/index.js":
/*!**************************************!*\
  !*** ./src/resources/write/index.js ***!
  \**************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _squire__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./squire */ \"./src/resources/write/squire.js\");\n/* harmony import */ var _minicolors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./minicolors */ \"./src/resources/write/minicolors.js\");\n/* harmony import */ var _write__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./write */ \"./src/resources/write/write.js\");\n/* harmony import */ var _styles_reset_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/_reset.scss */ \"./src/resources/styles/_reset.scss\");\n/* harmony import */ var _styles_reset_scss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_styles_reset_scss__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _write_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./write.css */ \"./src/resources/write/write.css\");\n/* harmony import */ var _write_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_write_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _jquery_minicolors_css__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./jquery.minicolors.css */ \"./src/resources/write/jquery.minicolors.css\");\n/* harmony import */ var _jquery_minicolors_css__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_jquery_minicolors_css__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzb3VyY2VzL3dyaXRlL2luZGV4LmpzPzdhZDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFHQTtBQUNBIiwiZmlsZSI6Ii4vc3JjL3Jlc291cmNlcy93cml0ZS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9zcXVpcmUnO1xuaW1wb3J0ICcuL21pbmljb2xvcnMnO1xuaW1wb3J0ICcuL3dyaXRlJztcblxuIFxuaW1wb3J0ICcuLi9zdHlsZXMvX3Jlc2V0LnNjc3MnO1xuaW1wb3J0ICcuL3dyaXRlLmNzcyc7XG5pbXBvcnQgJy4vanF1ZXJ5Lm1pbmljb2xvcnMuY3NzJzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/resources/write/index.js\n");

/***/ }),

/***/ "./src/resources/write/jquery.minicolors.css":
/*!***************************************************!*\
  !*** ./src/resources/write/jquery.minicolors.css ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!./jquery.minicolors.css */ \"./node_modules/css-loader/dist/cjs.js!./src/resources/write/jquery.minicolors.css\");\n\nif (typeof content === 'string') {\n  content = [[module.i, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = __webpack_require__(/*! ../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n\nif (true) {\n  if (!content.locals) {\n    module.hot.accept(\n      /*! !../../../node_modules/css-loader/dist/cjs.js!./jquery.minicolors.css */ \"./node_modules/css-loader/dist/cjs.js!./src/resources/write/jquery.minicolors.css\",\n      function () {\n        var newContent = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!./jquery.minicolors.css */ \"./node_modules/css-loader/dist/cjs.js!./src/resources/write/jquery.minicolors.css\");\n\n        if (typeof newContent === 'string') {\n          newContent = [[module.i, newContent, '']];\n        }\n        \n        update(newContent);\n      }\n    )\n  }\n\n  module.hot.dispose(function() { \n    update();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzb3VyY2VzL3dyaXRlL2pxdWVyeS5taW5pY29sb3JzLmNzcz81NDhkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyxnS0FBd0U7O0FBRTlGO0FBQ0EsY0FBYyxRQUFTO0FBQ3ZCOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLHlKQUE4RTs7QUFFbkc7QUFDQTtBQUNBOztBQUVBLElBQUksSUFBVTtBQUNkO0FBQ0E7QUFDQSxNQUFNLGdLQUF3RTtBQUM5RTtBQUNBLHlCQUF5QixtQkFBTyxDQUFDLGdLQUF3RTs7QUFFekc7QUFDQSx5QkFBeUIsUUFBUztBQUNsQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQztBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6Ii4vc3JjL3Jlc291cmNlcy93cml0ZS9qcXVlcnkubWluaWNvbG9ycy5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vanF1ZXJ5Lm1pbmljb2xvcnMuY3NzXCIpO1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgaWYgKCFjb250ZW50LmxvY2Fscykge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFxuICAgICAgXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vanF1ZXJ5Lm1pbmljb2xvcnMuY3NzXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9qcXVlcnkubWluaWNvbG9ycy5jc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgXG4gICAgdXBkYXRlKCk7XG4gIH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/resources/write/jquery.minicolors.css\n");

/***/ }),

/***/ "./src/resources/write/jquery.minicolors.png":
/*!***************************************************!*\
  !*** ./src/resources/write/jquery.minicolors.png ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"img/jquery.minicolors.png\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzb3VyY2VzL3dyaXRlL2pxdWVyeS5taW5pY29sb3JzLnBuZz8xNGMxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiLi9zcmMvcmVzb3VyY2VzL3dyaXRlL2pxdWVyeS5taW5pY29sb3JzLnBuZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9qcXVlcnkubWluaWNvbG9ycy5wbmdcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/resources/write/jquery.minicolors.png\n");

/***/ }),

/***/ "./src/resources/write/minicolors.js":
/*!*******************************************!*\
  !*** ./src/resources/write/minicolors.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {//\n// jQuery MiniColors: A tiny color picker built on jQuery\n//\n// Developed by Cory LaViska for A Beautiful Site, LLC\n//\n// Licensed under the MIT license: http://opensource.org/licenses/MIT\n//\nconst minicolors = function (factory) {\n  if (typeof define === 'function' && __webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // Node/CommonJS\n    module.exports = factory(__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"));\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n}(function ($) {\n  'use strict'; // Defaults\n\n  $.minicolors = {\n    defaults: {\n      animationSpeed: 50,\n      animationEasing: 'swing',\n      change: null,\n      changeDelay: 0,\n      control: 'hue',\n      defaultValue: '',\n      format: 'hex',\n      hide: null,\n      hideSpeed: 100,\n      inline: false,\n      keywords: '',\n      letterCase: 'lowercase',\n      opacity: false,\n      position: 'bottom',\n      show: null,\n      showSpeed: 100,\n      theme: 'default',\n      swatches: []\n    }\n  }; // Public methods\n\n  $.extend($.fn, {\n    minicolors: function (method, data) {\n      switch (method) {\n        // Destroy the control\n        case 'destroy':\n          $(this).each(function () {\n            destroy($(this));\n          });\n          return $(this);\n        // Hide the color picker\n\n        case 'hide':\n          hide();\n          return $(this);\n        // Get/set opacity\n\n        case 'opacity':\n          // Getter\n          if (data === undefined) {\n            // Getter\n            return $(this).attr('data-opacity');\n          } else {\n            // Setter\n            $(this).each(function () {\n              updateFromInput($(this).attr('data-opacity', data));\n            });\n          }\n\n          return $(this);\n        // Get an RGB(A) object based on the current color/opacity\n\n        case 'rgbObject':\n          return rgbObject($(this), method === 'rgbaObject');\n        // Get an RGB(A) string based on the current color/opacity\n\n        case 'rgbString':\n        case 'rgbaString':\n          return rgbString($(this), method === 'rgbaString');\n        // Get/set settings on the fly\n\n        case 'settings':\n          if (data === undefined) {\n            return $(this).data('minicolors-settings');\n          } else {\n            // Setter\n            $(this).each(function () {\n              var settings = $(this).data('minicolors-settings') || {};\n              destroy($(this));\n              $(this).minicolors($.extend(true, settings, data));\n            });\n          }\n\n          return $(this);\n        // Show the color picker\n\n        case 'show':\n          show($(this).eq(0));\n          return $(this);\n        // Get/set the hex color value\n\n        case 'value':\n          if (data === undefined) {\n            // Getter\n            return $(this).val();\n          } else {\n            // Setter\n            $(this).each(function () {\n              if (typeof data === 'object' && data !== null) {\n                if (data.opacity !== undefined) {\n                  $(this).attr('data-opacity', keepWithin(data.opacity, 0, 1));\n                }\n\n                if (data.color) {\n                  $(this).val(data.color);\n                }\n              } else {\n                $(this).val(data);\n              }\n\n              updateFromInput($(this));\n            });\n          }\n\n          return $(this);\n        // Initializes the control\n\n        default:\n          if (method !== 'create') data = method;\n          $(this).each(function () {\n            init($(this), data);\n          });\n          return $(this);\n      }\n    }\n  }); // Initialize input elements\n\n  function init(input, settings) {\n    var minicolors = $('<div class=\"minicolors\" />');\n    var defaults = $.minicolors.defaults;\n    var name;\n    var size;\n    var swatches;\n    var swatch;\n    var swatchString;\n    var panel;\n    var i; // Do nothing if already initialized\n\n    if (input.data('minicolors-initialized')) return; // Handle settings\n\n    settings = $.extend(true, {}, defaults, settings); // The wrapper\n\n    minicolors.addClass('minicolors-theme-' + settings.theme).toggleClass('minicolors-with-opacity', settings.opacity); // Custom positioning\n\n    if (settings.position !== undefined) {\n      $.each(settings.position.split(' '), function () {\n        minicolors.addClass('minicolors-position-' + this);\n      });\n    } // Input size\n\n\n    if (settings.format === 'rgb') {\n      size = settings.opacity ? '25' : '20';\n    } else {\n      size = settings.keywords ? '11' : '7';\n    } // The input\n\n\n    input.addClass('minicolors-input').data('minicolors-initialized', false).data('minicolors-settings', settings).prop('size', size).wrap(minicolors).after('<div class=\"minicolors-panel minicolors-slider-' + settings.control + '\">' + '<div class=\"minicolors-slider minicolors-sprite\">' + '<div class=\"minicolors-picker\"></div>' + '</div>' + '<div class=\"minicolors-opacity-slider minicolors-sprite\">' + '<div class=\"minicolors-picker\"></div>' + '</div>' + '<div class=\"minicolors-grid minicolors-sprite\">' + '<div class=\"minicolors-grid-inner\"></div>' + '<div class=\"minicolors-picker\"><div></div></div>' + '</div>' + '</div>'); // The swatch\n\n    if (!settings.inline) {\n      input.after('<span class=\"minicolors-swatch minicolors-sprite minicolors-input-swatch\"><span class=\"minicolors-swatch-color\"></span></span>');\n      input.next('.minicolors-input-swatch').on('click', function (event) {\n        event.preventDefault();\n        input.focus();\n      });\n    } // Prevent text selection in IE\n\n\n    panel = input.parent().find('.minicolors-panel');\n    panel.on('selectstart', function () {\n      return false;\n    }).end(); // Swatches\n\n    if (settings.swatches && settings.swatches.length !== 0) {\n      panel.addClass('minicolors-with-swatches');\n      swatches = $('<ul class=\"minicolors-swatches\"></ul>').appendTo(panel);\n\n      for (i = 0; i < settings.swatches.length; ++i) {\n        // allow for custom objects as swatches\n        if ($.type(settings.swatches[i]) === 'object') {\n          name = settings.swatches[i].name;\n          swatch = settings.swatches[i].color;\n        } else {\n          name = '';\n          swatch = settings.swatches[i];\n        }\n\n        swatchString = swatch;\n        swatch = isRgb(swatch) ? parseRgb(swatch, true) : hex2rgb(parseHex(swatch, true));\n        $('<li class=\"minicolors-swatch minicolors-sprite\"><span class=\"minicolors-swatch-color\" title=\"' + name + '\"></span></li>').appendTo(swatches).data('swatch-color', swatchString).find('.minicolors-swatch-color').css({\n          backgroundColor: rgb2hex(swatch),\n          opacity: swatch.a\n        });\n        settings.swatches[i] = swatch;\n      }\n    } // Inline controls\n\n\n    if (settings.inline) input.parent().addClass('minicolors-inline');\n    updateFromInput(input, false);\n    input.data('minicolors-initialized', true);\n  } // Returns the input back to its original state\n\n\n  function destroy(input) {\n    var minicolors = input.parent(); // Revert the input element\n\n    input.removeData('minicolors-initialized').removeData('minicolors-settings').removeProp('size').removeClass('minicolors-input'); // Remove the wrap and destroy whatever remains\n\n    minicolors.before(input).remove();\n  } // Shows the specified dropdown panel\n\n\n  function show(input) {\n    var minicolors = input.parent();\n    var panel = minicolors.find('.minicolors-panel');\n    var settings = input.data('minicolors-settings'); // Do nothing if uninitialized, disabled, inline, or already open\n\n    if (!input.data('minicolors-initialized') || input.prop('disabled') || minicolors.hasClass('minicolors-inline') || minicolors.hasClass('minicolors-focus')) return;\n    hide();\n    minicolors.addClass('minicolors-focus');\n\n    if (panel.animate) {\n      panel.stop(true, true).fadeIn(settings.showSpeed, function () {\n        if (settings.show) settings.show.call(input.get(0));\n      });\n    } else {\n      panel.show();\n      if (settings.show) settings.show.call(input.get(0));\n    }\n  } // Hides all dropdown panels\n\n\n  function hide() {\n    $('.minicolors-focus').each(function () {\n      var minicolors = $(this);\n      var input = minicolors.find('.minicolors-input');\n      var panel = minicolors.find('.minicolors-panel');\n      var settings = input.data('minicolors-settings');\n\n      if (panel.animate) {\n        panel.fadeOut(settings.hideSpeed, function () {\n          if (settings.hide) settings.hide.call(input.get(0));\n          minicolors.removeClass('minicolors-focus');\n        });\n      } else {\n        panel.hide();\n        if (settings.hide) settings.hide.call(input.get(0));\n        minicolors.removeClass('minicolors-focus');\n      }\n    });\n  } // Moves the selected picker\n\n\n  function move(target, event, animate) {\n    var input = target.parents('.minicolors').find('.minicolors-input');\n    var settings = input.data('minicolors-settings');\n    var picker = target.find('[class$=-picker]');\n    var offsetX = target.offset().left;\n    var offsetY = target.offset().top;\n    var x = Math.round(event.pageX - offsetX);\n    var y = Math.round(event.pageY - offsetY);\n    var duration = animate ? settings.animationSpeed : 0;\n    var wx, wy, r, phi, styles; // Touch support\n\n    if (event.originalEvent.changedTouches) {\n      x = event.originalEvent.changedTouches[0].pageX - offsetX;\n      y = event.originalEvent.changedTouches[0].pageY - offsetY;\n    } // Constrain picker to its container\n\n\n    if (x < 0) x = 0;\n    if (y < 0) y = 0;\n    if (x > target.width()) x = target.width();\n    if (y > target.height()) y = target.height(); // Constrain color wheel values to the wheel\n\n    if (target.parent().is('.minicolors-slider-wheel') && picker.parent().is('.minicolors-grid')) {\n      wx = 75 - x;\n      wy = 75 - y;\n      r = Math.sqrt(wx * wx + wy * wy);\n      phi = Math.atan2(wy, wx);\n      if (phi < 0) phi += Math.PI * 2;\n\n      if (r > 75) {\n        r = 75;\n        x = 75 - 75 * Math.cos(phi);\n        y = 75 - 75 * Math.sin(phi);\n      }\n\n      x = Math.round(x);\n      y = Math.round(y);\n    } // Move the picker\n\n\n    styles = {\n      top: y + 'px'\n    };\n\n    if (target.is('.minicolors-grid')) {\n      styles.left = x + 'px';\n    }\n\n    if (picker.animate) {\n      picker.stop(true).animate(styles, duration, settings.animationEasing, function () {\n        updateFromControl(input, target);\n      });\n    } else {\n      picker.css(styles);\n      updateFromControl(input, target);\n    }\n  } // Sets the input based on the color picker values\n\n\n  function updateFromControl(input, target) {\n    function getCoords(picker, container) {\n      var left, top;\n      if (!picker.length || !container) return null;\n      left = picker.offset().left;\n      top = picker.offset().top;\n      return {\n        x: left - container.offset().left + picker.outerWidth() / 2,\n        y: top - container.offset().top + picker.outerHeight() / 2\n      };\n    }\n\n    var hue, saturation, brightness, x, y, r, phi;\n    var hex = input.val();\n    var opacity = input.attr('data-opacity'); // Helpful references\n\n    var minicolors = input.parent();\n    var settings = input.data('minicolors-settings');\n    var swatch = minicolors.find('.minicolors-input-swatch'); // Panel objects\n\n    var grid = minicolors.find('.minicolors-grid');\n    var slider = minicolors.find('.minicolors-slider');\n    var opacitySlider = minicolors.find('.minicolors-opacity-slider'); // Picker objects\n\n    var gridPicker = grid.find('[class$=-picker]');\n    var sliderPicker = slider.find('[class$=-picker]');\n    var opacityPicker = opacitySlider.find('[class$=-picker]'); // Picker positions\n\n    var gridPos = getCoords(gridPicker, grid);\n    var sliderPos = getCoords(sliderPicker, slider);\n    var opacityPos = getCoords(opacityPicker, opacitySlider); // Handle colors\n\n    if (target.is('.minicolors-grid, .minicolors-slider, .minicolors-opacity-slider')) {\n      // Determine HSB values\n      switch (settings.control) {\n        case 'wheel':\n          // Calculate hue, saturation, and brightness\n          x = grid.width() / 2 - gridPos.x;\n          y = grid.height() / 2 - gridPos.y;\n          r = Math.sqrt(x * x + y * y);\n          phi = Math.atan2(y, x);\n          if (phi < 0) phi += Math.PI * 2;\n\n          if (r > 75) {\n            r = 75;\n            gridPos.x = 69 - 75 * Math.cos(phi);\n            gridPos.y = 69 - 75 * Math.sin(phi);\n          }\n\n          saturation = keepWithin(r / 0.75, 0, 100);\n          hue = keepWithin(phi * 180 / Math.PI, 0, 360);\n          brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);\n          hex = hsb2hex({\n            h: hue,\n            s: saturation,\n            b: brightness\n          }); // Update UI\n\n          slider.css('backgroundColor', hsb2hex({\n            h: hue,\n            s: saturation,\n            b: 100\n          }));\n          break;\n\n        case 'saturation':\n          // Calculate hue, saturation, and brightness\n          hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);\n          saturation = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);\n          brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);\n          hex = hsb2hex({\n            h: hue,\n            s: saturation,\n            b: brightness\n          }); // Update UI\n\n          slider.css('backgroundColor', hsb2hex({\n            h: hue,\n            s: 100,\n            b: brightness\n          }));\n          minicolors.find('.minicolors-grid-inner').css('opacity', saturation / 100);\n          break;\n\n        case 'brightness':\n          // Calculate hue, saturation, and brightness\n          hue = keepWithin(parseInt(gridPos.x * (360 / grid.width()), 10), 0, 360);\n          saturation = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);\n          brightness = keepWithin(100 - Math.floor(sliderPos.y * (100 / slider.height())), 0, 100);\n          hex = hsb2hex({\n            h: hue,\n            s: saturation,\n            b: brightness\n          }); // Update UI\n\n          slider.css('backgroundColor', hsb2hex({\n            h: hue,\n            s: saturation,\n            b: 100\n          }));\n          minicolors.find('.minicolors-grid-inner').css('opacity', 1 - brightness / 100);\n          break;\n\n        default:\n          // Calculate hue, saturation, and brightness\n          hue = keepWithin(360 - parseInt(sliderPos.y * (360 / slider.height()), 10), 0, 360);\n          saturation = keepWithin(Math.floor(gridPos.x * (100 / grid.width())), 0, 100);\n          brightness = keepWithin(100 - Math.floor(gridPos.y * (100 / grid.height())), 0, 100);\n          hex = hsb2hex({\n            h: hue,\n            s: saturation,\n            b: brightness\n          }); // Update UI\n\n          grid.css('backgroundColor', hsb2hex({\n            h: hue,\n            s: 100,\n            b: 100\n          }));\n          break;\n      } // Handle opacity\n\n\n      if (settings.opacity) {\n        opacity = parseFloat(1 - opacityPos.y / opacitySlider.height()).toFixed(2);\n      } else {\n        opacity = 1;\n      }\n\n      updateInput(input, hex, opacity);\n    } else {\n      // Set swatch color\n      swatch.find('span').css({\n        backgroundColor: hex,\n        opacity: opacity\n      }); // Handle change event\n\n      doChange(input, hex, opacity);\n    }\n  } // Sets the value of the input and does the appropriate conversions\n  // to respect settings, also updates the swatch\n\n\n  function updateInput(input, value, opacity) {\n    var rgb; // Helpful references\n\n    var minicolors = input.parent();\n    var settings = input.data('minicolors-settings');\n    var swatch = minicolors.find('.minicolors-input-swatch');\n    if (settings.opacity) input.attr('data-opacity', opacity); // Set color string\n\n    if (settings.format === 'rgb') {\n      // Returns RGB(A) string\n      // Checks for input format and does the conversion\n      if (isRgb(value)) {\n        rgb = parseRgb(value, true);\n      } else {\n        rgb = hex2rgb(parseHex(value, true));\n      }\n\n      opacity = input.attr('data-opacity') === '' ? 1 : keepWithin(parseFloat(input.attr('data-opacity')).toFixed(2), 0, 1);\n      if (isNaN(opacity) || !settings.opacity) opacity = 1;\n\n      if (input.minicolors('rgbObject').a <= 1 && rgb && settings.opacity) {\n        // Set RGBA string if alpha\n        value = 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + parseFloat(opacity) + ')';\n      } else {\n        // Set RGB string (alpha = 1)\n        value = 'rgb(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ')';\n      }\n    } else {\n      // Returns hex color\n      // Checks for input format and does the conversion\n      if (isRgb(value)) {\n        value = rgbString2hex(value);\n      }\n\n      value = convertCase(value, settings.letterCase);\n    } // Update value from picker\n\n\n    input.val(value); // Set swatch color\n\n    swatch.find('span').css({\n      backgroundColor: value,\n      opacity: opacity\n    }); // Handle change event\n\n    doChange(input, value, opacity);\n  } // Sets the color picker values from the input\n\n\n  function updateFromInput(input, preserveInputValue) {\n    var hex, hsb, opacity, keywords, alpha, value, x, y, r, phi; // Helpful references\n\n    var minicolors = input.parent();\n    var settings = input.data('minicolors-settings');\n    var swatch = minicolors.find('.minicolors-input-swatch'); // Panel objects\n\n    var grid = minicolors.find('.minicolors-grid');\n    var slider = minicolors.find('.minicolors-slider');\n    var opacitySlider = minicolors.find('.minicolors-opacity-slider'); // Picker objects\n\n    var gridPicker = grid.find('[class$=-picker]');\n    var sliderPicker = slider.find('[class$=-picker]');\n    var opacityPicker = opacitySlider.find('[class$=-picker]'); // Determine hex/HSB values\n\n    if (isRgb(input.val())) {\n      // If input value is a rgb(a) string, convert it to hex color and update opacity\n      hex = rgbString2hex(input.val());\n      alpha = keepWithin(parseFloat(getAlpha(input.val())).toFixed(2), 0, 1);\n\n      if (alpha) {\n        input.attr('data-opacity', alpha);\n      }\n    } else {\n      hex = convertCase(parseHex(input.val(), true), settings.letterCase);\n    }\n\n    if (!hex) {\n      hex = convertCase(parseInput(settings.defaultValue, true), settings.letterCase);\n    }\n\n    hsb = hex2hsb(hex); // Get array of lowercase keywords\n\n    keywords = !settings.keywords ? [] : $.map(settings.keywords.split(','), function (a) {\n      return $.trim(a.toLowerCase());\n    }); // Set color string\n\n    if (input.val() !== '' && $.inArray(input.val().toLowerCase(), keywords) > -1) {\n      value = convertCase(input.val());\n    } else {\n      value = isRgb(input.val()) ? parseRgb(input.val()) : hex;\n    } // Update input value\n\n\n    if (!preserveInputValue) input.val(value); // Determine opacity value\n\n    if (settings.opacity) {\n      // Get from data-opacity attribute and keep within 0-1 range\n      opacity = input.attr('data-opacity') === '' ? 1 : keepWithin(parseFloat(input.attr('data-opacity')).toFixed(2), 0, 1);\n      if (isNaN(opacity)) opacity = 1;\n      input.attr('data-opacity', opacity);\n      swatch.find('span').css('opacity', opacity); // Set opacity picker position\n\n      y = keepWithin(opacitySlider.height() - opacitySlider.height() * opacity, 0, opacitySlider.height());\n      opacityPicker.css('top', y + 'px');\n    } // Set opacity to zero if input value is transparent\n\n\n    if (input.val().toLowerCase() === 'transparent') {\n      swatch.find('span').css('opacity', 0);\n    } // Update swatch\n\n\n    swatch.find('span').css('backgroundColor', hex); // Determine picker locations\n\n    switch (settings.control) {\n      case 'wheel':\n        // Set grid position\n        r = keepWithin(Math.ceil(hsb.s * 0.75), 0, grid.height() / 2);\n        phi = hsb.h * Math.PI / 180;\n        x = keepWithin(75 - Math.cos(phi) * r, 0, grid.width());\n        y = keepWithin(75 - Math.sin(phi) * r, 0, grid.height());\n        gridPicker.css({\n          top: y + 'px',\n          left: x + 'px'\n        }); // Set slider position\n\n        y = 150 - hsb.b / (100 / grid.height());\n        if (hex === '') y = 0;\n        sliderPicker.css('top', y + 'px'); // Update panel color\n\n        slider.css('backgroundColor', hsb2hex({\n          h: hsb.h,\n          s: hsb.s,\n          b: 100\n        }));\n        break;\n\n      case 'saturation':\n        // Set grid position\n        x = keepWithin(5 * hsb.h / 12, 0, 150);\n        y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());\n        gridPicker.css({\n          top: y + 'px',\n          left: x + 'px'\n        }); // Set slider position\n\n        y = keepWithin(slider.height() - hsb.s * (slider.height() / 100), 0, slider.height());\n        sliderPicker.css('top', y + 'px'); // Update UI\n\n        slider.css('backgroundColor', hsb2hex({\n          h: hsb.h,\n          s: 100,\n          b: hsb.b\n        }));\n        minicolors.find('.minicolors-grid-inner').css('opacity', hsb.s / 100);\n        break;\n\n      case 'brightness':\n        // Set grid position\n        x = keepWithin(5 * hsb.h / 12, 0, 150);\n        y = keepWithin(grid.height() - Math.ceil(hsb.s / (100 / grid.height())), 0, grid.height());\n        gridPicker.css({\n          top: y + 'px',\n          left: x + 'px'\n        }); // Set slider position\n\n        y = keepWithin(slider.height() - hsb.b * (slider.height() / 100), 0, slider.height());\n        sliderPicker.css('top', y + 'px'); // Update UI\n\n        slider.css('backgroundColor', hsb2hex({\n          h: hsb.h,\n          s: hsb.s,\n          b: 100\n        }));\n        minicolors.find('.minicolors-grid-inner').css('opacity', 1 - hsb.b / 100);\n        break;\n\n      default:\n        // Set grid position\n        x = keepWithin(Math.ceil(hsb.s / (100 / grid.width())), 0, grid.width());\n        y = keepWithin(grid.height() - Math.ceil(hsb.b / (100 / grid.height())), 0, grid.height());\n        gridPicker.css({\n          top: y + 'px',\n          left: x + 'px'\n        }); // Set slider position\n\n        y = keepWithin(slider.height() - hsb.h / (360 / slider.height()), 0, slider.height());\n        sliderPicker.css('top', y + 'px'); // Update panel color\n\n        grid.css('backgroundColor', hsb2hex({\n          h: hsb.h,\n          s: 100,\n          b: 100\n        }));\n        break;\n    } // Fire change event, but only if minicolors is fully initialized\n\n\n    if (input.data('minicolors-initialized')) {\n      doChange(input, value, opacity);\n    }\n  } // Runs the change and changeDelay callbacks\n\n\n  function doChange(input, value, opacity) {\n    var settings = input.data('minicolors-settings');\n    var lastChange = input.data('minicolors-lastChange');\n    var obj, sel, i; // Only run if it actually changed\n\n    if (!lastChange || lastChange.value !== value || lastChange.opacity !== opacity) {\n      // Remember last-changed value\n      input.data('minicolors-lastChange', {\n        value: value,\n        opacity: opacity\n      }); // Check and select applicable swatch\n\n      if (settings.swatches && settings.swatches.length !== 0) {\n        if (!isRgb(value)) {\n          obj = hex2rgb(value);\n        } else {\n          obj = parseRgb(value, true);\n        }\n\n        sel = -1;\n\n        for (i = 0; i < settings.swatches.length; ++i) {\n          if (obj.r === settings.swatches[i].r && obj.g === settings.swatches[i].g && obj.b === settings.swatches[i].b && obj.a === settings.swatches[i].a) {\n            sel = i;\n            break;\n          }\n        }\n\n        input.parent().find('.minicolors-swatches .minicolors-swatch').removeClass('selected');\n\n        if (sel !== -1) {\n          input.parent().find('.minicolors-swatches .minicolors-swatch').eq(i).addClass('selected');\n        }\n      } // Fire change event\n\n\n      if (settings.change) {\n        if (settings.changeDelay) {\n          // Call after a delay\n          clearTimeout(input.data('minicolors-changeTimeout'));\n          input.data('minicolors-changeTimeout', setTimeout(function () {\n            settings.change.call(input.get(0), value, opacity);\n          }, settings.changeDelay));\n        } else {\n          // Call immediately\n          settings.change.call(input.get(0), value, opacity);\n        }\n      }\n\n      input.trigger('change').trigger('input');\n    }\n  } // Generates an RGB(A) object based on the input's value\n\n\n  function rgbObject(input) {\n    var rgb,\n        opacity = $(input).attr('data-opacity');\n\n    if (isRgb($(input).val())) {\n      rgb = parseRgb($(input).val(), true);\n    } else {\n      var hex = parseHex($(input).val(), true);\n      rgb = hex2rgb(hex);\n    }\n\n    if (!rgb) return null;\n    if (opacity !== undefined) $.extend(rgb, {\n      a: parseFloat(opacity)\n    });\n    return rgb;\n  } // Generates an RGB(A) string based on the input's value\n\n\n  function rgbString(input, alpha) {\n    var rgb,\n        opacity = $(input).attr('data-opacity');\n\n    if (isRgb($(input).val())) {\n      rgb = parseRgb($(input).val(), true);\n    } else {\n      var hex = parseHex($(input).val(), true);\n      rgb = hex2rgb(hex);\n    }\n\n    if (!rgb) return null;\n    if (opacity === undefined) opacity = 1;\n\n    if (alpha) {\n      return 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + parseFloat(opacity) + ')';\n    } else {\n      return 'rgb(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ')';\n    }\n  } // Converts to the letter case specified in settings\n\n\n  function convertCase(string, letterCase) {\n    return letterCase === 'uppercase' ? string.toUpperCase() : string.toLowerCase();\n  } // Parses a string and returns a valid hex string when possible\n\n\n  function parseHex(string, expand) {\n    string = string.replace(/^#/g, '');\n    if (!string.match(/^[A-F0-9]{3,6}/ig)) return '';\n    if (string.length !== 3 && string.length !== 6) return '';\n\n    if (string.length === 3 && expand) {\n      string = string[0] + string[0] + string[1] + string[1] + string[2] + string[2];\n    }\n\n    return '#' + string;\n  } // Parses a string and returns a valid RGB(A) string when possible\n\n\n  function parseRgb(string, obj) {\n    var values = string.replace(/[^\\d,.]/g, '');\n    var rgba = values.split(',');\n    rgba[0] = keepWithin(parseInt(rgba[0], 10), 0, 255);\n    rgba[1] = keepWithin(parseInt(rgba[1], 10), 0, 255);\n    rgba[2] = keepWithin(parseInt(rgba[2], 10), 0, 255);\n\n    if (rgba[3] !== undefined) {\n      rgba[3] = keepWithin(parseFloat(rgba[3], 10), 0, 1);\n    } // Return RGBA object\n\n\n    if (obj) {\n      if (rgba[3] !== undefined) {\n        return {\n          r: rgba[0],\n          g: rgba[1],\n          b: rgba[2],\n          a: rgba[3]\n        };\n      } else {\n        return {\n          r: rgba[0],\n          g: rgba[1],\n          b: rgba[2]\n        };\n      }\n    } // Return RGBA string\n\n\n    if (typeof rgba[3] !== 'undefined' && rgba[3] <= 1) {\n      return 'rgba(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ', ' + rgba[3] + ')';\n    } else {\n      return 'rgb(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ')';\n    }\n  } // Parses a string and returns a valid color string when possible\n\n\n  function parseInput(string, expand) {\n    if (isRgb(string)) {\n      // Returns a valid rgb(a) string\n      return parseRgb(string);\n    } else {\n      return parseHex(string, expand);\n    }\n  } // Keeps value within min and max\n\n\n  function keepWithin(value, min, max) {\n    if (value < min) value = min;\n    if (value > max) value = max;\n    return value;\n  } // Checks if a string is a valid RGB(A) string\n\n\n  function isRgb(string) {\n    var rgb = string.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n    return rgb && rgb.length === 4 ? true : false;\n  } // Function to get alpha from a RGB(A) string\n\n\n  function getAlpha(rgba) {\n    rgba = rgba.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+(\\.\\d{1,2})?|\\.\\d{1,2})[\\s+]?/i);\n    return rgba && rgba.length === 6 ? rgba[4] : '1';\n  } // Converts an HSB object to an RGB object\n\n\n  function hsb2rgb(hsb) {\n    var rgb = {};\n    var h = Math.round(hsb.h);\n    var s = Math.round(hsb.s * 255 / 100);\n    var v = Math.round(hsb.b * 255 / 100);\n\n    if (s === 0) {\n      rgb.r = rgb.g = rgb.b = v;\n    } else {\n      var t1 = v;\n      var t2 = (255 - s) * v / 255;\n      var t3 = (t1 - t2) * (h % 60) / 60;\n      if (h === 360) h = 0;\n\n      if (h < 60) {\n        rgb.r = t1;\n        rgb.b = t2;\n        rgb.g = t2 + t3;\n      } else if (h < 120) {\n        rgb.g = t1;\n        rgb.b = t2;\n        rgb.r = t1 - t3;\n      } else if (h < 180) {\n        rgb.g = t1;\n        rgb.r = t2;\n        rgb.b = t2 + t3;\n      } else if (h < 240) {\n        rgb.b = t1;\n        rgb.r = t2;\n        rgb.g = t1 - t3;\n      } else if (h < 300) {\n        rgb.b = t1;\n        rgb.g = t2;\n        rgb.r = t2 + t3;\n      } else if (h < 360) {\n        rgb.r = t1;\n        rgb.g = t2;\n        rgb.b = t1 - t3;\n      } else {\n        rgb.r = 0;\n        rgb.g = 0;\n        rgb.b = 0;\n      }\n    }\n\n    return {\n      r: Math.round(rgb.r),\n      g: Math.round(rgb.g),\n      b: Math.round(rgb.b)\n    };\n  } // Converts an RGB string to a hex string\n\n\n  function rgbString2hex(rgb) {\n    rgb = rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n    return rgb && rgb.length === 4 ? '#' + ('0' + parseInt(rgb[1], 10).toString(16)).slice(-2) + ('0' + parseInt(rgb[2], 10).toString(16)).slice(-2) + ('0' + parseInt(rgb[3], 10).toString(16)).slice(-2) : '';\n  } // Converts an RGB object to a hex string\n\n\n  function rgb2hex(rgb) {\n    var hex = [rgb.r.toString(16), rgb.g.toString(16), rgb.b.toString(16)];\n    $.each(hex, function (nr, val) {\n      if (val.length === 1) hex[nr] = '0' + val;\n    });\n    return '#' + hex.join('');\n  } // Converts an HSB object to a hex string\n\n\n  function hsb2hex(hsb) {\n    return rgb2hex(hsb2rgb(hsb));\n  } // Converts a hex string to an HSB object\n\n\n  function hex2hsb(hex) {\n    var hsb = rgb2hsb(hex2rgb(hex));\n    if (hsb.s === 0) hsb.h = 360;\n    return hsb;\n  } // Converts an RGB object to an HSB object\n\n\n  function rgb2hsb(rgb) {\n    var hsb = {\n      h: 0,\n      s: 0,\n      b: 0\n    };\n    var min = Math.min(rgb.r, rgb.g, rgb.b);\n    var max = Math.max(rgb.r, rgb.g, rgb.b);\n    var delta = max - min;\n    hsb.b = max;\n    hsb.s = max !== 0 ? 255 * delta / max : 0;\n\n    if (hsb.s !== 0) {\n      if (rgb.r === max) {\n        hsb.h = (rgb.g - rgb.b) / delta;\n      } else if (rgb.g === max) {\n        hsb.h = 2 + (rgb.b - rgb.r) / delta;\n      } else {\n        hsb.h = 4 + (rgb.r - rgb.g) / delta;\n      }\n    } else {\n      hsb.h = -1;\n    }\n\n    hsb.h *= 60;\n\n    if (hsb.h < 0) {\n      hsb.h += 360;\n    }\n\n    hsb.s *= 100 / 255;\n    hsb.b *= 100 / 255;\n    return hsb;\n  } // Converts a hex string to an RGB object\n\n\n  function hex2rgb(hex) {\n    hex = parseInt(hex.indexOf('#') > -1 ? hex.substring(1) : hex, 16);\n    return {\n      r: hex >> 16,\n      g: (hex & 0x00FF00) >> 8,\n      b: hex & 0x0000FF\n    };\n  } // Handle events\n\n\n  $([document]) // Hide on clicks outside of the control\n  .on('mousedown.minicolors touchstart.minicolors', function (event) {\n    if (!$(event.target).parents().add(event.target).hasClass('minicolors')) {\n      hide();\n    }\n  }) // Start moving\n  .on('mousedown.minicolors touchstart.minicolors', '.minicolors-grid, .minicolors-slider, .minicolors-opacity-slider', function (event) {\n    var target = $(this);\n    event.preventDefault();\n    $(event.delegateTarget).data('minicolors-target', target);\n    move(target, event, true);\n  }) // Move pickers\n  .on('mousemove.minicolors touchmove.minicolors', function (event) {\n    var target = $(event.delegateTarget).data('minicolors-target');\n    if (target) move(target, event);\n  }) // Stop moving\n  .on('mouseup.minicolors touchend.minicolors', function () {\n    $(this).removeData('minicolors-target');\n  }) // Selected a swatch\n  .on('click.minicolors', '.minicolors-swatches li', function (event) {\n    event.preventDefault();\n    var target = $(this),\n        input = target.parents('.minicolors').find('.minicolors-input'),\n        color = target.data('swatch-color');\n    updateInput(input, color, getAlpha(color));\n    updateFromInput(input);\n  }) // Show panel when swatch is clicked\n  .on('mousedown.minicolors touchstart.minicolors', '.minicolors-input-swatch', function (event) {\n    var input = $(this).parent().find('.minicolors-input');\n    event.preventDefault();\n    show(input);\n  }) // Show on focus\n  .on('focus.minicolors', '.minicolors-input', function () {\n    var input = $(this);\n    if (!input.data('minicolors-initialized')) return;\n    show(input);\n  }) // Update value on blur\n  .on('blur.minicolors', '.minicolors-input', function () {\n    var input = $(this);\n    var settings = input.data('minicolors-settings');\n    var keywords;\n    var hex;\n    var rgba;\n    var swatchOpacity;\n    var value;\n    if (!input.data('minicolors-initialized')) return; // Get array of lowercase keywords\n\n    keywords = !settings.keywords ? [] : $.map(settings.keywords.split(','), function (a) {\n      return $.trim(a.toLowerCase());\n    }); // Set color string\n\n    if (input.val() !== '' && $.inArray(input.val().toLowerCase(), keywords) > -1) {\n      value = input.val();\n    } else {\n      // Get RGBA values for easy conversion\n      if (isRgb(input.val())) {\n        rgba = parseRgb(input.val(), true);\n      } else {\n        hex = parseHex(input.val(), true);\n        rgba = hex ? hex2rgb(hex) : null;\n      } // Convert to format\n\n\n      if (rgba === null) {\n        value = settings.defaultValue;\n      } else if (settings.format === 'rgb') {\n        value = settings.opacity ? parseRgb('rgba(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ',' + input.attr('data-opacity') + ')') : parseRgb('rgb(' + rgba.r + ',' + rgba.g + ',' + rgba.b + ')');\n      } else {\n        value = rgb2hex(rgba);\n      }\n    } // Update swatch opacity\n\n\n    swatchOpacity = settings.opacity ? input.attr('data-opacity') : 1;\n    if (value.toLowerCase() === 'transparent') swatchOpacity = 0;\n    input.closest('.minicolors').find('.minicolors-input-swatch > span').css('opacity', swatchOpacity); // Set input value\n\n    input.val(value); // Is it blank?\n\n    if (input.val() === '') input.val(parseInput(settings.defaultValue, true)); // Adjust case\n\n    input.val(convertCase(input.val(), settings.letterCase));\n  }) // Handle keypresses\n  .on('keydown.minicolors', '.minicolors-input', function (event) {\n    var input = $(this);\n    if (!input.data('minicolors-initialized')) return;\n\n    switch (event.which) {\n      case 9:\n        // tab\n        hide();\n        break;\n\n      case 13: // enter\n\n      case 27:\n        // esc\n        hide();\n        input.blur();\n        break;\n    }\n  }) // Update on keyup\n  .on('keyup.minicolors', '.minicolors-input', function () {\n    var input = $(this);\n    if (!input.data('minicolors-initialized')) return;\n    updateFromInput(input, true);\n  }) // Update on paste\n  .on('paste.minicolors', '.minicolors-input', function () {\n    var input = $(this);\n    if (!input.data('minicolors-initialized')) return;\n    setTimeout(function () {\n      updateFromInput(input, true);\n    }, 1);\n  });\n});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (minicolors);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/resources/write/minicolors.js\n");

/***/ }),

/***/ "./src/resources/write/squire.js":
/*!***************************************!*\
  !*** ./src/resources/write/squire.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* Copyright © 2011-2015 by Neil Jenkins. MIT Licensed. */\nconst sq = function (doc, undefined) {\n  \"use strict\";\n\n  var DOCUMENT_POSITION_PRECEDING = 2; // Node.DOCUMENT_POSITION_PRECEDING\n\n  var ELEMENT_NODE = 1; // Node.ELEMENT_NODE;\n\n  var TEXT_NODE = 3; // Node.TEXT_NODE;\n\n  var DOCUMENT_NODE = 9; // Node.DOCUMENT_NODE;\n\n  var DOCUMENT_FRAGMENT_NODE = 11; // Node.DOCUMENT_FRAGMENT_NODE;\n\n  var SHOW_ELEMENT = 1; // NodeFilter.SHOW_ELEMENT;\n\n  var SHOW_TEXT = 4; // NodeFilter.SHOW_TEXT;\n\n  var START_TO_START = 0; // Range.START_TO_START\n\n  var START_TO_END = 1; // Range.START_TO_END\n\n  var END_TO_END = 2; // Range.END_TO_END\n\n  var END_TO_START = 3; // Range.END_TO_START\n\n  var ZWS = '\\u200B';\n  var win = doc.defaultView;\n  var ua = navigator.userAgent;\n  var isAndroid = /Android/.test(ua);\n  var isIOS = /iP(?:ad|hone|od)/.test(ua);\n  var isMac = /Mac OS X/.test(ua);\n  var isWin = /Windows NT/.test(ua);\n  var isGecko = /Gecko\\//.test(ua);\n  var isIElt11 = /Trident\\/[456]\\./.test(ua);\n  var isPresto = !!win.opera;\n  var isEdge = /Edge\\//.test(ua);\n  var isWebKit = !isEdge && /WebKit\\//.test(ua);\n  var isIE = /Trident\\/[4567]\\./.test(ua);\n  var ctrlKey = isMac ? 'meta-' : 'ctrl-';\n  var useTextFixer = isIElt11 || isPresto;\n  var cantFocusEmptyTextNodes = isIElt11 || isWebKit;\n  var losesSelectionOnBlur = isIElt11;\n  var canObserveMutations = typeof MutationObserver !== 'undefined';\n  var canWeakMap = typeof WeakMap !== 'undefined'; // Use [^ \\t\\r\\n] instead of \\S so that nbsp does not count as white-space\n\n  var notWS = /[^ \\t\\r\\n]/;\n  var indexOf = Array.prototype.indexOf; // Polyfill for FF3.5\n\n  if (!Object.create) {\n    Object.create = function (proto) {\n      var F = function () {};\n\n      F.prototype = proto;\n      return new F();\n    };\n  }\n  /*\n      Native TreeWalker is buggy in IE and Opera:\n      * IE9/10 sometimes throw errors when calling TreeWalker#nextNode or\n        TreeWalker#previousNode. No way to feature detect this.\n      * Some versions of Opera have a bug in TreeWalker#previousNode which makes\n        it skip to the wrong node.\n  \n      Rather than risk further bugs, it's easiest just to implement our own\n      (subset) of the spec in all browsers.\n  */\n\n\n  var typeToBitArray = {\n    // ELEMENT_NODE\n    1: 1,\n    // ATTRIBUTE_NODE\n    2: 2,\n    // TEXT_NODE\n    3: 4,\n    // COMMENT_NODE\n    8: 128,\n    // DOCUMENT_NODE\n    9: 256,\n    // DOCUMENT_FRAGMENT_NODE\n    11: 1024\n  };\n\n  var always = function () {\n    return true;\n  };\n\n  function TreeWalker(root, nodeType, filter) {\n    this.root = this.currentNode = root;\n    this.nodeType = nodeType;\n    this.filter = filter || always;\n  }\n\n  TreeWalker.prototype.nextNode = function () {\n    var current = this.currentNode,\n        root = this.root,\n        nodeType = this.nodeType,\n        filter = this.filter,\n        node;\n\n    while (true) {\n      node = current.firstChild;\n\n      while (!node && current) {\n        if (current === root) {\n          break;\n        }\n\n        node = current.nextSibling;\n\n        if (!node) {\n          current = current.parentNode;\n        }\n      }\n\n      if (!node) {\n        return null;\n      }\n\n      if (typeToBitArray[node.nodeType] & nodeType && filter(node)) {\n        this.currentNode = node;\n        return node;\n      }\n\n      current = node;\n    }\n  };\n\n  TreeWalker.prototype.previousNode = function () {\n    var current = this.currentNode,\n        root = this.root,\n        nodeType = this.nodeType,\n        filter = this.filter,\n        node;\n\n    while (true) {\n      if (current === root) {\n        return null;\n      }\n\n      node = current.previousSibling;\n\n      if (node) {\n        while (current = node.lastChild) {\n          node = current;\n        }\n      } else {\n        node = current.parentNode;\n      }\n\n      if (!node) {\n        return null;\n      }\n\n      if (typeToBitArray[node.nodeType] & nodeType && filter(node)) {\n        this.currentNode = node;\n        return node;\n      }\n\n      current = node;\n    }\n  }; // Previous node in post-order.\n\n\n  TreeWalker.prototype.previousPONode = function () {\n    var current = this.currentNode,\n        root = this.root,\n        nodeType = this.nodeType,\n        filter = this.filter,\n        node;\n\n    while (true) {\n      node = current.lastChild;\n\n      while (!node && current) {\n        if (current === root) {\n          break;\n        }\n\n        node = current.previousSibling;\n\n        if (!node) {\n          current = current.parentNode;\n        }\n      }\n\n      if (!node) {\n        return null;\n      }\n\n      if (typeToBitArray[node.nodeType] & nodeType && filter(node)) {\n        this.currentNode = node;\n        return node;\n      }\n\n      current = node;\n    }\n  };\n\n  var inlineNodeNames = /^(?:#text|A(?:BBR|CRONYM)?|B(?:R|D[IO])?|C(?:ITE|ODE)|D(?:ATA|EL|FN)|EM|FONT|HR|I(?:FRAME|MG|NPUT|NS)?|KBD|Q|R(?:P|T|UBY)|S(?:AMP|MALL|PAN|TR(?:IKE|ONG)|U[BP])?|TIME|U|VAR|WBR)$/;\n  var leafNodeNames = {\n    BR: 1,\n    HR: 1,\n    IFRAME: 1,\n    IMG: 1,\n    INPUT: 1\n  };\n\n  function every(nodeList, fn) {\n    var l = nodeList.length;\n\n    while (l--) {\n      if (!fn(nodeList[l])) {\n        return false;\n      }\n    }\n\n    return true;\n  } // ---\n\n\n  var UNKNOWN = 0;\n  var INLINE = 1;\n  var BLOCK = 2;\n  var CONTAINER = 3;\n  var nodeCategoryCache = canWeakMap ? new WeakMap() : null;\n\n  function isLeaf(node) {\n    return node.nodeType === ELEMENT_NODE && !!leafNodeNames[node.nodeName];\n  }\n\n  function getNodeCategory(node) {\n    switch (node.nodeType) {\n      case TEXT_NODE:\n        return INLINE;\n\n      case ELEMENT_NODE:\n      case DOCUMENT_FRAGMENT_NODE:\n        if (canWeakMap && nodeCategoryCache.has(node)) {\n          return nodeCategoryCache.get(node);\n        }\n\n        break;\n\n      default:\n        return UNKNOWN;\n    }\n\n    var nodeCategory;\n\n    if (!every(node.childNodes, isInline)) {\n      // Malformed HTML can have block tags inside inline tags. Need to treat\n      // these as containers rather than inline. See #239.\n      nodeCategory = CONTAINER;\n    } else if (inlineNodeNames.test(node.nodeName)) {\n      nodeCategory = INLINE;\n    } else {\n      nodeCategory = BLOCK;\n    }\n\n    if (canWeakMap) {\n      nodeCategoryCache.set(node, nodeCategory);\n    }\n\n    return nodeCategory;\n  }\n\n  function isInline(node) {\n    return getNodeCategory(node) === INLINE;\n  }\n\n  function isBlock(node) {\n    return getNodeCategory(node) === BLOCK;\n  }\n\n  function isContainer(node) {\n    return getNodeCategory(node) === CONTAINER;\n  }\n\n  function getBlockWalker(node, root) {\n    var walker = new TreeWalker(root, SHOW_ELEMENT, isBlock);\n    walker.currentNode = node;\n    return walker;\n  }\n\n  function getPreviousBlock(node, root) {\n    node = getBlockWalker(node, root).previousNode();\n    return node !== root ? node : null;\n  }\n\n  function getNextBlock(node, root) {\n    node = getBlockWalker(node, root).nextNode();\n    return node !== root ? node : null;\n  }\n\n  function isEmptyBlock(block) {\n    return !block.textContent && !block.querySelector('IMG');\n  }\n\n  function areAlike(node, node2) {\n    return !isLeaf(node) && node.nodeType === node2.nodeType && node.nodeName === node2.nodeName && node.nodeName !== 'A' && node.className === node2.className && (!node.style && !node2.style || node.style.cssText === node2.style.cssText);\n  }\n\n  function hasTagAttributes(node, tag, attributes) {\n    if (node.nodeName !== tag) {\n      return false;\n    }\n\n    for (var attr in attributes) {\n      if (node.getAttribute(attr) !== attributes[attr]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function getNearest(node, root, tag, attributes) {\n    while (node && node !== root) {\n      if (hasTagAttributes(node, tag, attributes)) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n\n    return null;\n  }\n\n  function isOrContains(parent, node) {\n    while (node) {\n      if (node === parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  }\n\n  function getPath(node, root, config) {\n    var path = '';\n    var id, className, classNames, dir, styleNames;\n\n    if (node && node !== root) {\n      path = getPath(node.parentNode, root, config);\n\n      if (node.nodeType === ELEMENT_NODE) {\n        path += (path ? '>' : '') + node.nodeName;\n\n        if (id = node.id) {\n          path += '#' + id;\n        }\n\n        if (className = node.className.trim()) {\n          classNames = className.split(/\\s\\s*/);\n          classNames.sort();\n          path += '.';\n          path += classNames.join('.');\n        }\n\n        if (dir = node.dir) {\n          path += '[dir=' + dir + ']';\n        }\n\n        if (classNames) {\n          styleNames = config.classNames;\n\n          if (indexOf.call(classNames, styleNames.highlight) > -1) {\n            path += '[backgroundColor=' + node.style.backgroundColor.replace(/ /g, '') + ']';\n          }\n\n          if (indexOf.call(classNames, styleNames.colour) > -1) {\n            path += '[color=' + node.style.color.replace(/ /g, '') + ']';\n          }\n\n          if (indexOf.call(classNames, styleNames.fontFamily) > -1) {\n            path += '[fontFamily=' + node.style.fontFamily.replace(/ /g, '') + ']';\n          }\n\n          if (indexOf.call(classNames, styleNames.fontSize) > -1) {\n            path += '[fontSize=' + node.style.fontSize + ']';\n          }\n        }\n      }\n    }\n\n    return path;\n  }\n\n  function getLength(node) {\n    var nodeType = node.nodeType;\n    return nodeType === ELEMENT_NODE || nodeType === DOCUMENT_FRAGMENT_NODE ? node.childNodes.length : node.length || 0;\n  }\n\n  function detach(node) {\n    var parent = node.parentNode;\n\n    if (parent) {\n      parent.removeChild(node);\n    }\n\n    return node;\n  }\n\n  function replaceWith(node, node2) {\n    var parent = node.parentNode;\n\n    if (parent) {\n      parent.replaceChild(node2, node);\n    }\n  }\n\n  function empty(node) {\n    var frag = node.ownerDocument.createDocumentFragment(),\n        childNodes = node.childNodes,\n        l = childNodes ? childNodes.length : 0;\n\n    while (l--) {\n      frag.appendChild(node.firstChild);\n    }\n\n    return frag;\n  }\n\n  function createElement(doc, tag, props, children) {\n    var el = doc.createElement(tag),\n        attr,\n        value,\n        i,\n        l;\n\n    if (props instanceof Array) {\n      children = props;\n      props = null;\n    }\n\n    if (props) {\n      for (attr in props) {\n        value = props[attr];\n\n        if (value !== undefined) {\n          el.setAttribute(attr, props[attr]);\n        }\n      }\n    }\n\n    if (children) {\n      for (i = 0, l = children.length; i < l; i += 1) {\n        el.appendChild(children[i]);\n      }\n    }\n\n    return el;\n  }\n\n  function fixCursor(node, root) {\n    // In Webkit and Gecko, block level elements are collapsed and\n    // unfocussable if they have no content. To remedy this, a <BR> must be\n    // inserted. In Opera and IE, we just need a textnode in order for the\n    // cursor to appear.\n    var self = root.__squire__;\n    var doc = node.ownerDocument;\n    var originalNode = node;\n    var fixer, child;\n\n    if (node === root) {\n      if (!(child = node.firstChild) || child.nodeName === 'BR') {\n        fixer = self.createDefaultBlock();\n\n        if (child) {\n          node.replaceChild(fixer, child);\n        } else {\n          node.appendChild(fixer);\n        }\n\n        node = fixer;\n        fixer = null;\n      }\n    }\n\n    if (node.nodeType === TEXT_NODE) {\n      return originalNode;\n    }\n\n    if (isInline(node)) {\n      child = node.firstChild;\n\n      while (cantFocusEmptyTextNodes && child && child.nodeType === TEXT_NODE && !child.data) {\n        node.removeChild(child);\n        child = node.firstChild;\n      }\n\n      if (!child) {\n        if (cantFocusEmptyTextNodes) {\n          fixer = doc.createTextNode(ZWS);\n\n          self._didAddZWS();\n        } else {\n          fixer = doc.createTextNode('');\n        }\n      }\n    } else {\n      if (useTextFixer) {\n        while (node.nodeType !== TEXT_NODE && !isLeaf(node)) {\n          child = node.firstChild;\n\n          if (!child) {\n            fixer = doc.createTextNode('');\n            break;\n          }\n\n          node = child;\n        }\n\n        if (node.nodeType === TEXT_NODE) {\n          // Opera will collapse the block element if it contains\n          // just spaces (but not if it contains no data at all).\n          if (/^ +$/.test(node.data)) {\n            node.data = '';\n          }\n        } else if (isLeaf(node)) {\n          node.parentNode.insertBefore(doc.createTextNode(''), node);\n        }\n      } else if (!node.querySelector('BR')) {\n        fixer = createElement(doc, 'BR');\n\n        while ((child = node.lastElementChild) && !isInline(child)) {\n          node = child;\n        }\n      }\n    }\n\n    if (fixer) {\n      try {\n        node.appendChild(fixer);\n      } catch (error) {\n        self.didError({\n          name: 'Squire: fixCursor – ' + error,\n          message: 'Parent: ' + node.nodeName + '/' + node.innerHTML + ' appendChild: ' + fixer.nodeName\n        });\n      }\n    }\n\n    return originalNode;\n  } // Recursively examine container nodes and wrap any inline children.\n\n\n  function fixContainer(container, root) {\n    var children = container.childNodes;\n    var doc = container.ownerDocument;\n    var wrapper = null;\n    var i, l, child, isBR;\n    var config = root.__squire__._config;\n\n    for (i = 0, l = children.length; i < l; i += 1) {\n      child = children[i];\n      isBR = child.nodeName === 'BR';\n\n      if (!isBR && isInline(child)) {\n        if (!wrapper) {\n          wrapper = createElement(doc, config.blockTag, config.blockAttributes);\n        }\n\n        wrapper.appendChild(child);\n        i -= 1;\n        l -= 1;\n      } else if (isBR || wrapper) {\n        if (!wrapper) {\n          wrapper = createElement(doc, config.blockTag, config.blockAttributes);\n        }\n\n        fixCursor(wrapper, root);\n\n        if (isBR) {\n          container.replaceChild(wrapper, child);\n        } else {\n          container.insertBefore(wrapper, child);\n          i += 1;\n          l += 1;\n        }\n\n        wrapper = null;\n      }\n\n      if (isContainer(child)) {\n        fixContainer(child, root);\n      }\n    }\n\n    if (wrapper) {\n      container.appendChild(fixCursor(wrapper, root));\n    }\n\n    return container;\n  }\n\n  function split(node, offset, stopNode, root) {\n    var nodeType = node.nodeType,\n        parent,\n        clone,\n        next;\n\n    if (nodeType === TEXT_NODE && node !== stopNode) {\n      return split(node.parentNode, node.splitText(offset), stopNode, root);\n    }\n\n    if (nodeType === ELEMENT_NODE) {\n      if (typeof offset === 'number') {\n        offset = offset < node.childNodes.length ? node.childNodes[offset] : null;\n      }\n\n      if (node === stopNode) {\n        return offset;\n      } // Clone node without children\n\n\n      parent = node.parentNode;\n      clone = node.cloneNode(false); // Add right-hand siblings to the clone\n\n      while (offset) {\n        next = offset.nextSibling;\n        clone.appendChild(offset);\n        offset = next;\n      } // Maintain li numbering if inside a quote.\n\n\n      if (node.nodeName === 'OL' && getNearest(node, root, 'BLOCKQUOTE')) {\n        clone.start = (+node.start || 1) + node.childNodes.length - 1;\n      } // DO NOT NORMALISE. This may undo the fixCursor() call\n      // of a node lower down the tree!\n      // We need something in the element in order for the cursor to appear.\n\n\n      fixCursor(node, root);\n      fixCursor(clone, root); // Inject clone after original node\n\n      if (next = node.nextSibling) {\n        parent.insertBefore(clone, next);\n      } else {\n        parent.appendChild(clone);\n      } // Keep on splitting up the tree\n\n\n      return split(parent, clone, stopNode, root);\n    }\n\n    return offset;\n  }\n\n  function _mergeInlines(node, fakeRange) {\n    var children = node.childNodes,\n        l = children.length,\n        frags = [],\n        child,\n        prev,\n        len;\n\n    while (l--) {\n      child = children[l];\n      prev = l && children[l - 1];\n\n      if (l && isInline(child) && areAlike(child, prev) && !leafNodeNames[child.nodeName]) {\n        if (fakeRange.startContainer === child) {\n          fakeRange.startContainer = prev;\n          fakeRange.startOffset += getLength(prev);\n        }\n\n        if (fakeRange.endContainer === child) {\n          fakeRange.endContainer = prev;\n          fakeRange.endOffset += getLength(prev);\n        }\n\n        if (fakeRange.startContainer === node) {\n          if (fakeRange.startOffset > l) {\n            fakeRange.startOffset -= 1;\n          } else if (fakeRange.startOffset === l) {\n            fakeRange.startContainer = prev;\n            fakeRange.startOffset = getLength(prev);\n          }\n        }\n\n        if (fakeRange.endContainer === node) {\n          if (fakeRange.endOffset > l) {\n            fakeRange.endOffset -= 1;\n          } else if (fakeRange.endOffset === l) {\n            fakeRange.endContainer = prev;\n            fakeRange.endOffset = getLength(prev);\n          }\n        }\n\n        detach(child);\n\n        if (child.nodeType === TEXT_NODE) {\n          prev.appendData(child.data);\n        } else {\n          frags.push(empty(child));\n        }\n      } else if (child.nodeType === ELEMENT_NODE) {\n        len = frags.length;\n\n        while (len--) {\n          child.appendChild(frags.pop());\n        }\n\n        _mergeInlines(child, fakeRange);\n      }\n    }\n  }\n\n  function mergeInlines(node, range) {\n    if (node.nodeType === TEXT_NODE) {\n      node = node.parentNode;\n    }\n\n    if (node.nodeType === ELEMENT_NODE) {\n      var fakeRange = {\n        startContainer: range.startContainer,\n        startOffset: range.startOffset,\n        endContainer: range.endContainer,\n        endOffset: range.endOffset\n      };\n\n      _mergeInlines(node, fakeRange);\n\n      range.setStart(fakeRange.startContainer, fakeRange.startOffset);\n      range.setEnd(fakeRange.endContainer, fakeRange.endOffset);\n    }\n  }\n\n  function mergeWithBlock(block, next, range, root) {\n    var container = next;\n    var parent, last, offset;\n\n    while ((parent = container.parentNode) && parent !== root && parent.nodeType === ELEMENT_NODE && parent.childNodes.length === 1) {\n      container = parent;\n    }\n\n    detach(container);\n    offset = block.childNodes.length; // Remove extra <BR> fixer if present.\n\n    last = block.lastChild;\n\n    if (last && last.nodeName === 'BR') {\n      block.removeChild(last);\n      offset -= 1;\n    }\n\n    block.appendChild(empty(next));\n    range.setStart(block, offset);\n    range.collapse(true);\n    mergeInlines(block, range); // Opera inserts a BR if you delete the last piece of text\n    // in a block-level element. Unfortunately, it then gets\n    // confused when setting the selection subsequently and\n    // refuses to accept the range that finishes just before the\n    // BR. Removing the BR fixes the bug.\n    // Steps to reproduce bug: Type \"a-b-c\" (where - is return)\n    // then backspace twice. The cursor goes to the top instead\n    // of after \"b\".\n\n    if (isPresto && (last = block.lastChild) && last.nodeName === 'BR') {\n      block.removeChild(last);\n    }\n  }\n\n  function mergeContainers(node, root) {\n    var prev = node.previousSibling,\n        first = node.firstChild,\n        doc = node.ownerDocument,\n        isListItem = node.nodeName === 'LI',\n        needsFix,\n        block; // Do not merge LIs, unless it only contains a UL\n\n    if (isListItem && (!first || !/^[OU]L$/.test(first.nodeName))) {\n      return;\n    }\n\n    if (prev && areAlike(prev, node)) {\n      if (!isContainer(prev)) {\n        if (isListItem) {\n          block = createElement(doc, 'DIV');\n          block.appendChild(empty(prev));\n          prev.appendChild(block);\n        } else {\n          return;\n        }\n      }\n\n      detach(node);\n      needsFix = !isContainer(node);\n      prev.appendChild(empty(node));\n\n      if (needsFix) {\n        fixContainer(prev, root);\n      }\n\n      if (first) {\n        mergeContainers(first, root);\n      }\n    } else if (isListItem) {\n      prev = createElement(doc, 'DIV');\n      node.insertBefore(prev, first);\n      fixCursor(prev, root);\n    }\n  }\n\n  var getNodeBefore = function (node, offset) {\n    var children = node.childNodes;\n\n    while (offset && node.nodeType === ELEMENT_NODE) {\n      node = children[offset - 1];\n      children = node.childNodes;\n      offset = children.length;\n    }\n\n    return node;\n  };\n\n  var getNodeAfter = function (node, offset) {\n    if (node.nodeType === ELEMENT_NODE) {\n      var children = node.childNodes;\n\n      if (offset < children.length) {\n        node = children[offset];\n      } else {\n        while (node && !node.nextSibling) {\n          node = node.parentNode;\n        }\n\n        if (node) {\n          node = node.nextSibling;\n        }\n      }\n    }\n\n    return node;\n  }; // ---\n\n\n  var insertNodeInRange = function (range, node) {\n    // Insert at start.\n    var startContainer = range.startContainer,\n        startOffset = range.startOffset,\n        endContainer = range.endContainer,\n        endOffset = range.endOffset,\n        parent,\n        children,\n        childCount,\n        afterSplit; // If part way through a text node, split it.\n\n    if (startContainer.nodeType === TEXT_NODE) {\n      parent = startContainer.parentNode;\n      children = parent.childNodes;\n\n      if (startOffset === startContainer.length) {\n        startOffset = indexOf.call(children, startContainer) + 1;\n\n        if (range.collapsed) {\n          endContainer = parent;\n          endOffset = startOffset;\n        }\n      } else {\n        if (startOffset) {\n          afterSplit = startContainer.splitText(startOffset);\n\n          if (endContainer === startContainer) {\n            endOffset -= startOffset;\n            endContainer = afterSplit;\n          } else if (endContainer === parent) {\n            endOffset += 1;\n          }\n\n          startContainer = afterSplit;\n        }\n\n        startOffset = indexOf.call(children, startContainer);\n      }\n\n      startContainer = parent;\n    } else {\n      children = startContainer.childNodes;\n    }\n\n    childCount = children.length;\n\n    if (startOffset === childCount) {\n      startContainer.appendChild(node);\n    } else {\n      startContainer.insertBefore(node, children[startOffset]);\n    }\n\n    if (startContainer === endContainer) {\n      endOffset += children.length - childCount;\n    }\n\n    range.setStart(startContainer, startOffset);\n    range.setEnd(endContainer, endOffset);\n  };\n\n  var extractContentsOfRange = function (range, common, root) {\n    var startContainer = range.startContainer,\n        startOffset = range.startOffset,\n        endContainer = range.endContainer,\n        endOffset = range.endOffset;\n\n    if (!common) {\n      common = range.commonAncestorContainer;\n    }\n\n    if (common.nodeType === TEXT_NODE) {\n      common = common.parentNode;\n    }\n\n    var endNode = split(endContainer, endOffset, common, root),\n        startNode = split(startContainer, startOffset, common, root),\n        frag = common.ownerDocument.createDocumentFragment(),\n        next,\n        before,\n        after,\n        beforeText,\n        afterText; // End node will be null if at end of child nodes list.\n\n    while (startNode !== endNode) {\n      next = startNode.nextSibling;\n      frag.appendChild(startNode);\n      startNode = next;\n    }\n\n    startContainer = common;\n    startOffset = endNode ? indexOf.call(common.childNodes, endNode) : common.childNodes.length; // Merge text nodes if adjacent. IE10 in particular will not focus\n    // between two text nodes\n\n    after = common.childNodes[startOffset];\n    before = after && after.previousSibling;\n\n    if (before && before.nodeType === TEXT_NODE && after.nodeType === TEXT_NODE) {\n      startContainer = before;\n      startOffset = before.length;\n      beforeText = before.data;\n      afterText = after.data; // If we now have two adjacent spaces, the second one needs to become\n      // a nbsp, otherwise the browser will swallow it due to HTML whitespace\n      // collapsing.\n\n      if (beforeText.charAt(beforeText.length - 1) === ' ' && afterText.charAt(0) === ' ') {\n        afterText = ' ' + afterText.slice(1); // nbsp\n      }\n\n      before.appendData(afterText);\n      detach(after);\n    }\n\n    range.setStart(startContainer, startOffset);\n    range.collapse(true);\n    fixCursor(common, root);\n    return frag;\n  };\n\n  var deleteContentsOfRange = function (range, root) {\n    var startBlock = getStartBlockOfRange(range, root);\n    var endBlock = getEndBlockOfRange(range, root);\n    var needsMerge = startBlock !== endBlock;\n    var frag, child; // Move boundaries up as much as possible without exiting block,\n    // to reduce need to split.\n\n    moveRangeBoundariesDownTree(range);\n    moveRangeBoundariesUpTree(range, startBlock, endBlock, root); // Remove selected range\n\n    frag = extractContentsOfRange(range, null, root); // Move boundaries back down tree as far as possible.\n\n    moveRangeBoundariesDownTree(range); // If we split into two different blocks, merge the blocks.\n\n    if (needsMerge) {\n      // endBlock will have been split, so need to refetch\n      endBlock = getEndBlockOfRange(range, root);\n\n      if (startBlock && endBlock && startBlock !== endBlock) {\n        mergeWithBlock(startBlock, endBlock, range, root);\n      }\n    } // Ensure block has necessary children\n\n\n    if (startBlock) {\n      fixCursor(startBlock, root);\n    } // Ensure root has a block-level element in it.\n\n\n    child = root.firstChild;\n\n    if (!child || child.nodeName === 'BR') {\n      fixCursor(root, root);\n      range.selectNodeContents(root.firstChild);\n    } else {\n      range.collapse(true);\n    }\n\n    return frag;\n  }; // ---\n  // Contents of range will be deleted.\n  // After method, range will be around inserted content\n\n\n  var insertTreeFragmentIntoRange = function (range, frag, root) {\n    var node, block, blockContentsAfterSplit, stopPoint, container, offset;\n    var replaceBlock, firstBlockInFrag, nodeAfterSplit, nodeBeforeSplit;\n    var tempRange; // Fixup content: ensure no top-level inline, and add cursor fix elements.\n\n    fixContainer(frag, root);\n    node = frag;\n\n    while (node = getNextBlock(node, root)) {\n      fixCursor(node, root);\n    } // Delete any selected content.\n\n\n    if (!range.collapsed) {\n      deleteContentsOfRange(range, root);\n    } // Move range down into text nodes.\n\n\n    moveRangeBoundariesDownTree(range);\n    range.collapse(false); // collapse to end\n    // Where will we split up to? First blockquote parent, otherwise root.\n\n    stopPoint = getNearest(range.endContainer, root, 'BLOCKQUOTE') || root; // Merge the contents of the first block in the frag with the focused block.\n    // If there are contents in the block after the focus point, collect this\n    // up to insert in the last block later. If the block is empty, replace\n    // it instead of merging.\n\n    block = getStartBlockOfRange(range, root);\n    firstBlockInFrag = getNextBlock(frag, frag);\n    replaceBlock = !!block && isEmptyBlock(block);\n\n    if (block && firstBlockInFrag && !replaceBlock && // Don't merge table cells or PRE elements into block\n    !getNearest(firstBlockInFrag, frag, 'PRE') && !getNearest(firstBlockInFrag, frag, 'TABLE')) {\n      moveRangeBoundariesUpTree(range, block, block, root);\n      range.collapse(true); // collapse to start\n\n      container = range.endContainer;\n      offset = range.endOffset; // Remove trailing <br> – we don't want this considered content to be\n      // inserted again later\n\n      cleanupBRs(block, root, false);\n\n      if (isInline(container)) {\n        // Split up to block parent.\n        nodeAfterSplit = split(container, offset, getPreviousBlock(container, root), root);\n        container = nodeAfterSplit.parentNode;\n        offset = indexOf.call(container.childNodes, nodeAfterSplit);\n      }\n\n      if (\n      /*isBlock( container ) && */\n      offset !== getLength(container)) {\n        // Collect any inline contents of the block after the range point\n        blockContentsAfterSplit = root.ownerDocument.createDocumentFragment();\n\n        while (node = container.childNodes[offset]) {\n          blockContentsAfterSplit.appendChild(node);\n        }\n      } // And merge the first block in.\n\n\n      mergeWithBlock(container, firstBlockInFrag, range, root); // And where we will insert\n\n      offset = indexOf.call(container.parentNode.childNodes, container) + 1;\n      container = container.parentNode;\n      range.setEnd(container, offset);\n    } // Is there still any content in the fragment?\n\n\n    if (getLength(frag)) {\n      if (replaceBlock) {\n        range.setEndBefore(block);\n        range.collapse(false);\n        detach(block);\n      }\n\n      moveRangeBoundariesUpTree(range, stopPoint, stopPoint, root); // Now split after block up to blockquote (if a parent) or root\n\n      nodeAfterSplit = split(range.endContainer, range.endOffset, stopPoint, root);\n      nodeBeforeSplit = nodeAfterSplit ? nodeAfterSplit.previousSibling : stopPoint.lastChild;\n      stopPoint.insertBefore(frag, nodeAfterSplit);\n\n      if (nodeAfterSplit) {\n        range.setEndBefore(nodeAfterSplit);\n      } else {\n        range.setEnd(stopPoint, getLength(stopPoint));\n      }\n\n      block = getEndBlockOfRange(range, root); // Get a reference that won't be invalidated if we merge containers.\n\n      moveRangeBoundariesDownTree(range);\n      container = range.endContainer;\n      offset = range.endOffset; // Merge inserted containers with edges of split\n\n      if (nodeAfterSplit && isContainer(nodeAfterSplit)) {\n        mergeContainers(nodeAfterSplit, root);\n      }\n\n      nodeAfterSplit = nodeBeforeSplit && nodeBeforeSplit.nextSibling;\n\n      if (nodeAfterSplit && isContainer(nodeAfterSplit)) {\n        mergeContainers(nodeAfterSplit, root);\n      }\n\n      range.setEnd(container, offset);\n    } // Insert inline content saved from before.\n\n\n    if (blockContentsAfterSplit) {\n      tempRange = range.cloneRange();\n      mergeWithBlock(block, blockContentsAfterSplit, tempRange, root);\n      range.setEnd(tempRange.endContainer, tempRange.endOffset);\n    }\n\n    moveRangeBoundariesDownTree(range);\n  }; // ---\n\n\n  var isNodeContainedInRange = function (range, node, partial) {\n    var nodeRange = node.ownerDocument.createRange();\n    nodeRange.selectNode(node);\n\n    if (partial) {\n      // Node must not finish before range starts or start after range\n      // finishes.\n      var nodeEndBeforeStart = range.compareBoundaryPoints(END_TO_START, nodeRange) > -1,\n          nodeStartAfterEnd = range.compareBoundaryPoints(START_TO_END, nodeRange) < 1;\n      return !nodeEndBeforeStart && !nodeStartAfterEnd;\n    } else {\n      // Node must start after range starts and finish before range\n      // finishes\n      var nodeStartAfterStart = range.compareBoundaryPoints(START_TO_START, nodeRange) < 1,\n          nodeEndBeforeEnd = range.compareBoundaryPoints(END_TO_END, nodeRange) > -1;\n      return nodeStartAfterStart && nodeEndBeforeEnd;\n    }\n  };\n\n  var moveRangeBoundariesDownTree = function (range) {\n    var startContainer = range.startContainer,\n        startOffset = range.startOffset,\n        endContainer = range.endContainer,\n        endOffset = range.endOffset,\n        maySkipBR = true,\n        child;\n\n    while (startContainer.nodeType !== TEXT_NODE) {\n      child = startContainer.childNodes[startOffset];\n\n      if (!child || isLeaf(child)) {\n        break;\n      }\n\n      startContainer = child;\n      startOffset = 0;\n    }\n\n    if (endOffset) {\n      while (endContainer.nodeType !== TEXT_NODE) {\n        child = endContainer.childNodes[endOffset - 1];\n\n        if (!child || isLeaf(child)) {\n          if (maySkipBR && child && child.nodeName === 'BR') {\n            endOffset -= 1;\n            maySkipBR = false;\n            continue;\n          }\n\n          break;\n        }\n\n        endContainer = child;\n        endOffset = getLength(endContainer);\n      }\n    } else {\n      while (endContainer.nodeType !== TEXT_NODE) {\n        child = endContainer.firstChild;\n\n        if (!child || isLeaf(child)) {\n          break;\n        }\n\n        endContainer = child;\n      }\n    } // If collapsed, this algorithm finds the nearest text node positions\n    // *outside* the range rather than inside, but also it flips which is\n    // assigned to which.\n\n\n    if (range.collapsed) {\n      range.setStart(endContainer, endOffset);\n      range.setEnd(startContainer, startOffset);\n    } else {\n      range.setStart(startContainer, startOffset);\n      range.setEnd(endContainer, endOffset);\n    }\n  };\n\n  var moveRangeBoundariesUpTree = function (range, startMax, endMax, root) {\n    var startContainer = range.startContainer;\n    var startOffset = range.startOffset;\n    var endContainer = range.endContainer;\n    var endOffset = range.endOffset;\n    var maySkipBR = true;\n    var parent;\n\n    if (!startMax) {\n      startMax = range.commonAncestorContainer;\n    }\n\n    if (!endMax) {\n      endMax = startMax;\n    }\n\n    while (!startOffset && startContainer !== startMax && startContainer !== root) {\n      parent = startContainer.parentNode;\n      startOffset = indexOf.call(parent.childNodes, startContainer);\n      startContainer = parent;\n    }\n\n    while (true) {\n      if (maySkipBR && endContainer.nodeType !== TEXT_NODE && endContainer.childNodes[endOffset] && endContainer.childNodes[endOffset].nodeName === 'BR') {\n        endOffset += 1;\n        maySkipBR = false;\n      }\n\n      if (endContainer === endMax || endContainer === root || endOffset !== getLength(endContainer)) {\n        break;\n      }\n\n      parent = endContainer.parentNode;\n      endOffset = indexOf.call(parent.childNodes, endContainer) + 1;\n      endContainer = parent;\n    }\n\n    range.setStart(startContainer, startOffset);\n    range.setEnd(endContainer, endOffset);\n  }; // Returns the first block at least partially contained by the range,\n  // or null if no block is contained by the range.\n\n\n  var getStartBlockOfRange = function (range, root) {\n    var container = range.startContainer,\n        block; // If inline, get the containing block.\n\n    if (isInline(container)) {\n      block = getPreviousBlock(container, root);\n    } else if (container !== root && isBlock(container)) {\n      block = container;\n    } else {\n      block = getNodeBefore(container, range.startOffset);\n      block = getNextBlock(block, root);\n    } // Check the block actually intersects the range\n\n\n    return block && isNodeContainedInRange(range, block, true) ? block : null;\n  }; // Returns the last block at least partially contained by the range,\n  // or null if no block is contained by the range.\n\n\n  var getEndBlockOfRange = function (range, root) {\n    var container = range.endContainer,\n        block,\n        child; // If inline, get the containing block.\n\n    if (isInline(container)) {\n      block = getPreviousBlock(container, root);\n    } else if (container !== root && isBlock(container)) {\n      block = container;\n    } else {\n      block = getNodeAfter(container, range.endOffset);\n\n      if (!block || !isOrContains(root, block)) {\n        block = root;\n\n        while (child = block.lastChild) {\n          block = child;\n        }\n      }\n\n      block = getPreviousBlock(block, root);\n    } // Check the block actually intersects the range\n\n\n    return block && isNodeContainedInRange(range, block, true) ? block : null;\n  };\n\n  var contentWalker = new TreeWalker(null, SHOW_TEXT | SHOW_ELEMENT, function (node) {\n    return node.nodeType === TEXT_NODE ? notWS.test(node.data) : node.nodeName === 'IMG';\n  });\n\n  var rangeDoesStartAtBlockBoundary = function (range, root) {\n    var startContainer = range.startContainer;\n    var startOffset = range.startOffset;\n    var nodeAfterCursor; // If in the middle or end of a text node, we're not at the boundary.\n\n    contentWalker.root = null;\n\n    if (startContainer.nodeType === TEXT_NODE) {\n      if (startOffset) {\n        return false;\n      }\n\n      nodeAfterCursor = startContainer;\n    } else {\n      nodeAfterCursor = getNodeAfter(startContainer, startOffset);\n\n      if (nodeAfterCursor && !isOrContains(root, nodeAfterCursor)) {\n        nodeAfterCursor = null;\n      } // The cursor was right at the end of the document\n\n\n      if (!nodeAfterCursor) {\n        nodeAfterCursor = getNodeBefore(startContainer, startOffset);\n\n        if (nodeAfterCursor.nodeType === TEXT_NODE && nodeAfterCursor.length) {\n          return false;\n        }\n      }\n    } // Otherwise, look for any previous content in the same block.\n\n\n    contentWalker.currentNode = nodeAfterCursor;\n    contentWalker.root = getStartBlockOfRange(range, root);\n    return !contentWalker.previousNode();\n  };\n\n  var rangeDoesEndAtBlockBoundary = function (range, root) {\n    var endContainer = range.endContainer,\n        endOffset = range.endOffset,\n        length; // If in a text node with content, and not at the end, we're not\n    // at the boundary\n\n    contentWalker.root = null;\n\n    if (endContainer.nodeType === TEXT_NODE) {\n      length = endContainer.data.length;\n\n      if (length && endOffset < length) {\n        return false;\n      }\n\n      contentWalker.currentNode = endContainer;\n    } else {\n      contentWalker.currentNode = getNodeBefore(endContainer, endOffset);\n    } // Otherwise, look for any further content in the same block.\n\n\n    contentWalker.root = getEndBlockOfRange(range, root);\n    return !contentWalker.nextNode();\n  };\n\n  var expandRangeToBlockBoundaries = function (range, root) {\n    var start = getStartBlockOfRange(range, root),\n        end = getEndBlockOfRange(range, root),\n        parent;\n\n    if (start && end) {\n      parent = start.parentNode;\n      range.setStart(parent, indexOf.call(parent.childNodes, start));\n      parent = end.parentNode;\n      range.setEnd(parent, indexOf.call(parent.childNodes, end) + 1);\n    }\n  };\n\n  var keys = {\n    8: 'backspace',\n    9: 'tab',\n    13: 'enter',\n    32: 'space',\n    33: 'pageup',\n    34: 'pagedown',\n    37: 'left',\n    39: 'right',\n    46: 'delete',\n    219: '[',\n    221: ']'\n  }; // Ref: http://unixpapa.com/js/key.html\n\n  var onKey = function (event) {\n    var code = event.keyCode,\n        key = keys[code],\n        modifiers = '',\n        range = this.getSelection();\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (!key) {\n      key = String.fromCharCode(code).toLowerCase(); // Only reliable for letters and numbers\n\n      if (!/^[A-Za-z0-9]$/.test(key)) {\n        key = '';\n      }\n    } // On keypress, delete and '.' both have event.keyCode 46\n    // Must check event.which to differentiate.\n\n\n    if (isPresto && event.which === 46) {\n      key = '.';\n    } // Function keys\n\n\n    if (111 < code && code < 124) {\n      key = 'f' + (code - 111);\n    } // We need to apply the backspace/delete handlers regardless of\n    // control key modifiers.\n\n\n    if (key !== 'backspace' && key !== 'delete') {\n      if (event.altKey) {\n        modifiers += 'alt-';\n      }\n\n      if (event.ctrlKey) {\n        modifiers += 'ctrl-';\n      }\n\n      if (event.metaKey) {\n        modifiers += 'meta-';\n      }\n    } // However, on Windows, shift-delete is apparently \"cut\" (WTF right?), so\n    // we want to let the browser handle shift-delete.\n\n\n    if (event.shiftKey) {\n      modifiers += 'shift-';\n    }\n\n    key = modifiers + key;\n\n    if (this._keyHandlers[key]) {\n      this._keyHandlers[key](this, event, range); // !event.isComposing stops us from blatting Kana-Kanji conversion in Safari\n\n    } else if (!range.collapsed && !event.isComposing && !event.ctrlKey && !event.metaKey && (event.key || key).length === 1) {\n      // Record undo checkpoint.\n      this.saveUndoState(range); // Delete the selection\n\n      deleteContentsOfRange(range, this._root);\n\n      this._ensureBottomLine();\n\n      this.setSelection(range);\n\n      this._updatePath(range, true);\n    }\n  };\n\n  var mapKeyTo = function (method) {\n    return function (self, event) {\n      event.preventDefault();\n      self[method]();\n    };\n  };\n\n  var mapKeyToFormat = function (tag, remove) {\n    remove = remove || null;\n    return function (self, event) {\n      event.preventDefault();\n      var range = self.getSelection();\n\n      if (self.hasFormat(tag, null, range)) {\n        self.changeFormat(null, {\n          tag: tag\n        }, range);\n      } else {\n        self.changeFormat({\n          tag: tag\n        }, remove, range);\n      }\n    };\n  }; // If you delete the content inside a span with a font styling, Webkit will\n  // replace it with a <font> tag (!). If you delete all the text inside a\n  // link in Opera, it won't delete the link. Let's make things consistent. If\n  // you delete all text inside an inline tag, remove the inline tag.\n\n\n  var afterDelete = function (self, range) {\n    try {\n      if (!range) {\n        range = self.getSelection();\n      }\n\n      var node = range.startContainer,\n          parent; // Climb the tree from the focus point while we are inside an empty\n      // inline element\n\n      if (node.nodeType === TEXT_NODE) {\n        node = node.parentNode;\n      }\n\n      parent = node;\n\n      while (isInline(parent) && (!parent.textContent || parent.textContent === ZWS)) {\n        node = parent;\n        parent = node.parentNode;\n      } // If focused in empty inline element\n\n\n      if (node !== parent) {\n        // Move focus to just before empty inline(s)\n        range.setStart(parent, indexOf.call(parent.childNodes, node));\n        range.collapse(true); // Remove empty inline(s)\n\n        parent.removeChild(node); // Fix cursor in block\n\n        if (!isBlock(parent)) {\n          parent = getPreviousBlock(parent, self._root);\n        }\n\n        fixCursor(parent, self._root); // Move cursor into text node\n\n        moveRangeBoundariesDownTree(range);\n      } // If you delete the last character in the sole <div> in Chrome,\n      // it removes the div and replaces it with just a <br> inside the\n      // root. Detach the <br>; the _ensureBottomLine call will insert a new\n      // block.\n\n\n      if (node === self._root && (node = node.firstChild) && node.nodeName === 'BR') {\n        detach(node);\n      }\n\n      self._ensureBottomLine();\n\n      self.setSelection(range);\n\n      self._updatePath(range, true);\n    } catch (error) {\n      self.didError(error);\n    }\n  };\n\n  var keyHandlers = {\n    enter: function (self, event, range) {\n      var root = self._root;\n      var block, parent, node, offset, nodeAfterSplit; // We handle this ourselves\n\n      event.preventDefault(); // Save undo checkpoint and add any links in the preceding section.\n      // Remove any zws so we don't think there's content in an empty\n      // block.\n\n      self._recordUndoState(range);\n\n      addLinks(range.startContainer, root, self);\n\n      self._removeZWS();\n\n      self._getRangeAndRemoveBookmark(range); // Selected text is overwritten, therefore delete the contents\n      // to collapse selection.\n\n\n      if (!range.collapsed) {\n        deleteContentsOfRange(range, root);\n      }\n\n      block = getStartBlockOfRange(range, root); // Inside a PRE, insert literal newline, unless on blank line.\n\n      if (block && (parent = getNearest(block, root, 'PRE'))) {\n        moveRangeBoundariesDownTree(range);\n        node = range.startContainer;\n        offset = range.startOffset;\n\n        if (node.nodeType !== TEXT_NODE) {\n          node = self._doc.createTextNode('');\n          parent.insertBefore(node, parent.firstChild);\n        } // If blank line: split and insert default block\n\n\n        if (!event.shiftKey && (node.data.charAt(offset - 1) === '\\n' || rangeDoesStartAtBlockBoundary(range, root)) && (node.data.charAt(offset) === '\\n' || rangeDoesEndAtBlockBoundary(range, root))) {\n          node.deleteData(offset && offset - 1, offset ? 2 : 1);\n          nodeAfterSplit = split(node, offset && offset - 1, root, root);\n          node = nodeAfterSplit.previousSibling;\n\n          if (!node.textContent) {\n            detach(node);\n          }\n\n          node = self.createDefaultBlock();\n          nodeAfterSplit.parentNode.insertBefore(node, nodeAfterSplit);\n\n          if (!nodeAfterSplit.textContent) {\n            detach(nodeAfterSplit);\n          }\n\n          range.setStart(node, 0);\n        } else {\n          node.insertData(offset, '\\n');\n          fixCursor(parent, root); // Firefox bug: if you set the selection in the text node after\n          // the new line, it draws the cursor before the line break still\n          // but if you set the selection to the equivalent position\n          // in the parent, it works.\n\n          if (node.length === offset + 1) {\n            range.setStartAfter(node);\n          } else {\n            range.setStart(node, offset + 1);\n          }\n        }\n\n        range.collapse(true);\n        self.setSelection(range);\n\n        self._updatePath(range, true);\n\n        self._docWasChanged();\n\n        return;\n      } // If this is a malformed bit of document or in a table;\n      // just play it safe and insert a <br>.\n\n\n      if (!block || event.shiftKey || /^T[HD]$/.test(block.nodeName)) {\n        // If inside an <a>, move focus out\n        parent = getNearest(range.endContainer, root, 'A');\n\n        if (parent) {\n          parent = parent.parentNode;\n          moveRangeBoundariesUpTree(range, parent, parent, root);\n          range.collapse(false);\n        }\n\n        insertNodeInRange(range, self.createElement('BR'));\n        range.collapse(false);\n        self.setSelection(range);\n\n        self._updatePath(range, true);\n\n        return;\n      } // If in a list, we'll split the LI instead.\n\n\n      if (parent = getNearest(block, root, 'LI')) {\n        block = parent;\n      }\n\n      if (isEmptyBlock(block)) {\n        // Break list\n        if (getNearest(block, root, 'UL') || getNearest(block, root, 'OL')) {\n          return self.decreaseListLevel(range);\n        } // Break blockquote\n        else if (getNearest(block, root, 'BLOCKQUOTE')) {\n            return self.modifyBlocks(removeBlockQuote, range);\n          }\n      } // Otherwise, split at cursor point.\n\n\n      nodeAfterSplit = splitBlock(self, block, range.startContainer, range.startOffset); // Clean up any empty inlines if we hit enter at the beginning of the\n      // block\n\n      removeZWS(block);\n      removeEmptyInlines(block);\n      fixCursor(block, root); // Focus cursor\n      // If there's a <b>/<i> etc. at the beginning of the split\n      // make sure we focus inside it.\n\n      while (nodeAfterSplit.nodeType === ELEMENT_NODE) {\n        var child = nodeAfterSplit.firstChild,\n            next; // Don't continue links over a block break; unlikely to be the\n        // desired outcome.\n\n        if (nodeAfterSplit.nodeName === 'A' && (!nodeAfterSplit.textContent || nodeAfterSplit.textContent === ZWS)) {\n          child = self._doc.createTextNode('');\n          replaceWith(nodeAfterSplit, child);\n          nodeAfterSplit = child;\n          break;\n        }\n\n        while (child && child.nodeType === TEXT_NODE && !child.data) {\n          next = child.nextSibling;\n\n          if (!next || next.nodeName === 'BR') {\n            break;\n          }\n\n          detach(child);\n          child = next;\n        } // 'BR's essentially don't count; they're a browser hack.\n        // If you try to select the contents of a 'BR', FF will not let\n        // you type anything!\n\n\n        if (!child || child.nodeName === 'BR' || child.nodeType === TEXT_NODE && !isPresto) {\n          break;\n        }\n\n        nodeAfterSplit = child;\n      }\n\n      range = self.createRange(nodeAfterSplit, 0);\n      self.setSelection(range);\n\n      self._updatePath(range, true);\n    },\n    'shift-enter': function (self, event, range) {\n      return self._keyHandlers.enter(self, event, range);\n    },\n    backspace: function (self, event, range) {\n      var root = self._root;\n\n      self._removeZWS(); // Record undo checkpoint.\n\n\n      self.saveUndoState(range); // If not collapsed, delete contents\n\n      if (!range.collapsed) {\n        event.preventDefault();\n        deleteContentsOfRange(range, root);\n        afterDelete(self, range);\n      } // If at beginning of block, merge with previous\n      else if (rangeDoesStartAtBlockBoundary(range, root)) {\n          event.preventDefault();\n          var current = getStartBlockOfRange(range, root);\n          var previous;\n\n          if (!current) {\n            return;\n          } // In case inline data has somehow got between blocks.\n\n\n          fixContainer(current.parentNode, root); // Now get previous block\n\n          previous = getPreviousBlock(current, root); // Must not be at the very beginning of the text area.\n\n          if (previous) {\n            // If not editable, just delete whole block.\n            if (!previous.isContentEditable) {\n              detach(previous);\n              return;\n            } // Otherwise merge.\n\n\n            mergeWithBlock(previous, current, range, root); // If deleted line between containers, merge newly adjacent\n            // containers.\n\n            current = previous.parentNode;\n\n            while (current !== root && !current.nextSibling) {\n              current = current.parentNode;\n            }\n\n            if (current !== root && (current = current.nextSibling)) {\n              mergeContainers(current, root);\n            }\n\n            self.setSelection(range);\n          } // If at very beginning of text area, allow backspace\n          // to break lists/blockquote.\n          else if (current) {\n              // Break list\n              if (getNearest(current, root, 'UL') || getNearest(current, root, 'OL')) {\n                return self.decreaseListLevel(range);\n              } // Break blockquote\n              else if (getNearest(current, root, 'BLOCKQUOTE')) {\n                  return self.modifyBlocks(decreaseBlockQuoteLevel, range);\n                }\n\n              self.setSelection(range);\n\n              self._updatePath(range, true);\n            }\n        } // Otherwise, leave to browser but check afterwards whether it has\n        // left behind an empty inline tag.\n        else {\n            self.setSelection(range);\n            setTimeout(function () {\n              afterDelete(self);\n            }, 0);\n          }\n    },\n    'delete': function (self, event, range) {\n      var root = self._root;\n      var current, next, originalRange, cursorContainer, cursorOffset, nodeAfterCursor;\n\n      self._removeZWS(); // Record undo checkpoint.\n\n\n      self.saveUndoState(range); // If not collapsed, delete contents\n\n      if (!range.collapsed) {\n        event.preventDefault();\n        deleteContentsOfRange(range, root);\n        afterDelete(self, range);\n      } // If at end of block, merge next into this block\n      else if (rangeDoesEndAtBlockBoundary(range, root)) {\n          event.preventDefault();\n          current = getStartBlockOfRange(range, root);\n\n          if (!current) {\n            return;\n          } // In case inline data has somehow got between blocks.\n\n\n          fixContainer(current.parentNode, root); // Now get next block\n\n          next = getNextBlock(current, root); // Must not be at the very end of the text area.\n\n          if (next) {\n            // If not editable, just delete whole block.\n            if (!next.isContentEditable) {\n              detach(next);\n              return;\n            } // Otherwise merge.\n\n\n            mergeWithBlock(current, next, range, root); // If deleted line between containers, merge newly adjacent\n            // containers.\n\n            next = current.parentNode;\n\n            while (next !== root && !next.nextSibling) {\n              next = next.parentNode;\n            }\n\n            if (next !== root && (next = next.nextSibling)) {\n              mergeContainers(next, root);\n            }\n\n            self.setSelection(range);\n\n            self._updatePath(range, true);\n          }\n        } // Otherwise, leave to browser but check afterwards whether it has\n        // left behind an empty inline tag.\n        else {\n            // But first check if the cursor is just before an IMG tag. If so,\n            // delete it ourselves, because the browser won't if it is not\n            // inline.\n            originalRange = range.cloneRange();\n            moveRangeBoundariesUpTree(range, root, root, root);\n            cursorContainer = range.endContainer;\n            cursorOffset = range.endOffset;\n\n            if (cursorContainer.nodeType === ELEMENT_NODE) {\n              nodeAfterCursor = cursorContainer.childNodes[cursorOffset];\n\n              if (nodeAfterCursor && nodeAfterCursor.nodeName === 'IMG') {\n                event.preventDefault();\n                detach(nodeAfterCursor);\n                moveRangeBoundariesDownTree(range);\n                afterDelete(self, range);\n                return;\n              }\n            }\n\n            self.setSelection(originalRange);\n            setTimeout(function () {\n              afterDelete(self);\n            }, 0);\n          }\n    },\n    tab: function (self, event, range) {\n      var root = self._root;\n      var node, parent;\n\n      self._removeZWS(); // If no selection and at start of block\n\n\n      if (range.collapsed && rangeDoesStartAtBlockBoundary(range, root)) {\n        node = getStartBlockOfRange(range, root); // Iterate through the block's parents\n\n        while (parent = node.parentNode) {\n          // If we find a UL or OL (so are in a list, node must be an LI)\n          if (parent.nodeName === 'UL' || parent.nodeName === 'OL') {\n            // Then increase the list level\n            event.preventDefault();\n            self.increaseListLevel(range);\n            break;\n          }\n\n          node = parent;\n        }\n      }\n    },\n    'shift-tab': function (self, event, range) {\n      var root = self._root;\n      var node;\n\n      self._removeZWS(); // If no selection and at start of block\n\n\n      if (range.collapsed && rangeDoesStartAtBlockBoundary(range, root)) {\n        // Break list\n        node = range.startContainer;\n\n        if (getNearest(node, root, 'UL') || getNearest(node, root, 'OL')) {\n          event.preventDefault();\n          self.decreaseListLevel(range);\n        }\n      }\n    },\n    space: function (self, _, range) {\n      var node, parent;\n      var root = self._root;\n\n      self._recordUndoState(range);\n\n      addLinks(range.startContainer, root, self);\n\n      self._getRangeAndRemoveBookmark(range); // If the cursor is at the end of a link (<a>foo|</a>) then move it\n      // outside of the link (<a>foo</a>|) so that the space is not part of\n      // the link text.\n\n\n      node = range.endContainer;\n\n      if (range.collapsed && range.endOffset === getLength(node)) {\n        do {\n          if (node.nodeName === 'A') {\n            range.setStartAfter(node);\n            break;\n          }\n        } while (!node.nextSibling && (node = node.parentNode) && node !== root);\n      } // Delete the selection if not collapsed\n\n\n      if (!range.collapsed) {\n        deleteContentsOfRange(range, root);\n\n        self._ensureBottomLine();\n\n        self.setSelection(range);\n\n        self._updatePath(range, true);\n      }\n\n      self.setSelection(range);\n    },\n    left: function (self) {\n      self._removeZWS();\n    },\n    right: function (self) {\n      self._removeZWS();\n    }\n  }; // Firefox pre v29 incorrectly handles Cmd-left/Cmd-right on Mac:\n  // it goes back/forward in history! Override to do the right\n  // thing.\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=289384\n\n  if (isMac && isGecko) {\n    keyHandlers['meta-left'] = function (self, event) {\n      event.preventDefault();\n      var sel = getWindowSelection(self);\n\n      if (sel && sel.modify) {\n        sel.modify('move', 'backward', 'lineboundary');\n      }\n    };\n\n    keyHandlers['meta-right'] = function (self, event) {\n      event.preventDefault();\n      var sel = getWindowSelection(self);\n\n      if (sel && sel.modify) {\n        sel.modify('move', 'forward', 'lineboundary');\n      }\n    };\n  } // System standard for page up/down on Mac is to just scroll, not move the\n  // cursor. On Linux/Windows, it should move the cursor, but some browsers don't\n  // implement this natively. Override to support it.\n\n\n  if (!isMac) {\n    keyHandlers.pageup = function (self) {\n      self.moveCursorToStart();\n    };\n\n    keyHandlers.pagedown = function (self) {\n      self.moveCursorToEnd();\n    };\n  }\n\n  keyHandlers[ctrlKey + 'b'] = mapKeyToFormat('B');\n  keyHandlers[ctrlKey + 'i'] = mapKeyToFormat('I');\n  keyHandlers[ctrlKey + 'u'] = mapKeyToFormat('U');\n  keyHandlers[ctrlKey + 'shift-7'] = mapKeyToFormat('S');\n  keyHandlers[ctrlKey + 'shift-5'] = mapKeyToFormat('SUB', {\n    tag: 'SUP'\n  });\n  keyHandlers[ctrlKey + 'shift-6'] = mapKeyToFormat('SUP', {\n    tag: 'SUB'\n  });\n  keyHandlers[ctrlKey + 'shift-8'] = mapKeyTo('makeUnorderedList');\n  keyHandlers[ctrlKey + 'shift-9'] = mapKeyTo('makeOrderedList');\n  keyHandlers[ctrlKey + '['] = mapKeyTo('decreaseQuoteLevel');\n  keyHandlers[ctrlKey + ']'] = mapKeyTo('increaseQuoteLevel');\n  keyHandlers[ctrlKey + 'd'] = mapKeyTo('toggleCode');\n  keyHandlers[ctrlKey + 'y'] = mapKeyTo('redo');\n  keyHandlers[ctrlKey + 'z'] = mapKeyTo('undo');\n  keyHandlers[ctrlKey + 'shift-z'] = mapKeyTo('redo');\n  var fontSizes = {\n    1: 10,\n    2: 13,\n    3: 16,\n    4: 18,\n    5: 24,\n    6: 32,\n    7: 48\n  };\n  var styleToSemantic = {\n    backgroundColor: {\n      regexp: notWS,\n      replace: function (doc, classNames, colour) {\n        return createElement(doc, 'SPAN', {\n          'class': classNames.highlight,\n          style: 'background-color:' + colour\n        });\n      }\n    },\n    color: {\n      regexp: notWS,\n      replace: function (doc, classNames, colour) {\n        return createElement(doc, 'SPAN', {\n          'class': classNames.colour,\n          style: 'color:' + colour\n        });\n      }\n    },\n    fontWeight: {\n      regexp: /^bold|^700/i,\n      replace: function (doc) {\n        return createElement(doc, 'B');\n      }\n    },\n    fontStyle: {\n      regexp: /^italic/i,\n      replace: function (doc) {\n        return createElement(doc, 'I');\n      }\n    },\n    fontFamily: {\n      regexp: notWS,\n      replace: function (doc, classNames, family) {\n        return createElement(doc, 'SPAN', {\n          'class': classNames.fontFamily,\n          style: 'font-family:' + family\n        });\n      }\n    },\n    fontSize: {\n      regexp: notWS,\n      replace: function (doc, classNames, size) {\n        return createElement(doc, 'SPAN', {\n          'class': classNames.fontSize,\n          style: 'font-size:' + size\n        });\n      }\n    },\n    textDecoration: {\n      regexp: /^underline/i,\n      replace: function (doc) {\n        return createElement(doc, 'U');\n      }\n    }\n  };\n\n  var replaceWithTag = function (tag) {\n    return function (node, parent) {\n      var el = createElement(node.ownerDocument, tag);\n      parent.replaceChild(el, node);\n      el.appendChild(empty(node));\n      return el;\n    };\n  };\n\n  var replaceStyles = function (node, parent, config) {\n    var style = node.style;\n    var doc = node.ownerDocument;\n    var attr, converter, css, newTreeBottom, newTreeTop, el;\n\n    for (attr in styleToSemantic) {\n      converter = styleToSemantic[attr];\n      css = style[attr];\n\n      if (css && converter.regexp.test(css)) {\n        el = converter.replace(doc, config.classNames, css);\n\n        if (!newTreeTop) {\n          newTreeTop = el;\n        }\n\n        if (newTreeBottom) {\n          newTreeBottom.appendChild(el);\n        }\n\n        newTreeBottom = el;\n        node.style[attr] = '';\n      }\n    }\n\n    if (newTreeTop) {\n      newTreeBottom.appendChild(empty(node));\n\n      if (node.nodeName === 'SPAN') {\n        parent.replaceChild(newTreeTop, node);\n      } else {\n        node.appendChild(newTreeTop);\n      }\n    }\n\n    return newTreeBottom || node;\n  };\n\n  var stylesRewriters = {\n    P: replaceStyles,\n    SPAN: replaceStyles,\n    STRONG: replaceWithTag('B'),\n    EM: replaceWithTag('I'),\n    INS: replaceWithTag('U'),\n    STRIKE: replaceWithTag('S'),\n    FONT: function (node, parent, config) {\n      var face = node.face;\n      var size = node.size;\n      var colour = node.color;\n      var doc = node.ownerDocument;\n      var classNames = config.classNames;\n      var fontSpan, sizeSpan, colourSpan;\n      var newTreeBottom, newTreeTop;\n\n      if (face) {\n        fontSpan = createElement(doc, 'SPAN', {\n          'class': classNames.fontFamily,\n          style: 'font-family:' + face\n        });\n        newTreeTop = fontSpan;\n        newTreeBottom = fontSpan;\n      }\n\n      if (size) {\n        sizeSpan = createElement(doc, 'SPAN', {\n          'class': classNames.fontSize,\n          style: 'font-size:' + fontSizes[size] + 'px'\n        });\n\n        if (!newTreeTop) {\n          newTreeTop = sizeSpan;\n        }\n\n        if (newTreeBottom) {\n          newTreeBottom.appendChild(sizeSpan);\n        }\n\n        newTreeBottom = sizeSpan;\n      }\n\n      if (colour && /^#?([\\dA-F]{3}){1,2}$/i.test(colour)) {\n        if (colour.charAt(0) !== '#') {\n          colour = '#' + colour;\n        }\n\n        colourSpan = createElement(doc, 'SPAN', {\n          'class': classNames.colour,\n          style: 'color:' + colour\n        });\n\n        if (!newTreeTop) {\n          newTreeTop = colourSpan;\n        }\n\n        if (newTreeBottom) {\n          newTreeBottom.appendChild(colourSpan);\n        }\n\n        newTreeBottom = colourSpan;\n      }\n\n      if (!newTreeTop) {\n        newTreeTop = newTreeBottom = createElement(doc, 'SPAN');\n      }\n\n      parent.replaceChild(newTreeTop, node);\n      newTreeBottom.appendChild(empty(node));\n      return newTreeBottom;\n    },\n    TT: function (node, parent, config) {\n      var el = createElement(node.ownerDocument, 'SPAN', {\n        'class': config.classNames.fontFamily,\n        style: 'font-family:menlo,consolas,\"courier new\",monospace'\n      });\n      parent.replaceChild(el, node);\n      el.appendChild(empty(node));\n      return el;\n    }\n  };\n  var allowedBlock = /^(?:A(?:DDRESS|RTICLE|SIDE|UDIO)|BLOCKQUOTE|CAPTION|D(?:[DLT]|IV)|F(?:IGURE|IGCAPTION|OOTER)|H[1-6]|HEADER|L(?:ABEL|EGEND|I)|O(?:L|UTPUT)|P(?:RE)?|SECTION|T(?:ABLE|BODY|D|FOOT|H|HEAD|R)|COL(?:GROUP)?|UL)$/;\n  var blacklist = /^(?:HEAD|META|STYLE)/;\n  var walker = new TreeWalker(null, SHOW_TEXT | SHOW_ELEMENT);\n  /*\n      Two purposes:\n  \n      1. Remove nodes we don't want, such as weird <o:p> tags, comment nodes\n         and whitespace nodes.\n      2. Convert inline tags into our preferred format.\n  */\n\n  var cleanTree = function cleanTree(node, config, preserveWS) {\n    var children = node.childNodes,\n        nonInlineParent,\n        i,\n        l,\n        child,\n        nodeName,\n        nodeType,\n        rewriter,\n        childLength,\n        startsWithWS,\n        endsWithWS,\n        data,\n        sibling;\n    nonInlineParent = node;\n\n    while (isInline(nonInlineParent)) {\n      nonInlineParent = nonInlineParent.parentNode;\n    }\n\n    walker.root = nonInlineParent;\n\n    for (i = 0, l = children.length; i < l; i += 1) {\n      child = children[i];\n      nodeName = child.nodeName;\n      nodeType = child.nodeType;\n      rewriter = stylesRewriters[nodeName];\n\n      if (nodeType === ELEMENT_NODE) {\n        childLength = child.childNodes.length;\n\n        if (rewriter) {\n          child = rewriter(child, node, config);\n        } else if (blacklist.test(nodeName)) {\n          node.removeChild(child);\n          i -= 1;\n          l -= 1;\n          continue;\n        } else if (!allowedBlock.test(nodeName) && !isInline(child)) {\n          i -= 1;\n          l += childLength - 1;\n          node.replaceChild(empty(child), child);\n          continue;\n        }\n\n        if (childLength) {\n          cleanTree(child, config, preserveWS || nodeName === 'PRE');\n        }\n      } else {\n        if (nodeType === TEXT_NODE) {\n          data = child.data;\n          startsWithWS = !notWS.test(data.charAt(0));\n          endsWithWS = !notWS.test(data.charAt(data.length - 1));\n\n          if (preserveWS || !startsWithWS && !endsWithWS) {\n            continue;\n          } // Iterate through the nodes; if we hit some other content\n          // before the start of a new block we don't trim\n\n\n          if (startsWithWS) {\n            walker.currentNode = child;\n\n            while (sibling = walker.previousPONode()) {\n              nodeName = sibling.nodeName;\n\n              if (nodeName === 'IMG' || nodeName === '#text' && notWS.test(sibling.data)) {\n                break;\n              }\n\n              if (!isInline(sibling)) {\n                sibling = null;\n                break;\n              }\n            }\n\n            data = data.replace(/^[ \\t\\r\\n]+/g, sibling ? ' ' : '');\n          }\n\n          if (endsWithWS) {\n            walker.currentNode = child;\n\n            while (sibling = walker.nextNode()) {\n              if (nodeName === 'IMG' || nodeName === '#text' && notWS.test(sibling.data)) {\n                break;\n              }\n\n              if (!isInline(sibling)) {\n                sibling = null;\n                break;\n              }\n            }\n\n            data = data.replace(/[ \\t\\r\\n]+$/g, sibling ? ' ' : '');\n          }\n\n          if (data) {\n            child.data = data;\n            continue;\n          }\n        }\n\n        node.removeChild(child);\n        i -= 1;\n        l -= 1;\n      }\n    }\n\n    return node;\n  }; // ---\n\n\n  var removeEmptyInlines = function removeEmptyInlines(node) {\n    var children = node.childNodes,\n        l = children.length,\n        child;\n\n    while (l--) {\n      child = children[l];\n\n      if (child.nodeType === ELEMENT_NODE && !isLeaf(child)) {\n        removeEmptyInlines(child);\n\n        if (isInline(child) && !child.firstChild) {\n          node.removeChild(child);\n        }\n      } else if (child.nodeType === TEXT_NODE && !child.data) {\n        node.removeChild(child);\n      }\n    }\n  }; // ---\n\n\n  var notWSTextNode = function (node) {\n    return node.nodeType === ELEMENT_NODE ? node.nodeName === 'BR' : notWS.test(node.data);\n  };\n\n  var isLineBreak = function (br, isLBIfEmptyBlock) {\n    var block = br.parentNode;\n    var walker;\n\n    while (isInline(block)) {\n      block = block.parentNode;\n    }\n\n    walker = new TreeWalker(block, SHOW_ELEMENT | SHOW_TEXT, notWSTextNode);\n    walker.currentNode = br;\n    return !!walker.nextNode() || isLBIfEmptyBlock && !walker.previousNode();\n  }; // <br> elements are treated specially, and differently depending on the\n  // browser, when in rich text editor mode. When adding HTML from external\n  // sources, we must remove them, replacing the ones that actually affect\n  // line breaks by wrapping the inline text in a <div>. Browsers that want <br>\n  // elements at the end of each block will then have them added back in a later\n  // fixCursor method call.\n\n\n  var cleanupBRs = function (node, root, keepForBlankLine) {\n    var brs = node.querySelectorAll('BR');\n    var brBreaksLine = [];\n    var l = brs.length;\n    var i, br, parent; // Must calculate whether the <br> breaks a line first, because if we\n    // have two <br>s next to each other, after the first one is converted\n    // to a block split, the second will be at the end of a block and\n    // therefore seem to not be a line break. But in its original context it\n    // was, so we should also convert it to a block split.\n\n    for (i = 0; i < l; i += 1) {\n      brBreaksLine[i] = isLineBreak(brs[i], keepForBlankLine);\n    }\n\n    while (l--) {\n      br = brs[l]; // Cleanup may have removed it\n\n      parent = br.parentNode;\n\n      if (!parent) {\n        continue;\n      } // If it doesn't break a line, just remove it; it's not doing\n      // anything useful. We'll add it back later if required by the\n      // browser. If it breaks a line, wrap the content in div tags\n      // and replace the brs.\n\n\n      if (!brBreaksLine[l]) {\n        detach(br);\n      } else if (!isInline(parent)) {\n        fixContainer(parent, root);\n      }\n    }\n  }; // The (non-standard but supported enough) innerText property is based on the\n  // render tree in Firefox and possibly other browsers, so we must insert the\n  // DOM node into the document to ensure the text part is correct.\n\n\n  var setClipboardData = function (clipboardData, node, root, config) {\n    var body = node.ownerDocument.body;\n    var willCutCopy = config.willCutCopy;\n    var html, text; // Firefox will add an extra new line for BRs at the end of block when\n    // calculating innerText, even though they don't actually affect display.\n    // So we need to remove them first.\n\n    cleanupBRs(node, root, true);\n    node.setAttribute('style', 'position:fixed;overflow:hidden;bottom:100%;right:100%;');\n    body.appendChild(node);\n    html = node.innerHTML;\n    text = node.innerText || node.textContent;\n\n    if (willCutCopy) {\n      html = willCutCopy(html);\n    } // Firefox (and others?) returns unix line endings (\\n) even on Windows.\n    // If on Windows, normalise to \\r\\n, since Notepad and some other crappy\n    // apps do not understand just \\n.\n\n\n    if (isWin) {\n      text = text.replace(/\\r?\\n/g, '\\r\\n');\n    }\n\n    clipboardData.setData('text/html', html);\n    clipboardData.setData('text/plain', text);\n    body.removeChild(node);\n  };\n\n  var onCut = function (event) {\n    var clipboardData = event.clipboardData;\n    var range = this.getSelection();\n    var root = this._root;\n    var self = this;\n    var startBlock, endBlock, copyRoot, contents, parent, newContents, node; // Nothing to do\n\n    if (range.collapsed) {\n      event.preventDefault();\n      return;\n    } // Save undo checkpoint\n\n\n    this.saveUndoState(range); // Edge only seems to support setting plain text as of 2016-03-11.\n    // Mobile Safari flat out doesn't work:\n    // https://bugs.webkit.org/show_bug.cgi?id=143776\n\n    if (!isEdge && !isIOS && clipboardData) {\n      // Clipboard content should include all parents within block, or all\n      // parents up to root if selection across blocks\n      startBlock = getStartBlockOfRange(range, root);\n      endBlock = getEndBlockOfRange(range, root);\n      copyRoot = startBlock === endBlock && startBlock || root; // Extract the contents\n\n      contents = deleteContentsOfRange(range, root); // Add any other parents not in extracted content, up to copy root\n\n      parent = range.commonAncestorContainer;\n\n      if (parent.nodeType === TEXT_NODE) {\n        parent = parent.parentNode;\n      }\n\n      while (parent && parent !== copyRoot) {\n        newContents = parent.cloneNode(false);\n        newContents.appendChild(contents);\n        contents = newContents;\n        parent = parent.parentNode;\n      } // Set clipboard data\n\n\n      node = this.createElement('div');\n      node.appendChild(contents);\n      setClipboardData(clipboardData, node, root, this._config);\n      event.preventDefault();\n    } else {\n      setTimeout(function () {\n        try {\n          // If all content removed, ensure div at start of root.\n          self._ensureBottomLine();\n        } catch (error) {\n          self.didError(error);\n        }\n      }, 0);\n    }\n\n    this.setSelection(range);\n  };\n\n  var onCopy = function (event) {\n    var clipboardData = event.clipboardData;\n    var range = this.getSelection();\n    var root = this._root;\n    var startBlock, endBlock, copyRoot, contents, parent, newContents, node; // Edge only seems to support setting plain text as of 2016-03-11.\n    // Mobile Safari flat out doesn't work:\n    // https://bugs.webkit.org/show_bug.cgi?id=143776\n\n    if (!isEdge && !isIOS && clipboardData) {\n      // Clipboard content should include all parents within block, or all\n      // parents up to root if selection across blocks\n      startBlock = getStartBlockOfRange(range, root);\n      endBlock = getEndBlockOfRange(range, root);\n      copyRoot = startBlock === endBlock && startBlock || root; // Clone range to mutate, then move up as high as possible without\n      // passing the copy root node.\n\n      range = range.cloneRange();\n      moveRangeBoundariesDownTree(range);\n      moveRangeBoundariesUpTree(range, copyRoot, copyRoot, root); // Extract the contents\n\n      contents = range.cloneContents(); // Add any other parents not in extracted content, up to copy root\n\n      parent = range.commonAncestorContainer;\n\n      if (parent.nodeType === TEXT_NODE) {\n        parent = parent.parentNode;\n      }\n\n      while (parent && parent !== copyRoot) {\n        newContents = parent.cloneNode(false);\n        newContents.appendChild(contents);\n        contents = newContents;\n        parent = parent.parentNode;\n      } // Set clipboard data\n\n\n      node = this.createElement('div');\n      node.appendChild(contents);\n      setClipboardData(clipboardData, node, root, this._config);\n      event.preventDefault();\n    }\n  }; // Need to monitor for shift key like this, as event.shiftKey is not available\n  // in paste event.\n\n\n  function monitorShiftKey(event) {\n    this.isShiftDown = event.shiftKey;\n  }\n\n  var onPaste = function (event) {\n    var clipboardData = event.clipboardData;\n    var items = clipboardData && clipboardData.items;\n    var choosePlain = this.isShiftDown;\n    var fireDrop = false;\n    var hasRTF = false;\n    var hasImage = false;\n    var plainItem = null;\n    var htmlItem = null;\n    var self = this;\n    var l, item, type, types, data; // Current HTML5 Clipboard interface\n    // ---------------------------------\n    // https://html.spec.whatwg.org/multipage/interaction.html\n\n    if (items) {\n      l = items.length;\n\n      while (l--) {\n        item = items[l];\n        type = item.type;\n\n        if (type === 'text/html') {\n          htmlItem = item; // iOS copy URL gives you type text/uri-list which is just a list\n          // of 1 or more URLs separated by new lines. Can just treat as\n          // plain text.\n        } else if (type === 'text/plain' || type === 'text/uri-list') {\n          plainItem = item;\n        } else if (type === 'text/rtf') {\n          hasRTF = true;\n        } else if (/^image\\/.*/.test(type)) {\n          hasImage = true;\n        }\n      } // Treat image paste as a drop of an image file. When you copy\n      // an image in Chrome/Firefox (at least), it copies the image data\n      // but also an HTML version (referencing the original URL of the image)\n      // and a plain text version.\n      //\n      // However, when you copy in Excel, you get html, rtf, text, image;\n      // in this instance you want the html version! So let's try using\n      // the presence of text/rtf as an indicator to choose the html version\n      // over the image.\n\n\n      if (hasImage && !(hasRTF && htmlItem)) {\n        event.preventDefault();\n        this.fireEvent('dragover', {\n          dataTransfer: clipboardData,\n\n          /*jshint loopfunc: true */\n          preventDefault: function () {\n            fireDrop = true;\n          }\n          /*jshint loopfunc: false */\n\n        });\n\n        if (fireDrop) {\n          this.fireEvent('drop', {\n            dataTransfer: clipboardData\n          });\n        }\n\n        return;\n      } // Edge only provides access to plain text as of 2016-03-11 and gives no\n      // indication there should be an HTML part. However, it does support\n      // access to image data, so we check for that first. Otherwise though,\n      // fall through to fallback clipboard handling methods\n\n\n      if (!isEdge) {\n        event.preventDefault();\n\n        if (htmlItem && (!choosePlain || !plainItem)) {\n          htmlItem.getAsString(function (html) {\n            self.insertHTML(html, true);\n          });\n        } else if (plainItem) {\n          plainItem.getAsString(function (text) {\n            self.insertPlainText(text, true);\n          });\n        }\n\n        return;\n      }\n    } // Old interface\n    // -------------\n    // Safari (and indeed many other OS X apps) copies stuff as text/rtf\n    // rather than text/html; even from a webpage in Safari. The only way\n    // to get an HTML version is to fallback to letting the browser insert\n    // the content. Same for getting image data. *Sigh*.\n    //\n    // Firefox is even worse: it doesn't even let you know that there might be\n    // an RTF version on the clipboard, but it will also convert to HTML if you\n    // let the browser insert the content. I've filed\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1254028\n\n\n    types = clipboardData && clipboardData.types;\n\n    if (!isEdge && types && (indexOf.call(types, 'text/html') > -1 || !isGecko && indexOf.call(types, 'text/plain') > -1 && indexOf.call(types, 'text/rtf') < 0)) {\n      event.preventDefault(); // Abiword on Linux copies a plain text and html version, but the HTML\n      // version is the empty string! So always try to get HTML, but if none,\n      // insert plain text instead. On iOS, Facebook (and possibly other\n      // apps?) copy links as type text/uri-list, but also insert a **blank**\n      // text/plain item onto the clipboard. Why? Who knows.\n\n      if (!choosePlain && (data = clipboardData.getData('text/html'))) {\n        this.insertHTML(data, true);\n      } else if ((data = clipboardData.getData('text/plain')) || (data = clipboardData.getData('text/uri-list'))) {\n        this.insertPlainText(data, true);\n      }\n\n      return;\n    } // No interface. Includes all versions of IE :(\n    // --------------------------------------------\n\n\n    this._awaitingPaste = true;\n    var body = this._doc.body,\n        range = this.getSelection(),\n        startContainer = range.startContainer,\n        startOffset = range.startOffset,\n        endContainer = range.endContainer,\n        endOffset = range.endOffset; // We need to position the pasteArea in the visible portion of the screen\n    // to stop the browser auto-scrolling.\n\n    var pasteArea = this.createElement('DIV', {\n      contenteditable: 'true',\n      style: 'position:fixed; overflow:hidden; top:0; right:100%; width:1px; height:1px;'\n    });\n    body.appendChild(pasteArea);\n    range.selectNodeContents(pasteArea);\n    this.setSelection(range); // A setTimeout of 0 means this is added to the back of the\n    // single javascript thread, so it will be executed after the\n    // paste event.\n\n    setTimeout(function () {\n      try {\n        // IE sometimes fires the beforepaste event twice; make sure it is\n        // not run again before our after paste function is called.\n        self._awaitingPaste = false; // Get the pasted content and clean\n\n        var html = '',\n            next = pasteArea,\n            first,\n            range; // #88: Chrome can apparently split the paste area if certain\n        // content is inserted; gather them all up.\n\n        while (pasteArea = next) {\n          next = pasteArea.nextSibling;\n          detach(pasteArea); // Safari and IE like putting extra divs around things.\n\n          first = pasteArea.firstChild;\n\n          if (first && first === pasteArea.lastChild && first.nodeName === 'DIV') {\n            pasteArea = first;\n          }\n\n          html += pasteArea.innerHTML;\n        }\n\n        range = self.createRange(startContainer, startOffset, endContainer, endOffset);\n        self.setSelection(range);\n\n        if (html) {\n          self.insertHTML(html, true);\n        }\n      } catch (error) {\n        self.didError(error);\n      }\n    }, 0);\n  }; // On Windows you can drag an drop text. We can't handle this ourselves, because\n  // as far as I can see, there's no way to get the drop insertion point. So just\n  // save an undo state and hope for the best.\n\n\n  var onDrop = function (event) {\n    var types = event.dataTransfer.types;\n    var l = types.length;\n    var hasPlain = false;\n    var hasHTML = false;\n\n    while (l--) {\n      switch (types[l]) {\n        case 'text/plain':\n          hasPlain = true;\n          break;\n\n        case 'text/html':\n          hasHTML = true;\n          break;\n\n        default:\n          return;\n      }\n    }\n\n    if (hasHTML || hasPlain) {\n      this.saveUndoState();\n    }\n  };\n\n  function mergeObjects(base, extras, mayOverride) {\n    var prop, value;\n\n    if (!base) {\n      base = {};\n    }\n\n    if (extras) {\n      for (prop in extras) {\n        if (mayOverride || !(prop in base)) {\n          value = extras[prop];\n          base[prop] = value && value.constructor === Object ? mergeObjects(base[prop], value, mayOverride) : value;\n        }\n      }\n    }\n\n    return base;\n  }\n\n  function Squire(root, config) {\n    if (root.nodeType === DOCUMENT_NODE) {\n      root = root.body;\n    }\n\n    var doc = root.ownerDocument;\n    var win = doc.defaultView;\n    var mutation;\n    this._win = win;\n    this._doc = doc;\n    this._root = root;\n    this._events = {};\n    this._isFocused = false;\n    this._lastSelection = null; // IE loses selection state of iframe on blur, so make sure we\n    // cache it just before it loses focus.\n\n    if (losesSelectionOnBlur) {\n      this.addEventListener('beforedeactivate', this.getSelection);\n    }\n\n    this._hasZWS = false;\n    this._lastAnchorNode = null;\n    this._lastFocusNode = null;\n    this._path = '';\n    this._willUpdatePath = false;\n\n    if ('onselectionchange' in doc) {\n      this.addEventListener('selectionchange', this._updatePathOnEvent);\n    } else {\n      this.addEventListener('keyup', this._updatePathOnEvent);\n      this.addEventListener('mouseup', this._updatePathOnEvent);\n    }\n\n    this._undoIndex = -1;\n    this._undoStack = [];\n    this._undoStackLength = 0;\n    this._isInUndoState = false;\n    this._ignoreChange = false;\n    this._ignoreAllChanges = false;\n\n    if (canObserveMutations) {\n      mutation = new MutationObserver(this._docWasChanged.bind(this));\n      mutation.observe(root, {\n        childList: true,\n        attributes: true,\n        characterData: true,\n        subtree: true\n      });\n      this._mutation = mutation;\n    } else {\n      this.addEventListener('keyup', this._keyUpDetectChange);\n    } // On blur, restore focus except if the user taps or clicks to focus a\n    // specific point. Can't actually use click event because focus happens\n    // before click, so use mousedown/touchstart\n\n\n    this._restoreSelection = false;\n    this.addEventListener('blur', enableRestoreSelection);\n    this.addEventListener('mousedown', disableRestoreSelection);\n    this.addEventListener('touchstart', disableRestoreSelection);\n    this.addEventListener('focus', restoreSelection); // IE sometimes fires the beforepaste event twice; make sure it is not run\n    // again before our after paste function is called.\n\n    this._awaitingPaste = false;\n    this.addEventListener(isIElt11 ? 'beforecut' : 'cut', onCut);\n    this.addEventListener('copy', onCopy);\n    this.addEventListener('keydown', monitorShiftKey);\n    this.addEventListener('keyup', monitorShiftKey);\n    this.addEventListener(isIElt11 ? 'beforepaste' : 'paste', onPaste);\n    this.addEventListener('drop', onDrop); // Opera does not fire keydown repeatedly.\n\n    this.addEventListener(isPresto ? 'keypress' : 'keydown', onKey); // Add key handlers\n\n    this._keyHandlers = Object.create(keyHandlers); // Override default properties\n\n    this.setConfig(config); // Fix IE<10's buggy implementation of Text#splitText.\n    // If the split is at the end of the node, it doesn't insert the newly split\n    // node into the document, and sets its value to undefined rather than ''.\n    // And even if the split is not at the end, the original node is removed\n    // from the document and replaced by another, rather than just having its\n    // data shortened.\n    // We used to feature test for this, but then found the feature test would\n    // sometimes pass, but later on the buggy behaviour would still appear.\n    // I think IE10 does not have the same bug, but it doesn't hurt to replace\n    // its native fn too and then we don't need yet another UA category.\n\n    if (isIElt11) {\n      win.Text.prototype.splitText = function (offset) {\n        var afterSplit = this.ownerDocument.createTextNode(this.data.slice(offset)),\n            next = this.nextSibling,\n            parent = this.parentNode,\n            toDelete = this.length - offset;\n\n        if (next) {\n          parent.insertBefore(afterSplit, next);\n        } else {\n          parent.appendChild(afterSplit);\n        }\n\n        if (toDelete) {\n          this.deleteData(offset, toDelete);\n        }\n\n        return afterSplit;\n      };\n    }\n\n    root.setAttribute('contenteditable', 'true'); // Remove Firefox's built-in controls\n\n    try {\n      doc.execCommand('enableObjectResizing', false, 'false');\n      doc.execCommand('enableInlineTableEditing', false, 'false');\n    } catch (error) {}\n\n    root.__squire__ = this; // Need to register instance before calling setHTML, so that the fixCursor\n    // function can lookup any default block tag options set.\n\n    this.setHTML('');\n  }\n\n  var proto = Squire.prototype;\n\n  var sanitizeToDOMFragment = function (html, isPaste, self) {\n    var doc = self._doc;\n    var frag = html ? DOMPurify.sanitize(html, {\n      ALLOW_UNKNOWN_PROTOCOLS: true,\n      WHOLE_DOCUMENT: false,\n      RETURN_DOM: true,\n      RETURN_DOM_FRAGMENT: true\n    }) : null;\n    return frag ? doc.importNode(frag, true) : doc.createDocumentFragment();\n  };\n\n  proto.setConfig = function (config) {\n    config = mergeObjects({\n      blockTag: 'DIV',\n      blockAttributes: null,\n      tagAttributes: {\n        blockquote: null,\n        ul: null,\n        ol: null,\n        li: null,\n        a: null\n      },\n      classNames: {\n        colour: 'colour',\n        fontFamily: 'font',\n        fontSize: 'size',\n        highlight: 'highlight'\n      },\n      leafNodeNames: leafNodeNames,\n      undo: {\n        documentSizeThreshold: -1,\n        // -1 means no threshold\n        undoLimit: -1 // -1 means no limit\n\n      },\n      isInsertedHTMLSanitized: true,\n      isSetHTMLSanitized: true,\n      sanitizeToDOMFragment: typeof DOMPurify !== 'undefined' && DOMPurify.isSupported ? sanitizeToDOMFragment : null,\n      willCutCopy: null\n    }, config, true); // Users may specify block tag in lower case\n\n    config.blockTag = config.blockTag.toUpperCase();\n    this._config = config;\n    return this;\n  };\n\n  proto.createElement = function (tag, props, children) {\n    return createElement(this._doc, tag, props, children);\n  };\n\n  proto.createDefaultBlock = function (children) {\n    var config = this._config;\n    return fixCursor(this.createElement(config.blockTag, config.blockAttributes, children), this._root);\n  };\n\n  proto.didError = function (error) {\n    console.log(error);\n  };\n\n  proto.getDocument = function () {\n    return this._doc;\n  };\n\n  proto.getRoot = function () {\n    return this._root;\n  };\n\n  proto.modifyDocument = function (modificationCallback) {\n    var mutation = this._mutation;\n\n    if (mutation) {\n      if (mutation.takeRecords().length) {\n        this._docWasChanged();\n      }\n\n      mutation.disconnect();\n    }\n\n    this._ignoreAllChanges = true;\n    modificationCallback();\n    this._ignoreAllChanges = false;\n\n    if (mutation) {\n      mutation.observe(this._root, {\n        childList: true,\n        attributes: true,\n        characterData: true,\n        subtree: true\n      });\n      this._ignoreChange = false;\n    }\n  }; // --- Events ---\n  // Subscribing to these events won't automatically add a listener to the\n  // document node, since these events are fired in a custom manner by the\n  // editor code.\n\n\n  var customEvents = {\n    pathChange: 1,\n    select: 1,\n    input: 1,\n    undoStateChange: 1\n  };\n\n  proto.fireEvent = function (type, event) {\n    var handlers = this._events[type];\n    var isFocused, l, obj; // UI code, especially modal views, may be monitoring for focus events and\n    // immediately removing focus. In certain conditions, this can cause the\n    // focus event to fire after the blur event, which can cause an infinite\n    // loop. So we detect whether we're actually focused/blurred before firing.\n\n    if (/^(?:focus|blur)/.test(type)) {\n      isFocused = this._root === this._doc.activeElement;\n\n      if (type === 'focus') {\n        if (!isFocused || this._isFocused) {\n          return this;\n        }\n\n        this._isFocused = true;\n      } else {\n        if (isFocused || !this._isFocused) {\n          return this;\n        }\n\n        this._isFocused = false;\n      }\n    }\n\n    if (handlers) {\n      if (!event) {\n        event = {};\n      }\n\n      if (event.type !== type) {\n        event.type = type;\n      } // Clone handlers array, so any handlers added/removed do not affect it.\n\n\n      handlers = handlers.slice();\n      l = handlers.length;\n\n      while (l--) {\n        obj = handlers[l];\n\n        try {\n          if (obj.handleEvent) {\n            obj.handleEvent(event);\n          } else {\n            obj.call(this, event);\n          }\n        } catch (error) {\n          error.details = 'Squire: fireEvent error. Event type: ' + type;\n          this.didError(error);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  proto.destroy = function () {\n    var events = this._events;\n    var type;\n\n    for (type in events) {\n      this.removeEventListener(type);\n    }\n\n    if (this._mutation) {\n      this._mutation.disconnect();\n    }\n\n    delete this._root.__squire__; // Destroy undo stack\n\n    this._undoIndex = -1;\n    this._undoStack = [];\n    this._undoStackLength = 0;\n  };\n\n  proto.handleEvent = function (event) {\n    this.fireEvent(event.type, event);\n  };\n\n  proto.addEventListener = function (type, fn) {\n    var handlers = this._events[type];\n    var target = this._root;\n\n    if (!fn) {\n      this.didError({\n        name: 'Squire: addEventListener with null or undefined fn',\n        message: 'Event type: ' + type\n      });\n      return this;\n    }\n\n    if (!handlers) {\n      handlers = this._events[type] = [];\n\n      if (!customEvents[type]) {\n        if (type === 'selectionchange') {\n          target = this._doc;\n        }\n\n        target.addEventListener(type, this, true);\n      }\n    }\n\n    handlers.push(fn);\n    return this;\n  };\n\n  proto.removeEventListener = function (type, fn) {\n    var handlers = this._events[type];\n    var target = this._root;\n    var l;\n\n    if (handlers) {\n      if (fn) {\n        l = handlers.length;\n\n        while (l--) {\n          if (handlers[l] === fn) {\n            handlers.splice(l, 1);\n          }\n        }\n      } else {\n        handlers.length = 0;\n      }\n\n      if (!handlers.length) {\n        delete this._events[type];\n\n        if (!customEvents[type]) {\n          if (type === 'selectionchange') {\n            target = this._doc;\n          }\n\n          target.removeEventListener(type, this, true);\n        }\n      }\n    }\n\n    return this;\n  }; // --- Selection and Path ---\n\n\n  proto.createRange = function (range, startOffset, endContainer, endOffset) {\n    if (range instanceof this._win.Range) {\n      return range.cloneRange();\n    }\n\n    var domRange = this._doc.createRange();\n\n    domRange.setStart(range, startOffset);\n\n    if (endContainer) {\n      domRange.setEnd(endContainer, endOffset);\n    } else {\n      domRange.setEnd(range, startOffset);\n    }\n\n    return domRange;\n  };\n\n  proto.getCursorPosition = function (range) {\n    if (!range && !(range = this.getSelection()) || !range.getBoundingClientRect) {\n      return null;\n    } // Get the bounding rect\n\n\n    var rect = range.getBoundingClientRect();\n    var node, parent;\n\n    if (rect && !rect.top) {\n      this._ignoreChange = true;\n      node = this._doc.createElement('SPAN');\n      node.textContent = ZWS;\n      insertNodeInRange(range, node);\n      rect = node.getBoundingClientRect();\n      parent = node.parentNode;\n      parent.removeChild(node);\n      mergeInlines(parent, range);\n    }\n\n    return rect;\n  };\n\n  proto._moveCursorTo = function (toStart) {\n    var root = this._root,\n        range = this.createRange(root, toStart ? 0 : root.childNodes.length);\n    moveRangeBoundariesDownTree(range);\n    this.setSelection(range);\n    return this;\n  };\n\n  proto.moveCursorToStart = function () {\n    return this._moveCursorTo(true);\n  };\n\n  proto.moveCursorToEnd = function () {\n    return this._moveCursorTo(false);\n  };\n\n  var getWindowSelection = function (self) {\n    return self._win.getSelection() || null;\n  };\n\n  proto.setSelection = function (range) {\n    if (range) {\n      this._lastSelection = range; // If we're setting selection, that automatically, and synchronously, // triggers a focus event. So just store the selection and mark it as\n      // needing restore on focus.\n\n      if (!this._isFocused) {\n        enableRestoreSelection.call(this);\n      } else if (isAndroid && !this._restoreSelection) {\n        // Android closes the keyboard on removeAllRanges() and doesn't\n        // open it again when addRange() is called, sigh.\n        // Since Android doesn't trigger a focus event in setSelection(),\n        // use a blur/focus dance to work around this by letting the\n        // selection be restored on focus.\n        // Need to check for !this._restoreSelection to avoid infinite loop\n        enableRestoreSelection.call(this);\n        this.blur();\n        this.focus();\n      } else {\n        // iOS bug: if you don't focus the iframe before setting the\n        // selection, you can end up in a state where you type but the input\n        // doesn't get directed into the contenteditable area but is instead\n        // lost in a black hole. Very strange.\n        if (isIOS) {\n          this._win.focus();\n        }\n\n        var sel = getWindowSelection(this);\n\n        if (sel) {\n          sel.removeAllRanges();\n          sel.addRange(range);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  proto.getSelection = function () {\n    var sel = getWindowSelection(this);\n    var root = this._root;\n    var selection, startContainer, endContainer, node; // If not focused, always rely on cached selection; another function may\n    // have set it but the DOM is not modified until focus again\n\n    if (this._isFocused && sel && sel.rangeCount) {\n      selection = sel.getRangeAt(0).cloneRange();\n      startContainer = selection.startContainer;\n      endContainer = selection.endContainer; // FF can return the selection as being inside an <img>. WTF?\n\n      if (startContainer && isLeaf(startContainer)) {\n        selection.setStartBefore(startContainer);\n      }\n\n      if (endContainer && isLeaf(endContainer)) {\n        selection.setEndBefore(endContainer);\n      }\n    }\n\n    if (selection && isOrContains(root, selection.commonAncestorContainer)) {\n      this._lastSelection = selection;\n    } else {\n      selection = this._lastSelection;\n      node = selection.commonAncestorContainer; // Check the editor is in the live document; if not, the range has\n      // probably been rewritten by the browser and is bogus\n\n      if (!isOrContains(node.ownerDocument, node)) {\n        selection = null;\n      }\n    }\n\n    if (!selection) {\n      selection = this.createRange(root.firstChild, 0);\n    }\n\n    return selection;\n  };\n\n  function enableRestoreSelection() {\n    this._restoreSelection = true;\n  }\n\n  function disableRestoreSelection() {\n    this._restoreSelection = false;\n  }\n\n  function restoreSelection() {\n    if (this._restoreSelection) {\n      this.setSelection(this._lastSelection);\n    }\n  }\n\n  proto.getSelectedText = function () {\n    var range = this.getSelection();\n\n    if (!range || range.collapsed) {\n      return '';\n    }\n\n    var walker = new TreeWalker(range.commonAncestorContainer, SHOW_TEXT | SHOW_ELEMENT, function (node) {\n      return isNodeContainedInRange(range, node, true);\n    });\n    var startContainer = range.startContainer;\n    var endContainer = range.endContainer;\n    var node = walker.currentNode = startContainer;\n    var textContent = '';\n    var addedTextInBlock = false;\n    var value;\n\n    if (!walker.filter(node)) {\n      node = walker.nextNode();\n    }\n\n    while (node) {\n      if (node.nodeType === TEXT_NODE) {\n        value = node.data;\n\n        if (value && /\\S/.test(value)) {\n          if (node === endContainer) {\n            value = value.slice(0, range.endOffset);\n          }\n\n          if (node === startContainer) {\n            value = value.slice(range.startOffset);\n          }\n\n          textContent += value;\n          addedTextInBlock = true;\n        }\n      } else if (node.nodeName === 'BR' || addedTextInBlock && !isInline(node)) {\n        textContent += '\\n';\n        addedTextInBlock = false;\n      }\n\n      node = walker.nextNode();\n    }\n\n    return textContent;\n  };\n\n  proto.getPath = function () {\n    return this._path;\n  }; // --- Workaround for browsers that can't focus empty text nodes ---\n  // WebKit bug: https://bugs.webkit.org/show_bug.cgi?id=15256\n  // Walk down the tree starting at the root and remove any ZWS. If the node only\n  // contained ZWS space then remove it too. We may want to keep one ZWS node at\n  // the bottom of the tree so the block can be selected. Define that node as the\n  // keepNode.\n\n\n  var removeZWS = function (root, keepNode) {\n    var walker = new TreeWalker(root, SHOW_TEXT);\n    var parent, node, index;\n\n    while (node = walker.nextNode()) {\n      while ((index = node.data.indexOf(ZWS)) > -1 && (!keepNode || node.parentNode !== keepNode)) {\n        if (node.length === 1) {\n          do {\n            parent = node.parentNode;\n            parent.removeChild(node);\n            node = parent;\n            walker.currentNode = parent;\n          } while (isInline(node) && !getLength(node));\n\n          break;\n        } else {\n          node.deleteData(index, 1);\n        }\n      }\n    }\n  };\n\n  proto._didAddZWS = function () {\n    this._hasZWS = true;\n  };\n\n  proto._removeZWS = function () {\n    if (!this._hasZWS) {\n      return;\n    }\n\n    removeZWS(this._root);\n    this._hasZWS = false;\n  }; // --- Path change events ---\n\n\n  proto._updatePath = function (range, force) {\n    if (!range) {\n      return;\n    }\n\n    var anchor = range.startContainer,\n        focus = range.endContainer,\n        newPath;\n\n    if (force || anchor !== this._lastAnchorNode || focus !== this._lastFocusNode) {\n      this._lastAnchorNode = anchor;\n      this._lastFocusNode = focus;\n      newPath = anchor && focus ? anchor === focus ? getPath(focus, this._root, this._config) : '(selection)' : '';\n\n      if (this._path !== newPath) {\n        this._path = newPath;\n        this.fireEvent('pathChange', {\n          path: newPath\n        });\n      }\n    }\n\n    this.fireEvent(range.collapsed ? 'cursor' : 'select', {\n      range: range\n    });\n  }; // selectionchange is fired synchronously in IE when removing current selection\n  // and when setting new selection; keyup/mouseup may have processing we want\n  // to do first. Either way, send to next event loop.\n\n\n  proto._updatePathOnEvent = function (event) {\n    var self = this;\n\n    if (self._isFocused && !self._willUpdatePath) {\n      self._willUpdatePath = true;\n      setTimeout(function () {\n        self._willUpdatePath = false;\n\n        self._updatePath(self.getSelection());\n      }, 0);\n    }\n  }; // --- Focus ---\n\n\n  proto.focus = function () {\n    this._root.focus({\n      preventScroll: true\n    });\n\n    if (isIE) {\n      this.fireEvent('focus');\n    }\n\n    return this;\n  };\n\n  proto.blur = function () {\n    this._root.blur();\n\n    if (isIE) {\n      this.fireEvent('blur');\n    }\n\n    return this;\n  }; // --- Bookmarking ---\n\n\n  var startSelectionId = 'squire-selection-start';\n  var endSelectionId = 'squire-selection-end';\n\n  proto._saveRangeToBookmark = function (range) {\n    var startNode = this.createElement('INPUT', {\n      id: startSelectionId,\n      type: 'hidden'\n    }),\n        endNode = this.createElement('INPUT', {\n      id: endSelectionId,\n      type: 'hidden'\n    }),\n        temp;\n    insertNodeInRange(range, startNode);\n    range.collapse(false);\n    insertNodeInRange(range, endNode); // In a collapsed range, the start is sometimes inserted after the end!\n\n    if (startNode.compareDocumentPosition(endNode) & DOCUMENT_POSITION_PRECEDING) {\n      startNode.id = endSelectionId;\n      endNode.id = startSelectionId;\n      temp = startNode;\n      startNode = endNode;\n      endNode = temp;\n    }\n\n    range.setStartAfter(startNode);\n    range.setEndBefore(endNode);\n  };\n\n  proto._getRangeAndRemoveBookmark = function (range) {\n    var root = this._root,\n        start = root.querySelector('#' + startSelectionId),\n        end = root.querySelector('#' + endSelectionId);\n\n    if (start && end) {\n      var startContainer = start.parentNode,\n          endContainer = end.parentNode,\n          startOffset = indexOf.call(startContainer.childNodes, start),\n          endOffset = indexOf.call(endContainer.childNodes, end);\n\n      if (startContainer === endContainer) {\n        endOffset -= 1;\n      }\n\n      detach(start);\n      detach(end);\n\n      if (!range) {\n        range = this._doc.createRange();\n      }\n\n      range.setStart(startContainer, startOffset);\n      range.setEnd(endContainer, endOffset); // Merge any text nodes we split\n\n      mergeInlines(startContainer, range);\n\n      if (startContainer !== endContainer) {\n        mergeInlines(endContainer, range);\n      } // If we didn't split a text node, we should move into any adjacent\n      // text node to current selection point\n\n\n      if (range.collapsed) {\n        startContainer = range.startContainer;\n\n        if (startContainer.nodeType === TEXT_NODE) {\n          endContainer = startContainer.childNodes[range.startOffset];\n\n          if (!endContainer || endContainer.nodeType !== TEXT_NODE) {\n            endContainer = startContainer.childNodes[range.startOffset - 1];\n          }\n\n          if (endContainer && endContainer.nodeType === TEXT_NODE) {\n            range.setStart(endContainer, 0);\n            range.collapse(true);\n          }\n        }\n      }\n    }\n\n    return range || null;\n  }; // --- Undo ---\n\n\n  proto._keyUpDetectChange = function (event) {\n    var code = event.keyCode; // Presume document was changed if:\n    // 1. A modifier key (other than shift) wasn't held down\n    // 2. The key pressed is not in range 16<=x<=20 (control keys)\n    // 3. The key pressed is not in range 33<=x<=45 (navigation keys)\n\n    if (!event.ctrlKey && !event.metaKey && !event.altKey && (code < 16 || code > 20) && (code < 33 || code > 45)) {\n      this._docWasChanged();\n    }\n  };\n\n  proto._docWasChanged = function () {\n    if (canWeakMap) {\n      nodeCategoryCache = new WeakMap();\n    }\n\n    if (this._ignoreAllChanges) {\n      return;\n    }\n\n    if (canObserveMutations && this._ignoreChange) {\n      this._ignoreChange = false;\n      return;\n    }\n\n    if (this._isInUndoState) {\n      this._isInUndoState = false;\n      this.fireEvent('undoStateChange', {\n        canUndo: true,\n        canRedo: false\n      });\n    }\n\n    this.fireEvent('input');\n  }; // Leaves bookmark\n\n\n  proto._recordUndoState = function (range, replace) {\n    // Don't record if we're already in an undo state\n    if (!this._isInUndoState || replace) {\n      // Advance pointer to new position\n      var undoIndex = this._undoIndex;\n      var undoStack = this._undoStack;\n      var undoConfig = this._config.undo;\n      var undoThreshold = undoConfig.documentSizeThreshold;\n      var undoLimit = undoConfig.undoLimit;\n      var html;\n\n      if (!replace) {\n        undoIndex += 1;\n      } // Truncate stack if longer (i.e. if has been previously undone)\n\n\n      if (undoIndex < this._undoStackLength) {\n        undoStack.length = this._undoStackLength = undoIndex;\n      } // Get data\n\n\n      if (range) {\n        this._saveRangeToBookmark(range);\n      }\n\n      html = this._getHTML(); // If this document is above the configured size threshold,\n      // limit the number of saved undo states.\n      // Threshold is in bytes, JS uses 2 bytes per character\n\n      if (undoThreshold > -1 && html.length * 2 > undoThreshold) {\n        if (undoLimit > -1 && undoIndex > undoLimit) {\n          undoStack.splice(0, undoIndex - undoLimit);\n          undoIndex = undoLimit;\n          this._undoStackLength = undoLimit;\n        }\n      } // Save data\n\n\n      undoStack[undoIndex] = html;\n      this._undoIndex = undoIndex;\n      this._undoStackLength += 1;\n      this._isInUndoState = true;\n    }\n  };\n\n  proto.saveUndoState = function (range) {\n    if (range === undefined) {\n      range = this.getSelection();\n    }\n\n    this._recordUndoState(range, this._isInUndoState);\n\n    this._getRangeAndRemoveBookmark(range);\n\n    return this;\n  };\n\n  proto.undo = function () {\n    // Sanity check: must not be at beginning of the history stack\n    if (this._undoIndex !== 0 || !this._isInUndoState) {\n      // Make sure any changes since last checkpoint are saved.\n      this._recordUndoState(this.getSelection(), false);\n\n      this._undoIndex -= 1;\n\n      this._setHTML(this._undoStack[this._undoIndex]);\n\n      var range = this._getRangeAndRemoveBookmark();\n\n      if (range) {\n        this.setSelection(range);\n      }\n\n      this._isInUndoState = true;\n      this.fireEvent('undoStateChange', {\n        canUndo: this._undoIndex !== 0,\n        canRedo: true\n      });\n      this.fireEvent('input');\n    }\n\n    return this;\n  };\n\n  proto.redo = function () {\n    // Sanity check: must not be at end of stack and must be in an undo\n    // state.\n    var undoIndex = this._undoIndex,\n        undoStackLength = this._undoStackLength;\n\n    if (undoIndex + 1 < undoStackLength && this._isInUndoState) {\n      this._undoIndex += 1;\n\n      this._setHTML(this._undoStack[this._undoIndex]);\n\n      var range = this._getRangeAndRemoveBookmark();\n\n      if (range) {\n        this.setSelection(range);\n      }\n\n      this.fireEvent('undoStateChange', {\n        canUndo: true,\n        canRedo: undoIndex + 2 < undoStackLength\n      });\n      this.fireEvent('input');\n    }\n\n    return this;\n  }; // --- Inline formatting ---\n  // Looks for matching tag and attributes, so won't work\n  // if <strong> instead of <b> etc.\n\n\n  proto.hasFormat = function (tag, attributes, range) {\n    // 1. Normalise the arguments and get selection\n    tag = tag.toUpperCase();\n\n    if (!attributes) {\n      attributes = {};\n    }\n\n    if (!range && !(range = this.getSelection())) {\n      return false;\n    } // Sanitize range to prevent weird IE artifacts\n\n\n    if (!range.collapsed && range.startContainer.nodeType === TEXT_NODE && range.startOffset === range.startContainer.length && range.startContainer.nextSibling) {\n      range.setStartBefore(range.startContainer.nextSibling);\n    }\n\n    if (!range.collapsed && range.endContainer.nodeType === TEXT_NODE && range.endOffset === 0 && range.endContainer.previousSibling) {\n      range.setEndAfter(range.endContainer.previousSibling);\n    } // If the common ancestor is inside the tag we require, we definitely\n    // have the format.\n\n\n    var root = this._root;\n    var common = range.commonAncestorContainer;\n    var walker, node;\n\n    if (getNearest(common, root, tag, attributes)) {\n      return true;\n    } // If common ancestor is a text node and doesn't have the format, we\n    // definitely don't have it.\n\n\n    if (common.nodeType === TEXT_NODE) {\n      return false;\n    } // Otherwise, check each text node at least partially contained within\n    // the selection and make sure all of them have the format we want.\n\n\n    walker = new TreeWalker(common, SHOW_TEXT, function (node) {\n      return isNodeContainedInRange(range, node, true);\n    });\n    var seenNode = false;\n\n    while (node = walker.nextNode()) {\n      if (!getNearest(node, root, tag, attributes)) {\n        return false;\n      }\n\n      seenNode = true;\n    }\n\n    return seenNode;\n  }; // Extracts the font-family and font-size (if any) of the element\n  // holding the cursor. If there's a selection, returns an empty object.\n\n\n  proto.getFontInfo = function (range) {\n    var fontInfo = {\n      color: undefined,\n      backgroundColor: undefined,\n      family: undefined,\n      size: undefined\n    };\n    var seenAttributes = 0;\n    var element, style, attr;\n\n    if (!range && !(range = this.getSelection())) {\n      return fontInfo;\n    }\n\n    element = range.commonAncestorContainer;\n\n    if (range.collapsed || element.nodeType === TEXT_NODE) {\n      if (element.nodeType === TEXT_NODE) {\n        element = element.parentNode;\n      }\n\n      while (seenAttributes < 4 && element) {\n        if (style = element.style) {\n          if (!fontInfo.color && (attr = style.color)) {\n            fontInfo.color = attr;\n            seenAttributes += 1;\n          }\n\n          if (!fontInfo.backgroundColor && (attr = style.backgroundColor)) {\n            fontInfo.backgroundColor = attr;\n            seenAttributes += 1;\n          }\n\n          if (!fontInfo.family && (attr = style.fontFamily)) {\n            fontInfo.family = attr;\n            seenAttributes += 1;\n          }\n\n          if (!fontInfo.size && (attr = style.fontSize)) {\n            fontInfo.size = attr;\n            seenAttributes += 1;\n          }\n        }\n\n        element = element.parentNode;\n      }\n    }\n\n    return fontInfo;\n  };\n\n  proto._addFormat = function (tag, attributes, range) {\n    // If the range is collapsed we simply insert the node by wrapping\n    // it round the range and focus it.\n    var root = this._root;\n    var el, walker, startContainer, endContainer, startOffset, endOffset, node, needsFormat, block;\n\n    if (range.collapsed) {\n      el = fixCursor(this.createElement(tag, attributes), root);\n      insertNodeInRange(range, el);\n      range.setStart(el.firstChild, el.firstChild.length);\n      range.collapse(true); // Clean up any previous formats that may have been set on this block\n      // that are unused.\n\n      block = el;\n\n      while (isInline(block)) {\n        block = block.parentNode;\n      }\n\n      removeZWS(block, el);\n    } // Otherwise we find all the textnodes in the range (splitting\n    // partially selected nodes) and if they're not already formatted\n    // correctly we wrap them in the appropriate tag.\n    else {\n        // Create an iterator to walk over all the text nodes under this\n        // ancestor which are in the range and not already formatted\n        // correctly.\n        //\n        // In Blink/WebKit, empty blocks may have no text nodes, just a <br>.\n        // Therefore we wrap this in the tag as well, as this will then cause it\n        // to apply when the user types something in the block, which is\n        // presumably what was intended.\n        //\n        // IMG tags are included because we may want to create a link around\n        // them, and adding other styles is harmless.\n        walker = new TreeWalker(range.commonAncestorContainer, SHOW_TEXT | SHOW_ELEMENT, function (node) {\n          return (node.nodeType === TEXT_NODE || node.nodeName === 'BR' || node.nodeName === 'IMG') && isNodeContainedInRange(range, node, true);\n        }); // Start at the beginning node of the range and iterate through\n        // all the nodes in the range that need formatting.\n\n        startContainer = range.startContainer;\n        startOffset = range.startOffset;\n        endContainer = range.endContainer;\n        endOffset = range.endOffset; // Make sure we start with a valid node.\n\n        walker.currentNode = startContainer;\n\n        if (!walker.filter(startContainer)) {\n          startContainer = walker.nextNode();\n          startOffset = 0;\n        } // If there are no interesting nodes in the selection, abort\n\n\n        if (!startContainer) {\n          return range;\n        }\n\n        do {\n          node = walker.currentNode;\n          needsFormat = !getNearest(node, root, tag, attributes);\n\n          if (needsFormat) {\n            // <br> can never be a container node, so must have a text node\n            // if node == (end|start)Container\n            if (node === endContainer && node.length > endOffset) {\n              node.splitText(endOffset);\n            }\n\n            if (node === startContainer && startOffset) {\n              node = node.splitText(startOffset);\n\n              if (endContainer === startContainer) {\n                endContainer = node;\n                endOffset -= startOffset;\n              }\n\n              startContainer = node;\n              startOffset = 0;\n            }\n\n            el = this.createElement(tag, attributes);\n            replaceWith(node, el);\n            el.appendChild(node);\n          }\n        } while (walker.nextNode()); // If we don't finish inside a text node, offset may have changed.\n\n\n        if (endContainer.nodeType !== TEXT_NODE) {\n          if (node.nodeType === TEXT_NODE) {\n            endContainer = node;\n            endOffset = node.length;\n          } else {\n            // If <br>, we must have just wrapped it, so it must have only\n            // one child\n            endContainer = node.parentNode;\n            endOffset = 1;\n          }\n        } // Now set the selection to as it was before\n\n\n        range = this.createRange(startContainer, startOffset, endContainer, endOffset);\n      }\n\n    return range;\n  };\n\n  proto._removeFormat = function (tag, attributes, range, partial) {\n    // Add bookmark\n    this._saveRangeToBookmark(range); // We need a node in the selection to break the surrounding\n    // formatted text.\n\n\n    var doc = this._doc,\n        fixer;\n\n    if (range.collapsed) {\n      if (cantFocusEmptyTextNodes) {\n        fixer = doc.createTextNode(ZWS);\n\n        this._didAddZWS();\n      } else {\n        fixer = doc.createTextNode('');\n      }\n\n      insertNodeInRange(range, fixer);\n    } // Find block-level ancestor of selection\n\n\n    var root = range.commonAncestorContainer;\n\n    while (isInline(root)) {\n      root = root.parentNode;\n    } // Find text nodes inside formatTags that are not in selection and\n    // add an extra tag with the same formatting.\n\n\n    var startContainer = range.startContainer,\n        startOffset = range.startOffset,\n        endContainer = range.endContainer,\n        endOffset = range.endOffset,\n        toWrap = [],\n        examineNode = function (node, exemplar) {\n      // If the node is completely contained by the range then\n      // we're going to remove all formatting so ignore it.\n      if (isNodeContainedInRange(range, node, false)) {\n        return;\n      }\n\n      var isText = node.nodeType === TEXT_NODE,\n          child,\n          next; // If not at least partially contained, wrap entire contents\n      // in a clone of the tag we're removing and we're done.\n\n      if (!isNodeContainedInRange(range, node, true)) {\n        // Ignore bookmarks and empty text nodes\n        if (node.nodeName !== 'INPUT' && (!isText || node.data)) {\n          toWrap.push([exemplar, node]);\n        }\n\n        return;\n      } // Split any partially selected text nodes.\n\n\n      if (isText) {\n        if (node === endContainer && endOffset !== node.length) {\n          toWrap.push([exemplar, node.splitText(endOffset)]);\n        }\n\n        if (node === startContainer && startOffset) {\n          node.splitText(startOffset);\n          toWrap.push([exemplar, node]);\n        }\n      } // If not a text node, recurse onto all children.\n      // Beware, the tree may be rewritten with each call\n      // to examineNode, hence find the next sibling first.\n      else {\n          for (child = node.firstChild; child; child = next) {\n            next = child.nextSibling;\n            examineNode(child, exemplar);\n          }\n        }\n    },\n        formatTags = Array.prototype.filter.call(root.getElementsByTagName(tag), function (el) {\n      return isNodeContainedInRange(range, el, true) && hasTagAttributes(el, tag, attributes);\n    });\n\n    if (!partial) {\n      formatTags.forEach(function (node) {\n        examineNode(node, node);\n      });\n    } // Now wrap unselected nodes in the tag\n\n\n    toWrap.forEach(function (item) {\n      // [ exemplar, node ] tuple\n      var el = item[0].cloneNode(false),\n          node = item[1];\n      replaceWith(node, el);\n      el.appendChild(node);\n    }); // and remove old formatting tags.\n\n    formatTags.forEach(function (el) {\n      replaceWith(el, empty(el));\n    }); // Merge adjacent inlines:\n\n    this._getRangeAndRemoveBookmark(range);\n\n    if (fixer) {\n      range.collapse(false);\n    }\n\n    mergeInlines(root, range);\n    return range;\n  };\n\n  proto.changeFormat = function (add, remove, range, partial) {\n    // Normalise the arguments and get selection\n    if (!range && !(range = this.getSelection())) {\n      return this;\n    } // Save undo checkpoint\n\n\n    this.saveUndoState(range);\n\n    if (remove) {\n      range = this._removeFormat(remove.tag.toUpperCase(), remove.attributes || {}, range, partial);\n    }\n\n    if (add) {\n      range = this._addFormat(add.tag.toUpperCase(), add.attributes || {}, range);\n    }\n\n    this.setSelection(range);\n\n    this._updatePath(range, true); // We're not still in an undo state\n\n\n    if (!canObserveMutations) {\n      this._docWasChanged();\n    }\n\n    return this;\n  }; // --- Block formatting ---\n\n\n  var tagAfterSplit = {\n    DT: 'DD',\n    DD: 'DT',\n    LI: 'LI',\n    PRE: 'PRE'\n  };\n\n  var splitBlock = function (self, block, node, offset) {\n    var splitTag = tagAfterSplit[block.nodeName],\n        splitProperties = null,\n        nodeAfterSplit = split(node, offset, block.parentNode, self._root),\n        config = self._config;\n\n    if (!splitTag) {\n      splitTag = config.blockTag;\n      splitProperties = config.blockAttributes;\n    } // Make sure the new node is the correct type.\n\n\n    if (!hasTagAttributes(nodeAfterSplit, splitTag, splitProperties)) {\n      block = createElement(nodeAfterSplit.ownerDocument, splitTag, splitProperties);\n\n      if (nodeAfterSplit.dir) {\n        block.dir = nodeAfterSplit.dir;\n      }\n\n      replaceWith(nodeAfterSplit, block);\n      block.appendChild(empty(nodeAfterSplit));\n      nodeAfterSplit = block;\n    }\n\n    return nodeAfterSplit;\n  };\n\n  proto.forEachBlock = function (fn, mutates, range) {\n    if (!range && !(range = this.getSelection())) {\n      return this;\n    } // Save undo checkpoint\n\n\n    if (mutates) {\n      this.saveUndoState(range);\n    }\n\n    var root = this._root;\n    var start = getStartBlockOfRange(range, root);\n    var end = getEndBlockOfRange(range, root);\n\n    if (start && end) {\n      do {\n        if (fn(start) || start === end) {\n          break;\n        }\n      } while (start = getNextBlock(start, root));\n    }\n\n    if (mutates) {\n      this.setSelection(range); // Path may have changed\n\n      this._updatePath(range, true); // We're not still in an undo state\n\n\n      if (!canObserveMutations) {\n        this._docWasChanged();\n      }\n    }\n\n    return this;\n  };\n\n  proto.modifyBlocks = function (modify, range) {\n    if (!range && !(range = this.getSelection())) {\n      return this;\n    } // 1. Save undo checkpoint and bookmark selection\n\n\n    this._recordUndoState(range, this._isInUndoState);\n\n    var root = this._root;\n    var frag; // 2. Expand range to block boundaries\n\n    expandRangeToBlockBoundaries(range, root); // 3. Remove range.\n\n    moveRangeBoundariesUpTree(range, root, root, root);\n    frag = extractContentsOfRange(range, root, root); // 4. Modify tree of fragment and reinsert.\n\n    insertNodeInRange(range, modify.call(this, frag)); // 5. Merge containers at edges\n\n    if (range.endOffset < range.endContainer.childNodes.length) {\n      mergeContainers(range.endContainer.childNodes[range.endOffset], root);\n    }\n\n    mergeContainers(range.startContainer.childNodes[range.startOffset], root); // 6. Restore selection\n\n    this._getRangeAndRemoveBookmark(range);\n\n    this.setSelection(range);\n\n    this._updatePath(range, true); // 7. We're not still in an undo state\n\n\n    if (!canObserveMutations) {\n      this._docWasChanged();\n    }\n\n    return this;\n  };\n\n  var increaseBlockQuoteLevel = function (frag) {\n    return this.createElement('BLOCKQUOTE', this._config.tagAttributes.blockquote, [frag]);\n  };\n\n  var decreaseBlockQuoteLevel = function (frag) {\n    var root = this._root;\n    var blockquotes = frag.querySelectorAll('blockquote');\n    Array.prototype.filter.call(blockquotes, function (el) {\n      return !getNearest(el.parentNode, root, 'BLOCKQUOTE');\n    }).forEach(function (el) {\n      replaceWith(el, empty(el));\n    });\n    return frag;\n  };\n\n  var removeBlockQuote = function ()\n  /* frag */\n  {\n    return this.createDefaultBlock([this.createElement('INPUT', {\n      id: startSelectionId,\n      type: 'hidden'\n    }), this.createElement('INPUT', {\n      id: endSelectionId,\n      type: 'hidden'\n    })]);\n  };\n\n  var makeList = function (self, frag, type) {\n    var walker = getBlockWalker(frag, self._root),\n        node,\n        tag,\n        prev,\n        newLi,\n        tagAttributes = self._config.tagAttributes,\n        listAttrs = tagAttributes[type.toLowerCase()],\n        listItemAttrs = tagAttributes.li;\n\n    while (node = walker.nextNode()) {\n      if (node.parentNode.nodeName === 'LI') {\n        node = node.parentNode;\n        walker.currentNode = node.lastChild;\n      }\n\n      if (node.nodeName !== 'LI') {\n        newLi = self.createElement('LI', listItemAttrs);\n\n        if (node.dir) {\n          newLi.dir = node.dir;\n        } // Have we replaced the previous block with a new <ul>/<ol>?\n\n\n        if ((prev = node.previousSibling) && prev.nodeName === type) {\n          prev.appendChild(newLi);\n          detach(node);\n        } // Otherwise, replace this block with the <ul>/<ol>\n        else {\n            replaceWith(node, self.createElement(type, listAttrs, [newLi]));\n          }\n\n        newLi.appendChild(empty(node));\n        walker.currentNode = newLi;\n      } else {\n        node = node.parentNode;\n        tag = node.nodeName;\n\n        if (tag !== type && /^[OU]L$/.test(tag)) {\n          replaceWith(node, self.createElement(type, listAttrs, [empty(node)]));\n        }\n      }\n    }\n  };\n\n  var makeUnorderedList = function (frag) {\n    makeList(this, frag, 'UL');\n    return frag;\n  };\n\n  var makeOrderedList = function (frag) {\n    makeList(this, frag, 'OL');\n    return frag;\n  };\n\n  var removeList = function (frag) {\n    var lists = frag.querySelectorAll('UL, OL'),\n        items = frag.querySelectorAll('LI'),\n        root = this._root,\n        i,\n        l,\n        list,\n        listFrag,\n        item;\n\n    for (i = 0, l = lists.length; i < l; i += 1) {\n      list = lists[i];\n      listFrag = empty(list);\n      fixContainer(listFrag, root);\n      replaceWith(list, listFrag);\n    }\n\n    for (i = 0, l = items.length; i < l; i += 1) {\n      item = items[i];\n\n      if (isBlock(item)) {\n        replaceWith(item, this.createDefaultBlock([empty(item)]));\n      } else {\n        fixContainer(item, root);\n        replaceWith(item, empty(item));\n      }\n    }\n\n    return frag;\n  };\n\n  var getListSelection = function (range, root) {\n    // Get start+end li in single common ancestor\n    var list = range.commonAncestorContainer;\n    var startLi = range.startContainer;\n    var endLi = range.endContainer;\n\n    while (list && list !== root && !/^[OU]L$/.test(list.nodeName)) {\n      list = list.parentNode;\n    }\n\n    if (!list || list === root) {\n      return null;\n    }\n\n    if (startLi === list) {\n      startLi = startLi.childNodes[range.startOffset];\n    }\n\n    if (endLi === list) {\n      endLi = endLi.childNodes[range.endOffset];\n    }\n\n    while (startLi && startLi.parentNode !== list) {\n      startLi = startLi.parentNode;\n    }\n\n    while (endLi && endLi.parentNode !== list) {\n      endLi = endLi.parentNode;\n    }\n\n    return [list, startLi, endLi];\n  };\n\n  proto.increaseListLevel = function (range) {\n    if (!range && !(range = this.getSelection())) {\n      return this.focus();\n    }\n\n    var root = this._root;\n    var listSelection = getListSelection(range, root);\n\n    if (!listSelection) {\n      return this.focus();\n    }\n\n    var list = listSelection[0];\n    var startLi = listSelection[1];\n    var endLi = listSelection[2];\n\n    if (!startLi || startLi === list.firstChild) {\n      return this.focus();\n    } // Save undo checkpoint and bookmark selection\n\n\n    this._recordUndoState(range, this._isInUndoState); // Increase list depth\n\n\n    var type = list.nodeName;\n    var newParent = startLi.previousSibling;\n    var listAttrs, next;\n\n    if (newParent.nodeName !== type) {\n      listAttrs = this._config.tagAttributes[type.toLowerCase()];\n      newParent = this.createElement(type, listAttrs);\n      list.insertBefore(newParent, startLi);\n    }\n\n    do {\n      next = startLi === endLi ? null : startLi.nextSibling;\n      newParent.appendChild(startLi);\n    } while (startLi = next);\n\n    next = newParent.nextSibling;\n\n    if (next) {\n      mergeContainers(next, root);\n    } // Restore selection\n\n\n    this._getRangeAndRemoveBookmark(range);\n\n    this.setSelection(range);\n\n    this._updatePath(range, true); // We're not still in an undo state\n\n\n    if (!canObserveMutations) {\n      this._docWasChanged();\n    }\n\n    return this.focus();\n  };\n\n  proto.decreaseListLevel = function (range) {\n    if (!range && !(range = this.getSelection())) {\n      return this.focus();\n    }\n\n    var root = this._root;\n    var listSelection = getListSelection(range, root);\n\n    if (!listSelection) {\n      return this.focus();\n    }\n\n    var list = listSelection[0];\n    var startLi = listSelection[1];\n    var endLi = listSelection[2];\n    var newParent, next, insertBefore, makeNotList;\n\n    if (!startLi) {\n      startLi = list.firstChild;\n    }\n\n    if (!endLi) {\n      endLi = list.lastChild;\n    } // Save undo checkpoint and bookmark selection\n\n\n    this._recordUndoState(range, this._isInUndoState);\n\n    if (startLi) {\n      // Find the new parent list node\n      newParent = list.parentNode; // Split list if necesary\n\n      insertBefore = !endLi.nextSibling ? list.nextSibling : split(list, endLi.nextSibling, newParent, root);\n\n      if (newParent !== root && newParent.nodeName === 'LI') {\n        newParent = newParent.parentNode;\n\n        while (insertBefore) {\n          next = insertBefore.nextSibling;\n          endLi.appendChild(insertBefore);\n          insertBefore = next;\n        }\n\n        insertBefore = list.parentNode.nextSibling;\n      }\n\n      makeNotList = !/^[OU]L$/.test(newParent.nodeName);\n\n      do {\n        next = startLi === endLi ? null : startLi.nextSibling;\n        list.removeChild(startLi);\n\n        if (makeNotList && startLi.nodeName === 'LI') {\n          startLi = this.createDefaultBlock([empty(startLi)]);\n        }\n\n        newParent.insertBefore(startLi, insertBefore);\n      } while (startLi = next);\n    }\n\n    if (!list.firstChild) {\n      detach(list);\n    }\n\n    if (insertBefore) {\n      mergeContainers(insertBefore, root);\n    } // Restore selection\n\n\n    this._getRangeAndRemoveBookmark(range);\n\n    this.setSelection(range);\n\n    this._updatePath(range, true); // We're not still in an undo state\n\n\n    if (!canObserveMutations) {\n      this._docWasChanged();\n    }\n\n    return this.focus();\n  };\n\n  proto._ensureBottomLine = function () {\n    var root = this._root;\n    var last = root.lastElementChild;\n\n    if (!last || last.nodeName !== this._config.blockTag || !isBlock(last)) {\n      root.appendChild(this.createDefaultBlock());\n    }\n  }; // --- Keyboard interaction ---\n\n\n  proto.setKeyHandler = function (key, fn) {\n    this._keyHandlers[key] = fn;\n    return this;\n  }; // --- Get/Set data ---\n\n\n  proto._getHTML = function () {\n    return this._root.innerHTML;\n  };\n\n  proto._setHTML = function (html) {\n    var root = this._root;\n    var node = root;\n    node.innerHTML = html;\n\n    do {\n      fixCursor(node, root);\n    } while (node = getNextBlock(node, root));\n\n    this._ignoreChange = true;\n  };\n\n  proto.getHTML = function (withBookMark) {\n    var brs = [],\n        root,\n        node,\n        fixer,\n        html,\n        l,\n        range;\n\n    if (withBookMark && (range = this.getSelection())) {\n      this._saveRangeToBookmark(range);\n    }\n\n    if (useTextFixer) {\n      root = this._root;\n      node = root;\n\n      while (node = getNextBlock(node, root)) {\n        if (!node.textContent && !node.querySelector('BR')) {\n          fixer = this.createElement('BR');\n          node.appendChild(fixer);\n          brs.push(fixer);\n        }\n      }\n    }\n\n    html = this._getHTML().replace(/\\u200B/g, '');\n\n    if (useTextFixer) {\n      l = brs.length;\n\n      while (l--) {\n        detach(brs[l]);\n      }\n    }\n\n    if (range) {\n      this._getRangeAndRemoveBookmark(range);\n    }\n\n    return html;\n  };\n\n  proto.setHTML = function (html) {\n    var config = this._config;\n    var sanitizeToDOMFragment = config.isSetHTMLSanitized ? config.sanitizeToDOMFragment : null;\n    var root = this._root;\n    var div, frag, child; // Parse HTML into DOM tree\n\n    if (typeof sanitizeToDOMFragment === 'function') {\n      frag = sanitizeToDOMFragment(html, false, this);\n    } else {\n      div = this.createElement('DIV');\n      div.innerHTML = html;\n      frag = this._doc.createDocumentFragment();\n      frag.appendChild(empty(div));\n    }\n\n    cleanTree(frag, config);\n    cleanupBRs(frag, root, false);\n    fixContainer(frag, root); // Fix cursor\n\n    var node = frag;\n\n    while (node = getNextBlock(node, root)) {\n      fixCursor(node, root);\n    } // Don't fire an input event\n\n\n    this._ignoreChange = true; // Remove existing root children\n\n    while (child = root.lastChild) {\n      root.removeChild(child);\n    } // And insert new content\n\n\n    root.appendChild(frag);\n    fixCursor(root, root); // Reset the undo stack\n\n    this._undoIndex = -1;\n    this._undoStack.length = 0;\n    this._undoStackLength = 0;\n    this._isInUndoState = false; // Record undo state\n\n    var range = this._getRangeAndRemoveBookmark() || this.createRange(root.firstChild, 0);\n    this.saveUndoState(range); // IE will also set focus when selecting text so don't use\n    // setSelection. Instead, just store it in lastSelection, so if\n    // anything calls getSelection before first focus, we have a range\n    // to return.\n\n    this._lastSelection = range;\n    enableRestoreSelection.call(this);\n\n    this._updatePath(range, true);\n\n    return this;\n  };\n\n  proto.insertElement = function (el, range) {\n    if (!range) {\n      range = this.getSelection();\n    }\n\n    range.collapse(true);\n\n    if (isInline(el)) {\n      insertNodeInRange(range, el);\n      range.setStartAfter(el);\n    } else {\n      // Get containing block node.\n      var root = this._root;\n      var splitNode = getStartBlockOfRange(range, root) || root;\n      var parent, nodeAfterSplit; // While at end of container node, move up DOM tree.\n\n      while (splitNode !== root && !splitNode.nextSibling) {\n        splitNode = splitNode.parentNode;\n      } // If in the middle of a container node, split up to root.\n\n\n      if (splitNode !== root) {\n        parent = splitNode.parentNode;\n        nodeAfterSplit = split(parent, splitNode.nextSibling, root, root);\n      }\n\n      if (nodeAfterSplit) {\n        root.insertBefore(el, nodeAfterSplit);\n      } else {\n        root.appendChild(el); // Insert blank line below block.\n\n        nodeAfterSplit = this.createDefaultBlock();\n        root.appendChild(nodeAfterSplit);\n      }\n\n      range.setStart(nodeAfterSplit, 0);\n      range.setEnd(nodeAfterSplit, 0);\n      moveRangeBoundariesDownTree(range);\n    }\n\n    this.focus();\n    this.setSelection(range);\n\n    this._updatePath(range);\n\n    if (!canObserveMutations) {\n      this._docWasChanged();\n    }\n\n    return this;\n  };\n\n  proto.insertImage = function (src, attributes) {\n    var img = this.createElement('IMG', mergeObjects({\n      src: src\n    }, attributes, true));\n    this.insertElement(img);\n    return img;\n  };\n\n  proto.linkRegExp = /\\b((?:(?:ht|f)tps?:\\/\\/|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,}\\/)(?:[^\\s()<>]+|\\([^\\s()<>]+\\))+(?:\\((?:[^\\s()<>]+|(?:\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))|([\\w\\-.%+]+@(?:[\\w\\-]+\\.)+[A-Z]{2,}\\b)(?:\\?[^&?\\s]+=[^&?\\s]+(?:&[^&?\\s]+=[^&?\\s]+)*)?/i;\n\n  var addLinks = function (frag, root, self) {\n    var doc = frag.ownerDocument;\n    var walker = new TreeWalker(frag, SHOW_TEXT, function (node) {\n      return !getNearest(node, root, 'A');\n    });\n    var linkRegExp = self.linkRegExp;\n    var defaultAttributes = self._config.tagAttributes.a;\n    var node, data, parent, match, index, endIndex, child;\n\n    if (!linkRegExp) {\n      return;\n    }\n\n    while (node = walker.nextNode()) {\n      data = node.data;\n      parent = node.parentNode;\n\n      while (match = linkRegExp.exec(data)) {\n        index = match.index;\n        endIndex = index + match[0].length;\n\n        if (index) {\n          child = doc.createTextNode(data.slice(0, index));\n          parent.insertBefore(child, node);\n        }\n\n        child = self.createElement('A', mergeObjects({\n          href: match[1] ? /^(?:ht|f)tps?:/i.test(match[1]) ? match[1] : 'http://' + match[1] : 'mailto:' + match[0]\n        }, defaultAttributes, false));\n        child.textContent = data.slice(index, endIndex);\n        parent.insertBefore(child, node);\n        node.data = data = data.slice(endIndex);\n      }\n    }\n  }; // Insert HTML at the cursor location. If the selection is not collapsed\n  // insertTreeFragmentIntoRange will delete the selection so that it is replaced\n  // by the html being inserted.\n\n\n  proto.insertHTML = function (html, isPaste) {\n    var config = this._config;\n    var sanitizeToDOMFragment = config.isInsertedHTMLSanitized ? config.sanitizeToDOMFragment : null;\n    var range = this.getSelection();\n    var doc = this._doc;\n    var startFragmentIndex, endFragmentIndex;\n    var div, frag, root, node, event; // Edge doesn't just copy the fragment, but includes the surrounding guff\n    // including the full <head> of the page. Need to strip this out. If\n    // available use DOMPurify to parse and sanitise.\n\n    if (typeof sanitizeToDOMFragment === 'function') {\n      frag = sanitizeToDOMFragment(html, isPaste, this);\n    } else {\n      if (isPaste) {\n        startFragmentIndex = html.indexOf('<!--StartFragment-->');\n        endFragmentIndex = html.lastIndexOf('<!--EndFragment-->');\n\n        if (startFragmentIndex > -1 && endFragmentIndex > -1) {\n          html = html.slice(startFragmentIndex + 20, endFragmentIndex);\n        }\n      } // Wrap with <tr> if html contains dangling <td> tags\n\n\n      if (/<\\/td>((?!<\\/tr>)[\\s\\S])*$/i.test(html)) {\n        html = '<TR>' + html + '</TR>';\n      } // Wrap with <table> if html contains dangling <tr> tags\n\n\n      if (/<\\/tr>((?!<\\/table>)[\\s\\S])*$/i.test(html)) {\n        html = '<TABLE>' + html + '</TABLE>';\n      } // Parse HTML into DOM tree\n\n\n      div = this.createElement('DIV');\n      div.innerHTML = html;\n      frag = doc.createDocumentFragment();\n      frag.appendChild(empty(div));\n    } // Record undo checkpoint\n\n\n    this.saveUndoState(range);\n\n    try {\n      root = this._root;\n      node = frag;\n      event = {\n        fragment: frag,\n        preventDefault: function () {\n          this.defaultPrevented = true;\n        },\n        defaultPrevented: false\n      };\n      addLinks(frag, frag, this);\n      cleanTree(frag, config);\n      cleanupBRs(frag, root, false);\n      removeEmptyInlines(frag);\n      frag.normalize();\n\n      while (node = getNextBlock(node, frag)) {\n        fixCursor(node, root);\n      }\n\n      if (isPaste) {\n        this.fireEvent('willPaste', event);\n      }\n\n      if (!event.defaultPrevented) {\n        insertTreeFragmentIntoRange(range, event.fragment, root);\n\n        if (!canObserveMutations) {\n          this._docWasChanged();\n        }\n\n        range.collapse(false);\n\n        this._ensureBottomLine();\n      }\n\n      this.setSelection(range);\n\n      this._updatePath(range, true); // Safari sometimes loses focus after paste. Weird.\n\n\n      if (isPaste) {\n        this.focus();\n      }\n    } catch (error) {\n      this.didError(error);\n    }\n\n    return this;\n  };\n\n  var escapeHTMLFragement = function (text) {\n    return text.split('&').join('&amp;').split('<').join('&lt;').split('>').join('&gt;').split('\"').join('&quot;');\n  };\n\n  proto.insertPlainText = function (plainText, isPaste) {\n    var range = this.getSelection();\n\n    if (range.collapsed && getNearest(range.startContainer, this._root, 'PRE')) {\n      var node = range.startContainer;\n      var offset = range.startOffset;\n      var text, event;\n\n      if (!node || node.nodeType !== TEXT_NODE) {\n        text = this._doc.createTextNode('');\n        node.insertBefore(text, node.childNodes[offset]);\n        node = text;\n        offset = 0;\n      }\n\n      event = {\n        text: plainText,\n        preventDefault: function () {\n          this.defaultPrevented = true;\n        },\n        defaultPrevented: false\n      };\n\n      if (isPaste) {\n        this.fireEvent('willPaste', event);\n      }\n\n      if (!event.defaultPrevented) {\n        plainText = event.text;\n        node.insertData(offset, plainText);\n        range.setStart(node, offset + plainText.length);\n        range.collapse(true);\n      }\n\n      this.setSelection(range);\n      return this;\n    }\n\n    var lines = plainText.split('\\n');\n    var config = this._config;\n    var tag = config.blockTag;\n    var attributes = config.blockAttributes;\n    var closeBlock = '</' + tag + '>';\n    var openBlock = '<' + tag;\n    var attr, i, l, line;\n\n    for (attr in attributes) {\n      openBlock += ' ' + attr + '=\"' + escapeHTMLFragement(attributes[attr]) + '\"';\n    }\n\n    openBlock += '>';\n\n    for (i = 0, l = lines.length; i < l; i += 1) {\n      line = lines[i];\n      line = escapeHTMLFragement(line).replace(/ (?= )/g, '&nbsp;'); // Wrap each line in <div></div>\n\n      lines[i] = openBlock + (line || '<BR>') + closeBlock;\n    }\n\n    return this.insertHTML(lines.join(''), isPaste);\n  }; // --- Formatting ---\n\n\n  var command = function (method, arg, arg2) {\n    return function () {\n      this[method](arg, arg2);\n      return this.focus();\n    };\n  };\n\n  proto.addStyles = function (styles) {\n    if (styles) {\n      var head = this._doc.documentElement.firstChild,\n          style = this.createElement('STYLE', {\n        type: 'text/css'\n      });\n      style.appendChild(this._doc.createTextNode(styles));\n      head.appendChild(style);\n    }\n\n    return this;\n  };\n\n  proto.bold = command('changeFormat', {\n    tag: 'B'\n  });\n  proto.italic = command('changeFormat', {\n    tag: 'I'\n  });\n  proto.underline = command('changeFormat', {\n    tag: 'U'\n  });\n  proto.strikethrough = command('changeFormat', {\n    tag: 'S'\n  });\n  proto.subscript = command('changeFormat', {\n    tag: 'SUB'\n  }, {\n    tag: 'SUP'\n  });\n  proto.superscript = command('changeFormat', {\n    tag: 'SUP'\n  }, {\n    tag: 'SUB'\n  });\n  proto.removeBold = command('changeFormat', null, {\n    tag: 'B'\n  });\n  proto.removeItalic = command('changeFormat', null, {\n    tag: 'I'\n  });\n  proto.removeUnderline = command('changeFormat', null, {\n    tag: 'U'\n  });\n  proto.removeStrikethrough = command('changeFormat', null, {\n    tag: 'S'\n  });\n  proto.removeSubscript = command('changeFormat', null, {\n    tag: 'SUB'\n  });\n  proto.removeSuperscript = command('changeFormat', null, {\n    tag: 'SUP'\n  });\n\n  proto.makeLink = function (url, attributes) {\n    var range = this.getSelection();\n\n    if (range.collapsed) {\n      var protocolEnd = url.indexOf(':') + 1;\n\n      if (protocolEnd) {\n        while (url[protocolEnd] === '/') {\n          protocolEnd += 1;\n        }\n      }\n\n      insertNodeInRange(range, this._doc.createTextNode(url.slice(protocolEnd)));\n    }\n\n    attributes = mergeObjects(mergeObjects({\n      href: url\n    }, attributes, true), this._config.tagAttributes.a, false);\n    this.changeFormat({\n      tag: 'A',\n      attributes: attributes\n    }, {\n      tag: 'A'\n    }, range);\n    return this.focus();\n  };\n\n  proto.removeLink = function () {\n    this.changeFormat(null, {\n      tag: 'A'\n    }, this.getSelection(), true);\n    return this.focus();\n  };\n\n  proto.setFontFace = function (name) {\n    var className = this._config.classNames.fontFamily;\n    this.changeFormat(name ? {\n      tag: 'SPAN',\n      attributes: {\n        'class': className,\n        style: 'font-family: ' + name + ', sans-serif;'\n      }\n    } : null, {\n      tag: 'SPAN',\n      attributes: {\n        'class': className\n      }\n    });\n    return this.focus();\n  };\n\n  proto.setFontSize = function (size) {\n    var className = this._config.classNames.fontSize;\n    this.changeFormat(size ? {\n      tag: 'SPAN',\n      attributes: {\n        'class': className,\n        style: 'font-size: ' + (typeof size === 'number' ? size + 'px' : size)\n      }\n    } : null, {\n      tag: 'SPAN',\n      attributes: {\n        'class': className\n      }\n    });\n    return this.focus();\n  };\n\n  proto.setTextColour = function (colour) {\n    var className = this._config.classNames.colour;\n    this.changeFormat(colour ? {\n      tag: 'SPAN',\n      attributes: {\n        'class': className,\n        style: 'color:' + colour\n      }\n    } : null, {\n      tag: 'SPAN',\n      attributes: {\n        'class': className\n      }\n    });\n    return this.focus();\n  };\n\n  proto.setHighlightColour = function (colour) {\n    var className = this._config.classNames.highlight;\n    this.changeFormat(colour ? {\n      tag: 'SPAN',\n      attributes: {\n        'class': className,\n        style: 'background-color:' + colour\n      }\n    } : colour, {\n      tag: 'SPAN',\n      attributes: {\n        'class': className\n      }\n    });\n    return this.focus();\n  };\n\n  proto.setTextAlignment = function (alignment) {\n    this.forEachBlock(function (block) {\n      var className = block.className.split(/\\s+/).filter(function (klass) {\n        return !!klass && !/^align/.test(klass);\n      }).join(' ');\n\n      if (alignment) {\n        block.className = className + ' align-' + alignment;\n        block.style.textAlign = alignment;\n      } else {\n        block.className = className;\n        block.style.textAlign = '';\n      }\n    }, true);\n    return this.focus();\n  };\n\n  proto.setTextDirection = function (direction) {\n    this.forEachBlock(function (block) {\n      if (direction) {\n        block.dir = direction;\n      } else {\n        block.removeAttribute('dir');\n      }\n    }, true);\n    return this.focus();\n  }; // ---\n\n\n  var addPre = function (frag) {\n    var root = this._root;\n    var document = this._doc;\n    var output = document.createDocumentFragment();\n    var walker = getBlockWalker(frag, root);\n    var node; // 1. Extract inline content; drop all blocks and contains.\n\n    while (node = walker.nextNode()) {\n      // 2. Replace <br> with \\n in content\n      var nodes = node.querySelectorAll('BR');\n      var brBreaksLine = [];\n      var l = nodes.length;\n      var i, br; // Must calculate whether the <br> breaks a line first, because if we\n      // have two <br>s next to each other, after the first one is converted\n      // to a block split, the second will be at the end of a block and\n      // therefore seem to not be a line break. But in its original context it\n      // was, so we should also convert it to a block split.\n\n      for (i = 0; i < l; i += 1) {\n        brBreaksLine[i] = isLineBreak(nodes[i], false);\n      }\n\n      while (l--) {\n        br = nodes[l];\n\n        if (!brBreaksLine[l]) {\n          detach(br);\n        } else {\n          replaceWith(br, document.createTextNode('\\n'));\n        }\n      } // 3. Remove <code>; its format clashes with <pre>\n\n\n      nodes = node.querySelectorAll('CODE');\n      l = nodes.length;\n\n      while (l--) {\n        detach(nodes[l]);\n      }\n\n      if (output.childNodes.length) {\n        output.appendChild(document.createTextNode('\\n'));\n      }\n\n      output.appendChild(empty(node));\n    } // 4. Replace nbsp with regular sp\n\n\n    walker = new TreeWalker(output, SHOW_TEXT);\n\n    while (node = walker.nextNode()) {\n      node.data = node.data.replace(/ /g, ' '); // nbsp -> sp\n    }\n\n    output.normalize();\n    return fixCursor(this.createElement('PRE', this._config.tagAttributes.pre, [output]), root);\n  };\n\n  var removePre = function (frag) {\n    var document = this._doc;\n    var root = this._root;\n    var pres = frag.querySelectorAll('PRE');\n    var l = pres.length;\n    var pre, walker, node, value, contents, index;\n\n    while (l--) {\n      pre = pres[l];\n      walker = new TreeWalker(pre, SHOW_TEXT);\n\n      while (node = walker.nextNode()) {\n        value = node.data;\n        value = value.replace(/ (?= )/g, ' '); // sp -> nbsp\n\n        contents = document.createDocumentFragment();\n\n        while ((index = value.indexOf('\\n')) > -1) {\n          contents.appendChild(document.createTextNode(value.slice(0, index)));\n          contents.appendChild(document.createElement('BR'));\n          value = value.slice(index + 1);\n        }\n\n        node.parentNode.insertBefore(contents, node);\n        node.data = value;\n      }\n\n      fixContainer(pre, root);\n      replaceWith(pre, empty(pre));\n    }\n\n    return frag;\n  };\n\n  proto.code = function () {\n    var range = this.getSelection();\n\n    if (range.collapsed || isContainer(range.commonAncestorContainer)) {\n      this.modifyBlocks(addPre, range);\n    } else {\n      this.changeFormat({\n        tag: 'CODE',\n        attributes: this._config.tagAttributes.code\n      }, null, range);\n    }\n\n    return this.focus();\n  };\n\n  proto.removeCode = function () {\n    var range = this.getSelection();\n    var ancestor = range.commonAncestorContainer;\n    var inPre = getNearest(ancestor, this._root, 'PRE');\n\n    if (inPre) {\n      this.modifyBlocks(removePre, range);\n    } else {\n      this.changeFormat(null, {\n        tag: 'CODE'\n      }, range);\n    }\n\n    return this.focus();\n  };\n\n  proto.toggleCode = function () {\n    if (this.hasFormat('PRE') || this.hasFormat('CODE')) {\n      this.removeCode();\n    } else {\n      this.code();\n    }\n\n    return this;\n  }; // ---\n\n\n  function removeFormatting(self, root, clean) {\n    var node, next;\n\n    for (node = root.firstChild; node; node = next) {\n      next = node.nextSibling;\n\n      if (isInline(node)) {\n        if (node.nodeType === TEXT_NODE || node.nodeName === 'BR' || node.nodeName === 'IMG') {\n          clean.appendChild(node);\n          continue;\n        }\n      } else if (isBlock(node)) {\n        clean.appendChild(self.createDefaultBlock([removeFormatting(self, node, self._doc.createDocumentFragment())]));\n        continue;\n      }\n\n      removeFormatting(self, node, clean);\n    }\n\n    return clean;\n  }\n\n  proto.removeAllFormatting = function (range) {\n    if (!range && !(range = this.getSelection()) || range.collapsed) {\n      return this;\n    }\n\n    var root = this._root;\n    var stopNode = range.commonAncestorContainer;\n\n    while (stopNode && !isBlock(stopNode)) {\n      stopNode = stopNode.parentNode;\n    }\n\n    if (!stopNode) {\n      expandRangeToBlockBoundaries(range, root);\n      stopNode = root;\n    }\n\n    if (stopNode.nodeType === TEXT_NODE) {\n      return this;\n    } // Record undo point\n\n\n    this.saveUndoState(range); // Avoid splitting where we're already at edges.\n\n    moveRangeBoundariesUpTree(range, stopNode, stopNode, root); // Split the selection up to the block, or if whole selection in same\n    // block, expand range boundaries to ends of block and split up to root.\n\n    var doc = stopNode.ownerDocument;\n    var startContainer = range.startContainer;\n    var startOffset = range.startOffset;\n    var endContainer = range.endContainer;\n    var endOffset = range.endOffset; // Split end point first to avoid problems when end and start\n    // in same container.\n\n    var formattedNodes = doc.createDocumentFragment();\n    var cleanNodes = doc.createDocumentFragment();\n    var nodeAfterSplit = split(endContainer, endOffset, stopNode, root);\n    var nodeInSplit = split(startContainer, startOffset, stopNode, root);\n    var nextNode, childNodes; // Then replace contents in split with a cleaned version of the same:\n    // blocks become default blocks, text and leaf nodes survive, everything\n    // else is obliterated.\n\n    while (nodeInSplit !== nodeAfterSplit) {\n      nextNode = nodeInSplit.nextSibling;\n      formattedNodes.appendChild(nodeInSplit);\n      nodeInSplit = nextNode;\n    }\n\n    removeFormatting(this, formattedNodes, cleanNodes);\n    cleanNodes.normalize();\n    nodeInSplit = cleanNodes.firstChild;\n    nextNode = cleanNodes.lastChild; // Restore selection\n\n    childNodes = stopNode.childNodes;\n\n    if (nodeInSplit) {\n      stopNode.insertBefore(cleanNodes, nodeAfterSplit);\n      startOffset = indexOf.call(childNodes, nodeInSplit);\n      endOffset = indexOf.call(childNodes, nextNode) + 1;\n    } else {\n      startOffset = indexOf.call(childNodes, nodeAfterSplit);\n      endOffset = startOffset;\n    } // Merge text nodes at edges, if possible\n\n\n    range.setStart(stopNode, startOffset);\n    range.setEnd(stopNode, endOffset);\n    mergeInlines(stopNode, range); // And move back down the tree\n\n    moveRangeBoundariesDownTree(range);\n    this.setSelection(range);\n\n    this._updatePath(range, true);\n\n    return this.focus();\n  };\n\n  proto.increaseQuoteLevel = command('modifyBlocks', increaseBlockQuoteLevel);\n  proto.decreaseQuoteLevel = command('modifyBlocks', decreaseBlockQuoteLevel);\n  proto.makeUnorderedList = command('modifyBlocks', makeUnorderedList);\n  proto.makeOrderedList = command('modifyBlocks', makeOrderedList);\n  proto.removeList = command('modifyBlocks', removeList); // Node.js exports\n\n  Squire.isInline = isInline;\n  Squire.isBlock = isBlock;\n  Squire.isContainer = isContainer;\n  Squire.getBlockWalker = getBlockWalker;\n  Squire.getPreviousBlock = getPreviousBlock;\n  Squire.getNextBlock = getNextBlock;\n  Squire.areAlike = areAlike;\n  Squire.hasTagAttributes = hasTagAttributes;\n  Squire.getNearest = getNearest;\n  Squire.isOrContains = isOrContains;\n  Squire.detach = detach;\n  Squire.replaceWith = replaceWith;\n  Squire.empty = empty; // Range.js exports\n\n  Squire.getNodeBefore = getNodeBefore;\n  Squire.getNodeAfter = getNodeAfter;\n  Squire.insertNodeInRange = insertNodeInRange;\n  Squire.extractContentsOfRange = extractContentsOfRange;\n  Squire.deleteContentsOfRange = deleteContentsOfRange;\n  Squire.insertTreeFragmentIntoRange = insertTreeFragmentIntoRange;\n  Squire.isNodeContainedInRange = isNodeContainedInRange;\n  Squire.moveRangeBoundariesDownTree = moveRangeBoundariesDownTree;\n  Squire.moveRangeBoundariesUpTree = moveRangeBoundariesUpTree;\n  Squire.getStartBlockOfRange = getStartBlockOfRange;\n  Squire.getEndBlockOfRange = getEndBlockOfRange;\n  Squire.contentWalker = contentWalker;\n  Squire.rangeDoesStartAtBlockBoundary = rangeDoesStartAtBlockBoundary;\n  Squire.rangeDoesEndAtBlockBoundary = rangeDoesEndAtBlockBoundary;\n  Squire.expandRangeToBlockBoundaries = expandRangeToBlockBoundaries; // Clipboard.js exports\n\n  Squire.onPaste = onPaste; // Editor.js exports\n\n  Squire.addLinks = addLinks;\n  Squire.splitBlock = splitBlock;\n  Squire.startSelectionId = startSelectionId;\n  Squire.endSelectionId = endSelectionId;\n\n  if (typeof exports === 'object') {\n    module.exports = Squire;\n  } else if (typeof define === 'function' && __webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")) {\n    define(function () {\n      return Squire;\n    });\n  } else {\n    win.Squire = Squire;\n\n    if (top !== win && doc.documentElement.getAttribute('data-squireinit') === 'true') {\n      win.editor = new Squire(doc);\n\n      if (win.onEditorLoad) {\n        win.onEditorLoad(win.editor);\n        win.onEditorLoad = null;\n      }\n    }\n  }\n}(document);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (sq);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/resources/write/squire.js\n");

/***/ }),

/***/ "./src/resources/write/write.css":
/*!***************************************!*\
  !*** ./src/resources/write/write.css ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!./write.css */ \"./node_modules/css-loader/dist/cjs.js!./src/resources/write/write.css\");\n\nif (typeof content === 'string') {\n  content = [[module.i, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = __webpack_require__(/*! ../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n\nif (true) {\n  if (!content.locals) {\n    module.hot.accept(\n      /*! !../../../node_modules/css-loader/dist/cjs.js!./write.css */ \"./node_modules/css-loader/dist/cjs.js!./src/resources/write/write.css\",\n      function () {\n        var newContent = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!./write.css */ \"./node_modules/css-loader/dist/cjs.js!./src/resources/write/write.css\");\n\n        if (typeof newContent === 'string') {\n          newContent = [[module.i, newContent, '']];\n        }\n        \n        update(newContent);\n      }\n    )\n  }\n\n  module.hot.dispose(function() { \n    update();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzb3VyY2VzL3dyaXRlL3dyaXRlLmNzcz9lZGY1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsbUJBQU8sQ0FBQyx3SUFBNEQ7O0FBRWxGO0FBQ0EsY0FBYyxRQUFTO0FBQ3ZCOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLHlKQUE4RTs7QUFFbkc7QUFDQTtBQUNBOztBQUVBLElBQUksSUFBVTtBQUNkO0FBQ0E7QUFDQSxNQUFNLHdJQUE0RDtBQUNsRTtBQUNBLHlCQUF5QixtQkFBTyxDQUFDLHdJQUE0RDs7QUFFN0Y7QUFDQSx5QkFBeUIsUUFBUztBQUNsQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQztBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6Ii4vc3JjL3Jlc291cmNlcy93cml0ZS93cml0ZS5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vd3JpdGUuY3NzXCIpO1xuXG5pZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbn1cblxudmFyIG9wdGlvbnMgPSB7fVxuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZiAoY29udGVudC5sb2NhbHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbn1cblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgaWYgKCFjb250ZW50LmxvY2Fscykge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFxuICAgICAgXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vd3JpdGUuY3NzXCIsXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi93cml0ZS5jc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgXG4gICAgdXBkYXRlKCk7XG4gIH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/resources/write/write.css\n");

/***/ }),

/***/ "./src/resources/write/write.js":
/*!**************************************!*\
  !*** ./src/resources/write/write.js ***!
  \**************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _js_constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../js/constant */ \"./src/resources/js/constant.js\");\n/* harmony import */ var page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! page */ \"./node_modules/page/page.js\");\n/* harmony import */ var page__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(page__WEBPACK_IMPORTED_MODULE_1__);\n\n\n$(function () {\n  $(\".write_form\").submit(function (e) {\n    e.preventDefault();\n    var form = $(this).get(0);\n    var url = _js_constant__WEBPACK_IMPORTED_MODULE_0__[\"default\"].URL_CREATE_POST;\n    var btnSubmit = $('button.submit');\n    var data = new FormData(form);\n    var summaryBlob = new Blob([oEditorSum.getHTML()], {\n      type: \"text/xml\"\n    });\n    var prosBlob = new Blob([oEditorPros.getHTML()], {\n      type: \"text/xml\"\n    });\n    var consBlob = new Blob([oEditorCons.getHTML()], {\n      type: \"text/xml\"\n    });\n    var factBlob = new Blob([oEditorFact.getHTML()], {\n      type: \"text/xml\"\n    });\n    data.append('summary_file', summaryBlob);\n    data.append('pros_file', prosBlob);\n    data.append('cons_file', consBlob);\n    data.append('fact_file', factBlob);\n    console.log(\"전송할 데이터 \\n\", ...data);\n    btnSubmit.prop('disabled', true);\n    $.ajax({\n      type: \"POST\",\n      url,\n      data,\n      enctype: 'multipart/form-data',\n      processData: false,\n      contentType: false,\n      cache: false,\n      success: function (data) {\n        window.location.href = \"/\";\n      },\n      error: function (e) {\n        alert('글 작성 실패');\n        console.log(e);\n        btnSubmit.prop('disabled', false);\n      },\n      done: function (data) {\n        btnSubmit.prop('disabled', false);\n      }\n    });\n  });\n\n  function toggleBold() {\n    const bold = $(this).data('bold');\n    bold ? oEditor.bold() : oEditor.removeBold();\n    $(this).data('bold', !bold);\n  }\n\n  function toggleUnderline() {\n    const underline = $(this).data('underline');\n    underline ? oEditor.underline() : oEditor.removeUnderline();\n    $(this).data('underline', !underline);\n  }\n\n  function getImage(input) {\n    if (input.files && input.files[0]) {\n      if (/\\.(jpe?g|png|gif)$/i.test(input.files[0].name)) {\n        const reader = new FileReader();\n\n        reader.onload = function (e) {\n          oEditor.insertImage(reader.result, {\n            class: 'inserted_image'\n          });\n          input.value = \"\";\n        };\n\n        reader.readAsDataURL(input.files[0]);\n      } else {\n        alert('png, gif, jpg 파일만 업로드 가능합니다');\n      }\n    }\n  }\n\n  const $target = $('.write_cont');\n  /* 요약 */\n\n  const oEditorSum = new Squire($target.get(0), {\n    blockTag: 'P',\n    blockAttributes: {\n      class: \"content_desc\"\n    }\n  });\n  /* 찬성측 의견 */\n\n  const oEditorPros = new Squire($target.get(1), {\n    blockTag: 'li',\n    blockAttributes: {\n      class: \"list_item\"\n    }\n  });\n  /* 반대측 의견 */\n\n  const oEditorCons = new Squire($target.get(2), {\n    blockTag: 'li',\n    blockAttributes: {\n      class: \"list_item\"\n    }\n  });\n  /* 팩트 링크 */\n\n  const oEditorFact = new Squire($target.get(3), {\n    blockTag: 'li',\n    blockAttributes: {\n      class: \"list_item on\"\n    }\n  });\n  const editors = [oEditorSum, oEditorPros, oEditorCons, oEditorFact];\n  let oEditor = editors[0];\n  $('.write_cont').click(function (e) {\n    const $target = $(e.delegateTarget);\n    const index = $('.write_cont').index($target);\n    oEditor = editors[index];\n  });\n  $('.colorpicker').each(function () {\n    $(this).minicolors({\n      control: $(this).attr('data-control') || 'hue',\n      defaultValue: $(this).attr('data-defaultValue') || '#000',\n      format: $(this).attr('data-format') || 'hex',\n      keywords: $(this).attr('data-keywords') || '',\n      inline: $(this).attr('data-inline') === 'true',\n      letterCase: $(this).attr('data-letterCase') || 'lowercase',\n      opacity: $(this).attr('data-opacity'),\n      position: $(this).attr('data-position') || 'bottom',\n      swatches: $(this).attr('data-swatches') ? $(this).attr('data-swatches').split('|') : [],\n      change: function (hex, opacity) {\n        var log;\n\n        try {\n          log = hex ? hex : '#000';\n          oEditor.setTextColour(log);\n          if (opacity) log += ', ' + opacity;\n          console.log(log);\n        } catch (e) {}\n      },\n      theme: 'default',\n      position: 'top bottom'\n    });\n  });\n  $('body').on('click', '.inserted_image', function (e) {\n    $(e.target).toggleClass('on');\n  });\n  $('.fontsize').on('blur keyup', 'input', function (e) {\n    if (e.type === \"keyup\" && e.keyCode != 13) return;\n    oEditor.setFontSize($(e.target).val() + 'px');\n    e.preventDefault();\n  });\n  $('.bold').click(toggleBold);\n  $('.underline').click(toggleUnderline);\n  $('.ordered').click(function () {\n    oEditor.makeOrderedList();\n  });\n  $('.unordered').click(function () {\n    oEditor.makeUnorderedList();\n  });\n  $('.indent').click(function () {\n    oEditor.increaseListLevel();\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/resources/write/write.js\n");

/***/ }),

/***/ 1:
/*!********************************************!*\
  !*** multi ./src/resources/write/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./src/resources/write/index.js */"./src/resources/write/index.js");


/***/ })

/******/ });